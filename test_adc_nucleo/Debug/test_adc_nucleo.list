
test_adc_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013d9c  08007d10  08007d10  00008d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801baac  0801baac  0001d0a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801baac  0801baac  0001caac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bab4  0801bab4  0001d0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bab4  0801bab4  0001cab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bab8  0801bab8  0001cab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801babc  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067ac  200000a8  0801bb64  0001d0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006854  0801bb64  0001d854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002240e  00000000  00000000  0001d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e2a  00000000  00000000  0003f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00044310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a3  00000000  00000000  000459e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a24c  00000000  00000000  00046a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c52f  00000000  00000000  00060ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a439b  00000000  00000000  0007d1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00121599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f8  00000000  00000000  00121654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0012774c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003d7c  00000000  00000000  001277a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001b8  00000000  00000000  0012b521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007cf8 	.word	0x08007cf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08007cf8 	.word	0x08007cf8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	200000c4 	.word	0x200000c4
 8000500:	20000164 	.word	0x20000164

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 ffcb 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f82b 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f967 	bl	80007e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000516:	f000 f945 	bl	80007a4 <MX_DMA_Init>
  MX_ADC1_Init();
 800051a:	f000 f885 	bl	8000628 <MX_ADC1_Init>
  MX_I2C1_Init();
 800051e:	f000 f913 	bl	8000748 <MX_I2C1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  cola=xQueueCreate(1, sizeof(uint32_t));
 8000522:	2200      	movs	r2, #0
 8000524:	2104      	movs	r1, #4
 8000526:	2001      	movs	r0, #1
 8000528:	f004 face 	bl	8004ac8 <xQueueGenericCreate>
 800052c:	4603      	mov	r3, r0
 800052e:	4a0b      	ldr	r2, [pc, #44]	@ (800055c <main+0x58>)
 8000530:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000532:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <main+0x5c>)
 8000534:	1d3c      	adds	r4, r7, #4
 8000536:	461d      	mov	r5, r3
 8000538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f004 f952 	bl	80047f2 <osThreadCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <main+0x60>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f004 f946 	bl	80047e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x54>
 800055c:	20002568 	.word	0x20002568
 8000560:	08007d1c 	.word	0x08007d1c
 8000564:	20000460 	.word	0x20000460

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	@ 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 faae 	bl	8007ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <SystemClock_Config+0xb8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a22      	ldr	r2, [pc, #136]	@ (8000620 <SystemClock_Config+0xb8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <SystemClock_Config+0xb8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <SystemClock_Config+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000624 <SystemClock_Config+0xbc>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <SystemClock_Config+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f9df 	bl	80039a0 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e8:	f000 fa8a 	bl	8000b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fc42 	bl	8003e90 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000612:	f000 fa75 	bl	8000b00 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	@ 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	@ 0x30
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2220      	movs	r2, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 fa48 	bl	8007ad8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000648:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <MX_ADC1_Init+0x110>)
 800064a:	4a3c      	ldr	r2, [pc, #240]	@ (800073c <MX_ADC1_Init+0x114>)
 800064c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064e:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000654:	4b38      	ldr	r3, [pc, #224]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065a:	4b37      	ldr	r3, [pc, #220]	@ (8000738 <MX_ADC1_Init+0x110>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000660:	4b35      	ldr	r3, [pc, #212]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000662:	2201      	movs	r2, #1
 8000664:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b34      	ldr	r3, [pc, #208]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b30      	ldr	r3, [pc, #192]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000676:	4a32      	ldr	r2, [pc, #200]	@ (8000740 <MX_ADC1_Init+0x118>)
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <MX_ADC1_Init+0x110>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000682:	2201      	movs	r2, #1
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068e:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000690:	2201      	movs	r2, #1
 8000692:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4828      	ldr	r0, [pc, #160]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000696:	f000 ff47 	bl	8001528 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80006a0:	f000 fa2e 	bl	8000b00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4619      	mov	r1, r3
 80006b6:	4820      	ldr	r0, [pc, #128]	@ (8000738 <MX_ADC1_Init+0x110>)
 80006b8:	f001 f9c8 	bl	8001a4c <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006c2:	f000 fa1d 	bl	8000b00 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80006ce:	2303      	movs	r3, #3
 80006d0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_ADC1_Init+0x11c>)
 80006dc:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4812      	ldr	r0, [pc, #72]	@ (8000738 <MX_ADC1_Init+0x110>)
 80006f0:	f001 fc56 	bl	8001fa0 <HAL_ADCEx_InjectedConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80006fa:	f000 fa01 	bl	8000b00 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000708:	f001 fc4a 	bl	8001fa0 <HAL_ADCEx_InjectedConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000712:	f000 f9f5 	bl	8000b00 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 3;
 8000716:	2303      	movs	r3, #3
 8000718:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	@ (8000738 <MX_ADC1_Init+0x110>)
 8000720:	f001 fc3e 	bl	8001fa0 <HAL_ADCEx_InjectedConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800072a:	f000 f9e9 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	@ 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000364 	.word	0x20000364
 800073c:	40012000 	.word	0x40012000
 8000740:	0f000001 	.word	0x0f000001
 8000744:	000f0001 	.word	0x000f0001

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f002 fb91 	bl	8002eac <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f9b6 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000040c 	.word	0x2000040c
 800079c:	40005400 	.word	0x40005400
 80007a0:	00061a80 	.word	0x00061a80

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_DMA_Init+0x3c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a0b      	ldr	r2, [pc, #44]	@ (80007e0 <MX_DMA_Init+0x3c>)
 80007b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_DMA_Init+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2105      	movs	r1, #5
 80007ca:	2038      	movs	r0, #56	@ 0x38
 80007cc:	f001 fe36 	bl	800243c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007d0:	2038      	movs	r0, #56	@ 0x38
 80007d2:	f001 fe4f 	bl	8002474 <HAL_NVIC_EnableIRQ>

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_GPIO_Init+0x7c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_GPIO_Init+0x7c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a10      	ldr	r2, [pc, #64]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_GPIO_Init+0x7c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000838:	f002 fb1e 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800083c:	2320      	movs	r3, #32
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_GPIO_Init+0x80>)
 8000854:	f002 f98c 	bl	8002b70 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000

08000868 <get_note_from_frequency>:

/* USER CODE BEGIN 4 */

  //char snum[5];
  char get_note_from_frequency(uint32_t frequency) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
      if (frequency >= 261 && frequency <= 277) return 'C';
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000876:	d905      	bls.n	8000884 <get_note_from_frequency+0x1c>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800087e:	d201      	bcs.n	8000884 <get_note_from_frequency+0x1c>
 8000880:	2343      	movs	r3, #67	@ 0x43
 8000882:	e03c      	b.n	80008fe <get_note_from_frequency+0x96>

      if (frequency >= 294 && frequency <= 311) return 'D';
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 800088a:	d305      	bcc.n	8000898 <get_note_from_frequency+0x30>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8000892:	d201      	bcs.n	8000898 <get_note_from_frequency+0x30>
 8000894:	2344      	movs	r3, #68	@ 0x44
 8000896:	e032      	b.n	80008fe <get_note_from_frequency+0x96>

      if (frequency >= 330 && frequency <= 349) return 'E';
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 800089e:	d305      	bcc.n	80008ac <get_note_from_frequency+0x44>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80008a6:	d201      	bcs.n	80008ac <get_note_from_frequency+0x44>
 80008a8:	2345      	movs	r3, #69	@ 0x45
 80008aa:	e028      	b.n	80008fe <get_note_from_frequency+0x96>

      if (frequency >= 350 && frequency <= 369) return 'F';
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80008b2:	d305      	bcc.n	80008c0 <get_note_from_frequency+0x58>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 80008ba:	d201      	bcs.n	80008c0 <get_note_from_frequency+0x58>
 80008bc:	2346      	movs	r3, #70	@ 0x46
 80008be:	e01e      	b.n	80008fe <get_note_from_frequency+0x96>

      if (frequency >= 393 && frequency <= 415) return 'G';
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f5b3 7fc4 	cmp.w	r3, #392	@ 0x188
 80008c6:	d905      	bls.n	80008d4 <get_note_from_frequency+0x6c>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 80008ce:	d201      	bcs.n	80008d4 <get_note_from_frequency+0x6c>
 80008d0:	2347      	movs	r3, #71	@ 0x47
 80008d2:	e014      	b.n	80008fe <get_note_from_frequency+0x96>

      if (frequency >= 441 && frequency <= 466) return 'A';
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80008da:	d905      	bls.n	80008e8 <get_note_from_frequency+0x80>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f5b3 7fe9 	cmp.w	r3, #466	@ 0x1d2
 80008e2:	d801      	bhi.n	80008e8 <get_note_from_frequency+0x80>
 80008e4:	2341      	movs	r3, #65	@ 0x41
 80008e6:	e00a      	b.n	80008fe <get_note_from_frequency+0x96>

      if (frequency >= 494 && frequency <= 523) return 'B';
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f5b3 7ff7 	cmp.w	r3, #494	@ 0x1ee
 80008ee:	d305      	bcc.n	80008fc <get_note_from_frequency+0x94>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 80008f6:	d201      	bcs.n	80008fc <get_note_from_frequency+0x94>
 80008f8:	2342      	movs	r3, #66	@ 0x42
 80008fa:	e000      	b.n	80008fe <get_note_from_frequency+0x96>

      return '-';
 80008fc:	232d      	movs	r3, #45	@ 0x2d
  }
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <calculate_fft_and_find_frequency>:

uint32_t calculate_fft_and_find_frequency(uint16_t *buffer, uint32_t buffer_size) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	@ 0x38
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	arm_rfft_fast_instance_f32 S;
	float32_t maxValue, mean;
	uint32_t maxIndex;

	// Inicialización de la FFT
	arm_rfft_fast_init_f32(&S, buffer_size);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b29a      	uxth	r2, r3
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f006 f833 	bl	800698c <arm_rfft_fast_init_f32>

	// Copiar las muestras del ADC (convertirlas de enteros a flotantes)
	for (uint32_t i = 0; i < buffer_size; i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
 800092a:	e011      	b.n	8000950 <calculate_fft_and_find_frequency+0x44>
	  input_signal[i] = (float32_t)buffer[i];
 800092c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4413      	add	r3, r2
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800093e:	4a29      	ldr	r2, [pc, #164]	@ (80009e4 <calculate_fft_and_find_frequency+0xd8>)
 8000940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < buffer_size; i++) {
 800094a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800094c:	3301      	adds	r3, #1
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000950:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d3e9      	bcc.n	800092c <calculate_fft_and_find_frequency+0x20>
	}

	arm_mean_f32(input_signal, buffer_size, &mean);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	461a      	mov	r2, r3
 800095e:	6839      	ldr	r1, [r7, #0]
 8000960:	4820      	ldr	r0, [pc, #128]	@ (80009e4 <calculate_fft_and_find_frequency+0xd8>)
 8000962:	f005 fea1 	bl	80066a8 <arm_mean_f32>

	for (uint32_t i = 0; i < buffer_size; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
 800096a:	e012      	b.n	8000992 <calculate_fft_and_find_frequency+0x86>
	  input_signal[i] = (float32_t)input_signal[i] - mean;
 800096c:	4a1d      	ldr	r2, [pc, #116]	@ (80009e4 <calculate_fft_and_find_frequency+0xd8>)
 800096e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	ed93 7a00 	vldr	s14, [r3]
 8000978:	edd7 7a03 	vldr	s15, [r7, #12]
 800097c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000980:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <calculate_fft_and_find_frequency+0xd8>)
 8000982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0; i < buffer_size; i++) {
 800098c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800098e:	3301      	adds	r3, #1
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
 8000992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3e8      	bcc.n	800096c <calculate_fft_and_find_frequency+0x60>
	}

	// Realizar la FFT
	arm_rfft_fast_f32(&S, input_signal, fft_output, 0);
 800099a:	f107 0014 	add.w	r0, r7, #20
 800099e:	2300      	movs	r3, #0
 80009a0:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <calculate_fft_and_find_frequency+0xdc>)
 80009a2:	4910      	ldr	r1, [pc, #64]	@ (80009e4 <calculate_fft_and_find_frequency+0xd8>)
 80009a4:	f006 f8d6 	bl	8006b54 <arm_rfft_fast_f32>

	// Calcular la magnitud (sólo necesitamos la parte real)
	arm_cmplx_mag_f32(fft_output, fft_output, buffer_size / 2);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	085b      	lsrs	r3, r3, #1
 80009ac:	461a      	mov	r2, r3
 80009ae:	490e      	ldr	r1, [pc, #56]	@ (80009e8 <calculate_fft_and_find_frequency+0xdc>)
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <calculate_fft_and_find_frequency+0xdc>)
 80009b2:	f006 fcad 	bl	8007310 <arm_cmplx_mag_f32>

	// Encontrar el índice con el valor más alto en el espectro de la FFT
	arm_max_f32(fft_output, buffer_size / 2, &maxValue, &maxIndex);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	0859      	lsrs	r1, r3, #1
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	f107 0210 	add.w	r2, r7, #16
 80009c2:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <calculate_fft_and_find_frequency+0xdc>)
 80009c4:	f005 feae 	bl	8006724 <arm_max_f32>

	// Calcular la frecuencia dominante
	uint32_t frequency = (maxIndex * SAMPLE_RATE) / buffer_size;
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80009ce:	fb03 f202 	mul.w	r2, r3, r2
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	return frequency;
 80009da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3738      	adds	r7, #56	@ 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000464 	.word	0x20000464
 80009e8:	200004e4 	.word	0x200004e4

080009ec <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint32_t dato = calculate_fft_and_find_frequency(buffer, FFT_SIZE);
 80009f4:	2120      	movs	r1, #32
 80009f6:	480e      	ldr	r0, [pc, #56]	@ (8000a30 <HAL_ADC_ConvCpltCallback+0x44>)
 80009f8:	f7ff ff88 	bl	800090c <calculate_fft_and_find_frequency>
 80009fc:	4603      	mov	r3, r0
 80009fe:	60fb      	str	r3, [r7, #12]

	BaseType_t xHigherPriorityTaskWoken;
	xQueueSendFromISR(cola, &dato, &xHigherPriorityTaskWoken);
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_ADC_ConvCpltCallback+0x48>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	f107 0208 	add.w	r2, r7, #8
 8000a08:	f107 010c 	add.w	r1, r7, #12
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f004 f8b5 	bl	8004b7c <xQueueGenericSendFromISR>
//    vTaskNotifyGiveFromISR(defaultTaskHandle, &xHigherPriorityTaskWoken);

	// Realiza un cambio de contexto si se desbloqueó una tarea de mayor prioridad
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d007      	beq.n	8000a28 <HAL_ADC_ConvCpltCallback+0x3c>
 8000a18:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	f3bf 8f4f 	dsb	sy
 8000a24:	f3bf 8f6f 	isb	sy
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20002568 	.word	0x20002568
 8000a38:	e000ed04 	.word	0xe000ed04

08000a3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	uint32_t dato;
  /* USER CODE BEGIN 5 */
	SSD1306_Init();
 8000a44:	f000 f8ae 	bl	8000ba4 <SSD1306_Init>

  /* Infinite loop */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, LEN_BUFFER);
 8000a48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a4c:	491d      	ldr	r1, [pc, #116]	@ (8000ac4 <StartDefaultTask+0x88>)
 8000a4e:	481e      	ldr	r0, [pc, #120]	@ (8000ac8 <StartDefaultTask+0x8c>)
 8000a50:	f000 feee 	bl	8001830 <HAL_ADC_Start_DMA>

	for(;;)
	{
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		xQueueReceive(cola, &dato, portMAX_DELAY);
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <StartDefaultTask+0x90>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f107 010c 	add.w	r1, r7, #12
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f929 	bl	8004cb8 <xQueueReceive>

		SSD1306_GotoXY (0,30);
 8000a66:	211e      	movs	r1, #30
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 fa05 	bl	8000e78 <SSD1306_GotoXY>
		SSD1306_PutIntU(0, 0, i++, &Font_11x18);
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <StartDefaultTask+0x94>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	1c53      	adds	r3, r2, #1
 8000a74:	4916      	ldr	r1, [pc, #88]	@ (8000ad0 <StartDefaultTask+0x94>)
 8000a76:	600b      	str	r3, [r1, #0]
 8000a78:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <StartDefaultTask+0x98>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 f845 	bl	8000b0c <SSD1306_PutIntU>
		SSD1306_GotoXY (0,0);
 8000a82:	2100      	movs	r1, #0
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 f9f7 	bl	8000e78 <SSD1306_GotoXY>
		SSD1306_Puts("Freq: ", &Font_11x18, SSD1306_COLOR_WHITE);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4911      	ldr	r1, [pc, #68]	@ (8000ad4 <StartDefaultTask+0x98>)
 8000a8e:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <StartDefaultTask+0x9c>)
 8000a90:	f000 fa86 	bl	8000fa0 <SSD1306_Puts>
		SSD1306_GotoXY (60,0);
 8000a94:	2100      	movs	r1, #0
 8000a96:	203c      	movs	r0, #60	@ 0x3c
 8000a98:	f000 f9ee 	bl	8000e78 <SSD1306_GotoXY>
		SSD1306_Putc(get_note_from_frequency(dato), &Font_11x18, SSD1306_COLOR_WHITE);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fee2 	bl	8000868 <get_note_from_frequency>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	490a      	ldr	r1, [pc, #40]	@ (8000ad4 <StartDefaultTask+0x98>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f9fa 	bl	8000ea4 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 8000ab0:	f000 f93c 	bl	8000d2c <SSD1306_UpdateScreen>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, LEN_BUFFER);
 8000ab4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ab8:	4902      	ldr	r1, [pc, #8]	@ (8000ac4 <StartDefaultTask+0x88>)
 8000aba:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <StartDefaultTask+0x8c>)
 8000abc:	f000 feb8 	bl	8001830 <HAL_ADC_Start_DMA>
		xQueueReceive(cola, &dato, portMAX_DELAY);
 8000ac0:	bf00      	nop
 8000ac2:	e7c7      	b.n	8000a54 <StartDefaultTask+0x18>
 8000ac4:	20000564 	.word	0x20000564
 8000ac8:	20000364 	.word	0x20000364
 8000acc:	20002568 	.word	0x20002568
 8000ad0:	20002564 	.word	0x20002564
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	08007d38 	.word	0x08007d38

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 fcfb 	bl	80014e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010000 	.word	0x40010000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <SSD1306_PutIntU>:
        }
    }
}


uint8_t SSD1306_PutIntU(uint8_t X, uint8_t Y, uint32_t num, FontDef_t* Font) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	73bb      	strb	r3, [r7, #14]
	uint8_t str[11]; // 10 chars max for UINT32_MAX
	uint8_t *pStr = str;
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	61fb      	str	r3, [r7, #28]
	uint8_t pX = X;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	76fb      	strb	r3, [r7, #27]

	// String termination character
	*pStr++ = '\0';
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	61fa      	str	r2, [r7, #28]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]

	// Convert number to characters
	do { *pStr++ = (num % 10) + '0'; } while (num /= 10);
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <SSD1306_PutIntU+0x94>)
 8000b36:	fba3 2301 	umull	r2, r3, r3, r1
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	1aca      	subs	r2, r1, r3
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	1c59      	adds	r1, r3, #1
 8000b4c:	61f9      	str	r1, [r7, #28]
 8000b4e:	3230      	adds	r2, #48	@ 0x30
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <SSD1306_PutIntU+0x94>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1e5      	bne.n	8000b32 <SSD1306_PutIntU+0x26>

	// Draw a number
	while (*--pStr) pX += SSD1306_Putc(*pStr,Font, 1);
 8000b66:	e00b      	b.n	8000b80 <SSD1306_PutIntU+0x74>
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f997 	bl	8000ea4 <SSD1306_Putc>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	7efb      	ldrb	r3, [r7, #27]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	76fb      	strb	r3, [r7, #27]
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1ec      	bne.n	8000b68 <SSD1306_PutIntU+0x5c>

	return (pX - X);
 8000b8e:	7efa      	ldrb	r2, [r7, #27]
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	cccccccd 	.word	0xcccccccd

08000ba4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000baa:	f000 fa1f 	bl	8000fec <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000bae:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2178      	movs	r1, #120	@ 0x78
 8000bb6:	485b      	ldr	r0, [pc, #364]	@ (8000d24 <SSD1306_Init+0x180>)
 8000bb8:	f002 fbba 	bl	8003330 <HAL_I2C_IsDeviceReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e0a9      	b.n	8000d1a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000bc6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000bca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bcc:	e002      	b.n	8000bd4 <SSD1306_Init+0x30>
		p--;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f9      	bne.n	8000bce <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bda:	22ae      	movs	r2, #174	@ 0xae
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2078      	movs	r0, #120	@ 0x78
 8000be0:	f000 fa80 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000be4:	2220      	movs	r2, #32
 8000be6:	2100      	movs	r1, #0
 8000be8:	2078      	movs	r0, #120	@ 0x78
 8000bea:	f000 fa7b 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bee:	2210      	movs	r2, #16
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2078      	movs	r0, #120	@ 0x78
 8000bf4:	f000 fa76 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bf8:	22b0      	movs	r2, #176	@ 0xb0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2078      	movs	r0, #120	@ 0x78
 8000bfe:	f000 fa71 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c02:	22c8      	movs	r2, #200	@ 0xc8
 8000c04:	2100      	movs	r1, #0
 8000c06:	2078      	movs	r0, #120	@ 0x78
 8000c08:	f000 fa6c 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2078      	movs	r0, #120	@ 0x78
 8000c12:	f000 fa67 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c16:	2210      	movs	r2, #16
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2078      	movs	r0, #120	@ 0x78
 8000c1c:	f000 fa62 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c20:	2240      	movs	r2, #64	@ 0x40
 8000c22:	2100      	movs	r1, #0
 8000c24:	2078      	movs	r0, #120	@ 0x78
 8000c26:	f000 fa5d 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c2a:	2281      	movs	r2, #129	@ 0x81
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2078      	movs	r0, #120	@ 0x78
 8000c30:	f000 fa58 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c34:	22ff      	movs	r2, #255	@ 0xff
 8000c36:	2100      	movs	r1, #0
 8000c38:	2078      	movs	r0, #120	@ 0x78
 8000c3a:	f000 fa53 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c3e:	22a1      	movs	r2, #161	@ 0xa1
 8000c40:	2100      	movs	r1, #0
 8000c42:	2078      	movs	r0, #120	@ 0x78
 8000c44:	f000 fa4e 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c48:	22a6      	movs	r2, #166	@ 0xa6
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2078      	movs	r0, #120	@ 0x78
 8000c4e:	f000 fa49 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c52:	22a8      	movs	r2, #168	@ 0xa8
 8000c54:	2100      	movs	r1, #0
 8000c56:	2078      	movs	r0, #120	@ 0x78
 8000c58:	f000 fa44 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c5c:	223f      	movs	r2, #63	@ 0x3f
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2078      	movs	r0, #120	@ 0x78
 8000c62:	f000 fa3f 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c66:	22a4      	movs	r2, #164	@ 0xa4
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2078      	movs	r0, #120	@ 0x78
 8000c6c:	f000 fa3a 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c70:	22d3      	movs	r2, #211	@ 0xd3
 8000c72:	2100      	movs	r1, #0
 8000c74:	2078      	movs	r0, #120	@ 0x78
 8000c76:	f000 fa35 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2078      	movs	r0, #120	@ 0x78
 8000c80:	f000 fa30 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c84:	22d5      	movs	r2, #213	@ 0xd5
 8000c86:	2100      	movs	r1, #0
 8000c88:	2078      	movs	r0, #120	@ 0x78
 8000c8a:	f000 fa2b 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c8e:	22f0      	movs	r2, #240	@ 0xf0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2078      	movs	r0, #120	@ 0x78
 8000c94:	f000 fa26 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c98:	22d9      	movs	r2, #217	@ 0xd9
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2078      	movs	r0, #120	@ 0x78
 8000c9e:	f000 fa21 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ca2:	2222      	movs	r2, #34	@ 0x22
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2078      	movs	r0, #120	@ 0x78
 8000ca8:	f000 fa1c 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000cac:	22da      	movs	r2, #218	@ 0xda
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2078      	movs	r0, #120	@ 0x78
 8000cb2:	f000 fa17 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000cb6:	2212      	movs	r2, #18
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2078      	movs	r0, #120	@ 0x78
 8000cbc:	f000 fa12 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000cc0:	22db      	movs	r2, #219	@ 0xdb
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2078      	movs	r0, #120	@ 0x78
 8000cc6:	f000 fa0d 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cca:	2220      	movs	r2, #32
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2078      	movs	r0, #120	@ 0x78
 8000cd0:	f000 fa08 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cd4:	228d      	movs	r2, #141	@ 0x8d
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2078      	movs	r0, #120	@ 0x78
 8000cda:	f000 fa03 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cde:	2214      	movs	r2, #20
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2078      	movs	r0, #120	@ 0x78
 8000ce4:	f000 f9fe 	bl	80010e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ce8:	22af      	movs	r2, #175	@ 0xaf
 8000cea:	2100      	movs	r1, #0
 8000cec:	2078      	movs	r0, #120	@ 0x78
 8000cee:	f000 f9f9 	bl	80010e4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000cf2:	222e      	movs	r2, #46	@ 0x2e
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2078      	movs	r0, #120	@ 0x78
 8000cf8:	f000 f9f4 	bl	80010e4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f000 f843 	bl	8000d88 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000d02:	f000 f813 	bl	8000d2c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <SSD1306_Init+0x184>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <SSD1306_Init+0x184>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <SSD1306_Init+0x184>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000d18:	2301      	movs	r3, #1
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000040c 	.word	0x2000040c
 8000d28:	2000296c 	.word	0x2000296c

08000d2c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	e01d      	b.n	8000d74 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	3b50      	subs	r3, #80	@ 0x50
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	2078      	movs	r0, #120	@ 0x78
 8000d44:	f000 f9ce 	bl	80010e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2078      	movs	r0, #120	@ 0x78
 8000d4e:	f000 f9c9 	bl	80010e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d52:	2210      	movs	r2, #16
 8000d54:	2100      	movs	r1, #0
 8000d56:	2078      	movs	r0, #120	@ 0x78
 8000d58:	f000 f9c4 	bl	80010e4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	01db      	lsls	r3, r3, #7
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <SSD1306_UpdateScreen+0x58>)
 8000d62:	441a      	add	r2, r3
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	2140      	movs	r1, #64	@ 0x40
 8000d68:	2078      	movs	r0, #120	@ 0x78
 8000d6a:	f000 f955 	bl	8001018 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3301      	adds	r3, #1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	d9de      	bls.n	8000d38 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000256c 	.word	0x2000256c

08000d88 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <SSD1306_Fill+0x14>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e000      	b.n	8000d9e <SSD1306_Fill+0x16>
 8000d9c:	23ff      	movs	r3, #255	@ 0xff
 8000d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000da2:	4619      	mov	r1, r3
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <SSD1306_Fill+0x2c>)
 8000da6:	f006 fe97 	bl	8007ad8 <memset>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000256c 	.word	0x2000256c

08000db8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	80bb      	strh	r3, [r7, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	70fb      	strb	r3, [r7, #3]
	if (
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dce:	d848      	bhi.n	8000e62 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dd4:	d845      	bhi.n	8000e62 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000dd6:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <SSD1306_DrawPixel+0xb8>)
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d11a      	bne.n	8000e28 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	b298      	uxth	r0, r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	01db      	lsls	r3, r3, #7
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <SSD1306_DrawPixel+0xbc>)
 8000e02:	5cd3      	ldrb	r3, [r2, r3]
 8000e04:	b25a      	sxtb	r2, r3
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b259      	sxtb	r1, r3
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	01db      	lsls	r3, r3, #7
 8000e1e:	4413      	add	r3, r2
 8000e20:	b2c9      	uxtb	r1, r1
 8000e22:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <SSD1306_DrawPixel+0xbc>)
 8000e24:	54d1      	strb	r1, [r2, r3]
 8000e26:	e01d      	b.n	8000e64 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	b298      	uxth	r0, r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	01db      	lsls	r3, r3, #7
 8000e34:	4413      	add	r3, r2
 8000e36:	4a0f      	ldr	r2, [pc, #60]	@ (8000e74 <SSD1306_DrawPixel+0xbc>)
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	b25a      	sxtb	r2, r3
 8000e3c:	88bb      	ldrh	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	b259      	sxtb	r1, r3
 8000e52:	88fa      	ldrh	r2, [r7, #6]
 8000e54:	4603      	mov	r3, r0
 8000e56:	01db      	lsls	r3, r3, #7
 8000e58:	4413      	add	r3, r2
 8000e5a:	b2c9      	uxtb	r1, r1
 8000e5c:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <SSD1306_DrawPixel+0xbc>)
 8000e5e:	54d1      	strb	r1, [r2, r3]
 8000e60:	e000      	b.n	8000e64 <SSD1306_DrawPixel+0xac>
		return;
 8000e62:	bf00      	nop
	}
}
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000296c 	.word	0x2000296c
 8000e74:	2000256c 	.word	0x2000256c

08000e78 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e88:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <SSD1306_GotoXY+0x28>)
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <SSD1306_GotoXY+0x28>)
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	8053      	strh	r3, [r2, #2]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	2000296c 	.word	0x2000296c

08000ea4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000eb4:	4b39      	ldr	r3, [pc, #228]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
	if (
 8000ec0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ec2:	dc07      	bgt.n	8000ed4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ec4:	4b35      	ldr	r3, [pc, #212]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000ec6:	885b      	ldrh	r3, [r3, #2]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	785b      	ldrb	r3, [r3, #1]
 8000ece:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ed0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ed2:	dd01      	ble.n	8000ed8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e05d      	b.n	8000f94 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e04b      	b.n	8000f76 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	3b20      	subs	r3, #32
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	7849      	ldrb	r1, [r1, #1]
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4619      	mov	r1, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	440b      	add	r3, r1
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e030      	b.n	8000f64 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d010      	beq.n	8000f34 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000f14:	881a      	ldrh	r2, [r3, #0]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b298      	uxth	r0, r3
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000f20:	885a      	ldrh	r2, [r3, #2]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	79ba      	ldrb	r2, [r7, #6]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff ff43 	bl	8000db8 <SSD1306_DrawPixel>
 8000f32:	e014      	b.n	8000f5e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b298      	uxth	r0, r3
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000f42:	885a      	ldrh	r2, [r3, #2]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4413      	add	r3, r2
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf0c      	ite	eq
 8000f52:	2301      	moveq	r3, #1
 8000f54:	2300      	movne	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f7ff ff2d 	bl	8000db8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	3301      	adds	r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d3c8      	bcc.n	8000f02 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d3ad      	bcc.n	8000ede <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <SSD1306_Putc+0xf8>)
 8000f90:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000296c 	.word	0x2000296c

08000fa0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000fae:	e012      	b.n	8000fd6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff73 	bl	8000ea4 <SSD1306_Putc>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d002      	beq.n	8000fd0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	e008      	b.n	8000fe2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1e8      	bne.n	8000fb0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <ssd1306_I2C_Init+0x28>)
 8000ff4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ff6:	e002      	b.n	8000ffe <ssd1306_I2C_Init+0x12>
		p--;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f9      	bne.n	8000ff8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	0003d090 	.word	0x0003d090

08001018 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b0c7      	sub	sp, #284	@ 0x11c
 800101c:	af02      	add	r7, sp, #8
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001026:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800102a:	600a      	str	r2, [r1, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001032:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001036:	4622      	mov	r2, r4
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800103e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001042:	4602      	mov	r2, r0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800104a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800104e:	460a      	mov	r2, r1
 8001050:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001052:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800105a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800105e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800106c:	e015      	b.n	800109a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800106e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001072:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001076:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	441a      	add	r2, r3
 800107e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001082:	3301      	adds	r3, #1
 8001084:	7811      	ldrb	r1, [r2, #0]
 8001086:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800108a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800108e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001090:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001094:	3301      	adds	r3, #1
 8001096:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800109a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80010a4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80010a8:	8812      	ldrh	r2, [r2, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d8df      	bhi.n	800106e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80010ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010b2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b299      	uxth	r1, r3
 80010ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f107 020c 	add.w	r2, r7, #12
 80010cc:	200a      	movs	r0, #10
 80010ce:	9000      	str	r0, [sp, #0]
 80010d0:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <ssd1306_I2C_WriteMulti+0xc8>)
 80010d2:	f002 f82f 	bl	8003134 <HAL_I2C_Master_Transmit>
}
 80010d6:	bf00      	nop
 80010d8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	2000040c 	.word	0x2000040c

080010e4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	460b      	mov	r3, r1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	4613      	mov	r3, r2
 80010f4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010fa:	797b      	ldrb	r3, [r7, #5]
 80010fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	b299      	uxth	r1, r3
 8001102:	f107 020c 	add.w	r2, r7, #12
 8001106:	230a      	movs	r3, #10
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2302      	movs	r3, #2
 800110c:	4803      	ldr	r0, [pc, #12]	@ (800111c <ssd1306_I2C_Write+0x38>)
 800110e:	f002 f811 	bl	8003134 <HAL_I2C_Master_Transmit>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000040c 	.word	0x2000040c

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_MspInit+0x54>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a11      	ldr	r2, [pc, #68]	@ (8001174 <HAL_MspInit+0x54>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <HAL_MspInit+0x54>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_MspInit+0x54>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_MspInit+0x54>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_MspInit+0x54>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	210f      	movs	r1, #15
 8001162:	f06f 0001 	mvn.w	r0, #1
 8001166:	f001 f969 	bl	800243c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a33      	ldr	r2, [pc, #204]	@ (8001264 <HAL_ADC_MspInit+0xec>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d160      	bne.n	800125c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <HAL_ADC_MspInit+0xf0>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a31      	ldr	r2, [pc, #196]	@ (8001268 <HAL_ADC_MspInit+0xf0>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <HAL_ADC_MspInit+0xf0>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <HAL_ADC_MspInit+0xf0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a2a      	ldr	r2, [pc, #168]	@ (8001268 <HAL_ADC_MspInit+0xf0>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_ADC_MspInit+0xf0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4821      	ldr	r0, [pc, #132]	@ (800126c <HAL_ADC_MspInit+0xf4>)
 80011e6:	f001 fcc3 	bl	8002b70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <HAL_ADC_MspInit+0xfc>)
 80011ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 8001204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 800120c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001210:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 8001214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001218:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 800121c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001220:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 8001224:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001228:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001230:	480f      	ldr	r0, [pc, #60]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 8001232:	f001 f92d 	bl	8002490 <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800123c:	f7ff fc60 	bl	8000b00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 8001244:	639a      	str	r2, [r3, #56]	@ 0x38
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_ADC_MspInit+0xf8>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2105      	movs	r1, #5
 8001250:	2012      	movs	r0, #18
 8001252:	f001 f8f3 	bl	800243c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001256:	2012      	movs	r0, #18
 8001258:	f001 f90c 	bl	8002474 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	@ 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40012000 	.word	0x40012000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000
 8001270:	200003ac 	.word	0x200003ac
 8001274:	40026410 	.word	0x40026410

08001278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	@ 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <HAL_I2C_MspInit+0x84>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12b      	bne.n	80012f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b6:	23c0      	movs	r3, #192	@ 0xc0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ba:	2312      	movs	r3, #18
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c6:	2304      	movs	r3, #4
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <HAL_I2C_MspInit+0x8c>)
 80012d2:	f001 fc4d 	bl	8002b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2019      	movs	r0, #25
 800131e:	f001 f88d 	bl	800243c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001322:	2019      	movs	r0, #25
 8001324:	f001 f8a6 	bl	8002474 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <HAL_InitTick+0xa0>)
 800132e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001330:	4a1d      	ldr	r2, [pc, #116]	@ (80013a8 <HAL_InitTick+0xa0>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6453      	str	r3, [r2, #68]	@ 0x44
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_InitTick+0xa0>)
 800133a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001344:	f107 0210 	add.w	r2, r7, #16
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f002 ff7e 	bl	8004250 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001354:	f002 ff68 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8001358:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800135a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135c:	4a13      	ldr	r2, [pc, #76]	@ (80013ac <HAL_InitTick+0xa4>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	3b01      	subs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_InitTick+0xa8>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <HAL_InitTick+0xac>)
 800136c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_InitTick+0xa8>)
 8001370:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001374:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001376:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <HAL_InitTick+0xa8>)
 8001378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <HAL_InitTick+0xa8>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_InitTick+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001388:	4809      	ldr	r0, [pc, #36]	@ (80013b0 <HAL_InitTick+0xa8>)
 800138a:	f002 ff93 	bl	80042b4 <HAL_TIM_Base_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d104      	bne.n	800139e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <HAL_InitTick+0xa8>)
 8001396:	f002 ffe7 	bl	8004368 <HAL_TIM_Base_Start_IT>
 800139a:	4603      	mov	r3, r0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3730      	adds	r7, #48	@ 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	431bde83 	.word	0x431bde83
 80013b0:	20002974 	.word	0x20002974
 80013b4:	40010000 	.word	0x40010000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <ADC_IRQHandler+0x10>)
 80013f6:	f000 f8da 	bl	80015ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000364 	.word	0x20000364

08001404 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800140a:	f003 f80f 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20002974 	.word	0x20002974

08001418 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <DMA2_Stream0_IRQHandler+0x10>)
 800141e:	f001 f93d 	bl	800269c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200003ac 	.word	0x200003ac

0800142c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001454:	480d      	ldr	r0, [pc, #52]	@ (800148c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001456:	490e      	ldr	r1, [pc, #56]	@ (8001490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001458:	4a0e      	ldr	r2, [pc, #56]	@ (8001494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800146c:	4c0b      	ldr	r4, [pc, #44]	@ (800149c <LoopFillZerobss+0x26>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800147a:	f7ff ffd7 	bl	800142c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f006 fb8f 	bl	8007ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff f83f 	bl	8000504 <main>
  bx  lr    
 8001486:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001488:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001494:	0801babc 	.word	0x0801babc
  ldr r2, =_sbss
 8001498:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800149c:	20006854 	.word	0x20006854

080014a0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <DMA1_Stream0_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <HAL_Init+0x40>)
 80014ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <HAL_Init+0x40>)
 80014ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <HAL_Init+0x40>)
 80014c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 ffaa 	bl	8002426 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ff18 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff fe22 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	@ (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000050 	.word	0x20000050
 800150c:	200029bc 	.word	0x200029bc

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200029bc 	.word	0x200029bc

08001528 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e033      	b.n	80015a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fe16 	bl	8001178 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800156e:	f023 0302 	bic.w	r3, r3, #2
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fb88 	bl	8001c90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
 8001596:	e001      	b.n	800159c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0320 	and.w	r3, r3, #32
 80015de:	2b20      	cmp	r3, #32
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d049      	beq.n	8001684 <HAL_ADC_IRQHandler+0xd6>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d046      	beq.n	8001684 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d105      	bne.n	800160e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12b      	bne.n	8001674 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001620:	2b00      	cmp	r3, #0
 8001622:	d127      	bne.n	8001674 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800163c:	2b00      	cmp	r3, #0
 800163e:	d119      	bne.n	8001674 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0220 	bic.w	r2, r2, #32
 800164e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff f9b9 	bl	80009ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f06f 0212 	mvn.w	r2, #18
 8001682:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf0c      	ite	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	2300      	movne	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a4:	2b80      	cmp	r3, #128	@ 0x80
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d057      	beq.n	8001766 <HAL_ADC_IRQHandler+0x1b8>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d054      	beq.n	8001766 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d139      	bne.n	8001756 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d12b      	bne.n	8001756 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001708:	2b00      	cmp	r3, #0
 800170a:	d124      	bne.n	8001756 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11d      	bne.n	8001756 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001730:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fc18 	bl	8001f8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 020c 	mvn.w	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001786:	2b40      	cmp	r3, #64	@ 0x40
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d017      	beq.n	80017c8 <HAL_ADC_IRQHandler+0x21a>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d014      	beq.n	80017c8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10d      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f933 	bl	8001a24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0201 	mvn.w	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	bf0c      	ite	eq
 80017d6:	2301      	moveq	r3, #1
 80017d8:	2300      	movne	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80017ec:	bf0c      	ite	eq
 80017ee:	2301      	moveq	r3, #1
 80017f0:	2300      	movne	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d015      	beq.n	8001828 <HAL_ADC_IRQHandler+0x27a>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d012      	beq.n	8001828 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	f043 0202 	orr.w	r2, r3, #2
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f06f 0220 	mvn.w	r2, #32
 8001816:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f90d 	bl	8001a38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f06f 0220 	mvn.w	r2, #32
 8001826:	601a      	str	r2, [r3, #0]
  }
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_ADC_Start_DMA+0x1e>
 800184a:	2302      	movs	r3, #2
 800184c:	e0ce      	b.n	80019ec <HAL_ADC_Start_DMA+0x1bc>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d018      	beq.n	8001896 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001874:	4b5f      	ldr	r3, [pc, #380]	@ (80019f4 <HAL_ADC_Start_DMA+0x1c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5f      	ldr	r2, [pc, #380]	@ (80019f8 <HAL_ADC_Start_DMA+0x1c8>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0c9a      	lsrs	r2, r3, #18
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001888:	e002      	b.n	8001890 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	3b01      	subs	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f9      	bne.n	800188a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018a4:	d107      	bne.n	80018b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	f040 8086 	bne.w	80019d2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001904:	d106      	bne.n	8001914 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f023 0206 	bic.w	r2, r3, #6
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44
 8001912:	e002      	b.n	800191a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001922:	4b36      	ldr	r3, [pc, #216]	@ (80019fc <HAL_ADC_Start_DMA+0x1cc>)
 8001924:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192a:	4a35      	ldr	r2, [pc, #212]	@ (8001a00 <HAL_ADC_Start_DMA+0x1d0>)
 800192c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001932:	4a34      	ldr	r2, [pc, #208]	@ (8001a04 <HAL_ADC_Start_DMA+0x1d4>)
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193a:	4a33      	ldr	r2, [pc, #204]	@ (8001a08 <HAL_ADC_Start_DMA+0x1d8>)
 800193c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001946:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001956:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001966:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	334c      	adds	r3, #76	@ 0x4c
 8001972:	4619      	mov	r1, r3
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f000 fe38 	bl	80025ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10f      	bne.n	80019a8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d129      	bne.n	80019ea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	e020      	b.n	80019ea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <HAL_ADC_Start_DMA+0x1dc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11b      	bne.n	80019ea <HAL_ADC_Start_DMA+0x1ba>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d114      	bne.n	80019ea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	e00b      	b.n	80019ea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f043 0210 	orr.w	r2, r3, #16
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000048 	.word	0x20000048
 80019f8:	431bde83 	.word	0x431bde83
 80019fc:	40012300 	.word	0x40012300
 8001a00:	08001e89 	.word	0x08001e89
 8001a04:	08001f43 	.word	0x08001f43
 8001a08:	08001f5f 	.word	0x08001f5f
 8001a0c:	40012000 	.word	0x40012000

08001a10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1c>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e105      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x228>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	d925      	bls.n	8001ac4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68d9      	ldr	r1, [r3, #12]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b1e      	subs	r3, #30
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43da      	mvns	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68d9      	ldr	r1, [r3, #12]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4403      	add	r3, r0
 8001ab6:	3b1e      	subs	r3, #30
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	e022      	b.n	8001b0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6919      	ldr	r1, [r3, #16]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2207      	movs	r2, #7
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6919      	ldr	r1, [r3, #16]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4403      	add	r3, r0
 8001b00:	409a      	lsls	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d824      	bhi.n	8001b5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3b05      	subs	r3, #5
 8001b24:	221f      	movs	r2, #31
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	400a      	ands	r2, r1
 8001b32:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b05      	subs	r3, #5
 8001b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b5a:	e04c      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b0c      	cmp	r3, #12
 8001b62:	d824      	bhi.n	8001bae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	3b23      	subs	r3, #35	@ 0x23
 8001b76:	221f      	movs	r2, #31
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	400a      	ands	r2, r1
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b23      	subs	r3, #35	@ 0x23
 8001ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bac:	e023      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b41      	subs	r3, #65	@ 0x41
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b41      	subs	r3, #65	@ 0x41
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_ADC_ConfigChannel+0x234>)
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	@ (8001c84 <HAL_ADC_ConfigChannel+0x238>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x1cc>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b12      	cmp	r3, #18
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	@ (8001c84 <HAL_ADC_ConfigChannel+0x238>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d123      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x21e>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d003      	beq.n	8001c32 <HAL_ADC_ConfigChannel+0x1e6>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b11      	cmp	r3, #17
 8001c30:	d11b      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d111      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_ADC_ConfigChannel+0x23c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <HAL_ADC_ConfigChannel+0x240>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9a      	lsrs	r2, r3, #18
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c5c:	e002      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f9      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40012300 	.word	0x40012300
 8001c84:	40012000 	.word	0x40012000
 8001c88:	20000048 	.word	0x20000048
 8001c8c:	431bde83 	.word	0x431bde83

08001c90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c98:	4b79      	ldr	r3, [pc, #484]	@ (8001e80 <ADC_Init+0x1f0>)
 8001c9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	021a      	lsls	r2, r3, #8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6899      	ldr	r1, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	4a58      	ldr	r2, [pc, #352]	@ (8001e84 <ADC_Init+0x1f4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6899      	ldr	r1, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	e00f      	b.n	8001d8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0202 	bic.w	r2, r2, #2
 8001d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6899      	ldr	r1, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7e1b      	ldrb	r3, [r3, #24]
 8001da8:	005a      	lsls	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01b      	beq.n	8001df4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001dda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	3b01      	subs	r3, #1
 8001de8:	035a      	lsls	r2, r3, #13
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	e007      	b.n	8001e04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	051a      	lsls	r2, r3, #20
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e46:	025a      	lsls	r2, r3, #9
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6899      	ldr	r1, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	029a      	lsls	r2, r3, #10
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	40012300 	.word	0x40012300
 8001e84:	0f000001 	.word	0x0f000001

08001e88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d13c      	bne.n	8001f1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d12b      	bne.n	8001f14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d127      	bne.n	8001f14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d119      	bne.n	8001f14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0220 	bic.w	r2, r2, #32
 8001eee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f043 0201 	orr.w	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7fe fd69 	bl	80009ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f1a:	e00e      	b.n	8001f3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f7ff fd85 	bl	8001a38 <HAL_ADC_ErrorCallback>
}
 8001f2e:	e004      	b.n	8001f3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff fd5d 	bl	8001a10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2240      	movs	r2, #64	@ 0x40
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0204 	orr.w	r2, r3, #4
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff fd5a 	bl	8001a38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e17d      	b.n	80022b4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	d925      	bls.n	8002014 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b1e      	subs	r3, #30
 8001fde:	2207      	movs	r2, #7
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	400a      	ands	r2, r1
 8001fec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68d9      	ldr	r1, [r3, #12]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	4603      	mov	r3, r0
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4403      	add	r3, r0
 8002006:	3b1e      	subs	r3, #30
 8002008:	409a      	lsls	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	e022      	b.n	800205a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6919      	ldr	r1, [r3, #16]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	2207      	movs	r2, #7
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	400a      	ands	r2, r1
 8002036:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6919      	ldr	r1, [r3, #16]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	4603      	mov	r3, r0
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4403      	add	r3, r0
 8002050:	409a      	lsls	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002068:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	3b01      	subs	r3, #1
 8002076:	051a      	lsls	r2, r3, #20
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3303      	adds	r3, #3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	221f      	movs	r2, #31
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43da      	mvns	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	400a      	ands	r2, r1
 80020b0:	639a      	str	r2, [r3, #56]	@ 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3303      	adds	r3, #3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a74      	ldr	r2, [pc, #464]	@ (80022c0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d022      	beq.n	8002138 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	e00f      	b.n	8002158 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002156:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	7d5b      	ldrb	r3, [r3, #21]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	e007      	b.n	8002182 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002180:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	7d1b      	ldrb	r3, [r3, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	e007      	b.n	80021ac <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021aa:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d02e      	beq.n	8002212 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d840      	bhi.n	800223a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d002      	beq.n	80021c2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d014      	beq.n	80021ea <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80021c0:	e03b      	b.n	800223a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80021d0:	f023 030f 	bic.w	r3, r3, #15
 80021d4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6959      	ldr	r1, [r3, #20]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	615a      	str	r2, [r3, #20]
      break;
 80021e8:	e03b      	b.n	8002262 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80021f8:	f023 030f 	bic.w	r3, r3, #15
 80021fc:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6999      	ldr	r1, [r3, #24]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	619a      	str	r2, [r3, #24]
      break;
 8002210:	e027      	b.n	8002262 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002220:	f023 030f 	bic.w	r3, r3, #15
 8002224:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69d9      	ldr	r1, [r3, #28]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	61da      	str	r2, [r3, #28]
      break;
 8002238:	e013      	b.n	8002262 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002248:	f023 030f 	bic.w	r3, r3, #15
 800224c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a19      	ldr	r1, [r3, #32]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	621a      	str	r2, [r3, #32]
      break;
 8002260:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002262:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002264:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a17      	ldr	r2, [pc, #92]	@ (80022c8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d109      	bne.n	8002284 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b12      	cmp	r3, #18
 8002276:	d105      	bne.n	8002284 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10d      	bne.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b10      	cmp	r3, #16
 8002294:	d003      	beq.n	800229e <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b11      	cmp	r3, #17
 800229c:	d105      	bne.n	80022aa <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	000f0001 	.word	0x000f0001
 80022c4:	40012300 	.word	0x40012300
 80022c8:	40012000 	.word	0x40012000

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	@ (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	@ (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	@ (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	@ (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ff4c 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244e:	f7ff ff61 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002452:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	6978      	ldr	r0, [r7, #20]
 800245a:	f7ff ffb1 	bl	80023c0 <NVIC_EncodePriority>
 800245e:	4602      	mov	r2, r0
 8002460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff80 	bl	800236c <__NVIC_SetPriority>
}
 800246c:	bf00      	nop
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff54 	bl	8002330 <__NVIC_EnableIRQ>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff f838 	bl	8001510 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e099      	b.n	80025e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024cc:	e00f      	b.n	80024ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ce:	f7ff f81f 	bl	8001510 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d908      	bls.n	80024ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e078      	b.n	80025e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e8      	bne.n	80024ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_DMA_Init+0x158>)
 8002508:	4013      	ands	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0307 	bic.w	r3, r3, #7
 800256e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	2b04      	cmp	r3, #4
 8002580:	d117      	bne.n	80025b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fa6f 	bl	8002a78 <DMA_CheckFifoParam>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2240      	movs	r2, #64	@ 0x40
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025ae:	2301      	movs	r3, #1
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa26 	bl	8002a0c <DMA_CalcBaseAndBitshift>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	223f      	movs	r2, #63	@ 0x3f
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	f010803f 	.word	0xf010803f

080025ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_DMA_Start_IT+0x26>
 800260e:	2302      	movs	r3, #2
 8002610:	e040      	b.n	8002694 <HAL_DMA_Start_IT+0xa8>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d12f      	bne.n	8002686 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f9b8 	bl	80029b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	223f      	movs	r2, #63	@ 0x3f
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0216 	orr.w	r2, r2, #22
 800265a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0208 	orr.w	r2, r2, #8
 8002672:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e005      	b.n	8002692 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002692:	7dfb      	ldrb	r3, [r7, #23]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026a8:	4b8e      	ldr	r3, [pc, #568]	@ (80028e4 <HAL_DMA_IRQHandler+0x248>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a8e      	ldr	r2, [pc, #568]	@ (80028e8 <HAL_DMA_IRQHandler+0x24c>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c6:	2208      	movs	r2, #8
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	2208      	movs	r2, #8
 80026f6:	409a      	lsls	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	2201      	movs	r2, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272a:	2201      	movs	r2, #1
 800272c:	409a      	lsls	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	f043 0202 	orr.w	r2, r3, #2
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	2204      	movs	r2, #4
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002760:	2204      	movs	r2, #4
 8002762:	409a      	lsls	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002778:	2210      	movs	r2, #16
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d043      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d03c      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	2210      	movs	r2, #16
 8002798:	409a      	lsls	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d018      	beq.n	80027de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d024      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	4798      	blx	r3
 80027ca:	e01f      	b.n	800280c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
 80027dc:	e016      	b.n	800280c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0208 	bic.w	r2, r2, #8
 80027fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	2220      	movs	r2, #32
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 808f 	beq.w	800293c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8087 	beq.w	800293c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	2220      	movs	r2, #32
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b05      	cmp	r3, #5
 8002844:	d136      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0216 	bic.w	r2, r2, #22
 8002854:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002864:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <HAL_DMA_IRQHandler+0x1da>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0208 	bic.w	r2, r2, #8
 8002884:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	223f      	movs	r2, #63	@ 0x3f
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d07e      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
        }
        return;
 80028b2:	e079      	b.n	80029a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01d      	beq.n	80028fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10d      	bne.n	80028ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d031      	beq.n	800293c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
 80028e0:	e02c      	b.n	800293c <HAL_DMA_IRQHandler+0x2a0>
 80028e2:	bf00      	nop
 80028e4:	20000048 	.word	0x20000048
 80028e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d023      	beq.n	800293c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	e01e      	b.n	800293c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10f      	bne.n	800292c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0210 	bic.w	r2, r2, #16
 800291a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	2b00      	cmp	r3, #0
 8002942:	d032      	beq.n	80029aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d022      	beq.n	8002996 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2205      	movs	r2, #5
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	3301      	adds	r3, #1
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	d307      	bcc.n	8002984 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f2      	bne.n	8002968 <HAL_DMA_IRQHandler+0x2cc>
 8002982:	e000      	b.n	8002986 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002984:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
 80029a6:	e000      	b.n	80029aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80029a8:	bf00      	nop
    }
  }
}
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b40      	cmp	r3, #64	@ 0x40
 80029dc:	d108      	bne.n	80029f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ee:	e007      	b.n	8002a00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3b10      	subs	r3, #16
 8002a1c:	4a14      	ldr	r2, [pc, #80]	@ (8002a70 <DMA_CalcBaseAndBitshift+0x64>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a26:	4a13      	ldr	r2, [pc, #76]	@ (8002a74 <DMA_CalcBaseAndBitshift+0x68>)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d909      	bls.n	8002a4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	1d1a      	adds	r2, r3, #4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a4c:	e007      	b.n	8002a5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	aaaaaaab 	.word	0xaaaaaaab
 8002a74:	08008abc 	.word	0x08008abc

08002a78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11f      	bne.n	8002ad2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d856      	bhi.n	8002b46 <DMA_CheckFifoParam+0xce>
 8002a98:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa0 <DMA_CheckFifoParam+0x28>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ac3 	.word	0x08002ac3
 8002aa8:	08002ab1 	.word	0x08002ab1
 8002aac:	08002b47 	.word	0x08002b47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d046      	beq.n	8002b4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e043      	b.n	8002b4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aca:	d140      	bne.n	8002b4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad0:	e03d      	b.n	8002b4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ada:	d121      	bne.n	8002b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d837      	bhi.n	8002b52 <DMA_CheckFifoParam+0xda>
 8002ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae8 <DMA_CheckFifoParam+0x70>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002aff 	.word	0x08002aff
 8002af0:	08002af9 	.word	0x08002af9
 8002af4:	08002b11 	.word	0x08002b11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e030      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d025      	beq.n	8002b56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0e:	e022      	b.n	8002b56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b18:	d11f      	bne.n	8002b5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b1e:	e01c      	b.n	8002b5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d903      	bls.n	8002b2e <DMA_CheckFifoParam+0xb6>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d003      	beq.n	8002b34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b2c:	e018      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      break;
 8002b32:	e015      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      break;
 8002b44:	e00b      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      break;
 8002b46:	bf00      	nop
 8002b48:	e00a      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e008      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e006      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
 8002b54:	e004      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      break;
 8002b56:	bf00      	nop
 8002b58:	e002      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e159      	b.n	8002e40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8148 	bne.w	8002e3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d005      	beq.n	8002bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d130      	bne.n	8002c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 0201 	and.w	r2, r3, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d017      	beq.n	8002c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d123      	bne.n	8002cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a2 	beq.w	8002e3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b57      	ldr	r3, [pc, #348]	@ (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	4a56      	ldr	r2, [pc, #344]	@ (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d06:	4b54      	ldr	r3, [pc, #336]	@ (8002e58 <HAL_GPIO_Init+0x2e8>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a52      	ldr	r2, [pc, #328]	@ (8002e5c <HAL_GPIO_Init+0x2ec>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a49      	ldr	r2, [pc, #292]	@ (8002e60 <HAL_GPIO_Init+0x2f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d019      	beq.n	8002d72 <HAL_GPIO_Init+0x202>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a48      	ldr	r2, [pc, #288]	@ (8002e64 <HAL_GPIO_Init+0x2f4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0x1fe>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a47      	ldr	r2, [pc, #284]	@ (8002e68 <HAL_GPIO_Init+0x2f8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00d      	beq.n	8002d6a <HAL_GPIO_Init+0x1fa>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a46      	ldr	r2, [pc, #280]	@ (8002e6c <HAL_GPIO_Init+0x2fc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <HAL_GPIO_Init+0x1f6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a45      	ldr	r2, [pc, #276]	@ (8002e70 <HAL_GPIO_Init+0x300>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <HAL_GPIO_Init+0x1f2>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d72:	2300      	movs	r3, #0
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d84:	4935      	ldr	r1, [pc, #212]	@ (8002e5c <HAL_GPIO_Init+0x2ec>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d92:	4b38      	ldr	r3, [pc, #224]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db6:	4a2f      	ldr	r2, [pc, #188]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de0:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de6:	4b23      	ldr	r3, [pc, #140]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e10:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e34:	4a0f      	ldr	r2, [pc, #60]	@ (8002e74 <HAL_GPIO_Init+0x304>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	f67f aea2 	bls.w	8002b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e12b      	b.n	8003116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f9d0 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f10:	f001 f976 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8002f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a81      	ldr	r2, [pc, #516]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d807      	bhi.n	8002f30 <HAL_I2C_Init+0x84>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a80      	ldr	r2, [pc, #512]	@ (8003124 <HAL_I2C_Init+0x278>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e006      	b.n	8002f3e <HAL_I2C_Init+0x92>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a7d      	ldr	r2, [pc, #500]	@ (8003128 <HAL_I2C_Init+0x27c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0e7      	b.n	8003116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a78      	ldr	r2, [pc, #480]	@ (800312c <HAL_I2C_Init+0x280>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a6a      	ldr	r2, [pc, #424]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d802      	bhi.n	8002f80 <HAL_I2C_Init+0xd4>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	e009      	b.n	8002f94 <HAL_I2C_Init+0xe8>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	4a69      	ldr	r2, [pc, #420]	@ (8003130 <HAL_I2C_Init+0x284>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	3301      	adds	r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fa6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	495c      	ldr	r1, [pc, #368]	@ (8003120 <HAL_I2C_Init+0x274>)
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d819      	bhi.n	8002fe8 <HAL_I2C_Init+0x13c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1e59      	subs	r1, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fc8:	400b      	ands	r3, r1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_I2C_Init+0x138>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e59      	subs	r1, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe2:	e051      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e04f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <HAL_I2C_Init+0x168>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_I2C_Init+0x18e>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x196>
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_I2C_Init+0x1bc>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e58      	subs	r0, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	440b      	add	r3, r1
 8003058:	fbb0 f3f3 	udiv	r3, r0, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Init+0x1dc>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6809      	ldr	r1, [r1, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6911      	ldr	r1, [r2, #16]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	000186a0 	.word	0x000186a0
 8003124:	001e847f 	.word	0x001e847f
 8003128:	003d08ff 	.word	0x003d08ff
 800312c:	431bde83 	.word	0x431bde83
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	460b      	mov	r3, r1
 8003142:	817b      	strh	r3, [r7, #10]
 8003144:	4613      	mov	r3, r2
 8003146:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7fe f9e2 	bl	8001510 <HAL_GetTick>
 800314c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b20      	cmp	r3, #32
 8003158:	f040 80e0 	bne.w	800331c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2319      	movs	r3, #25
 8003162:	2201      	movs	r2, #1
 8003164:	4970      	ldr	r1, [pc, #448]	@ (8003328 <HAL_I2C_Master_Transmit+0x1f4>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa92 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
 8003174:	e0d3      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_I2C_Master_Transmit+0x50>
 8003180:	2302      	movs	r3, #2
 8003182:	e0cc      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d007      	beq.n	80031aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2221      	movs	r2, #33	@ 0x21
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2210      	movs	r2, #16
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	893a      	ldrh	r2, [r7, #8]
 80031da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a50      	ldr	r2, [pc, #320]	@ (800332c <HAL_I2C_Master_Transmit+0x1f8>)
 80031ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031ec:	8979      	ldrh	r1, [r7, #10]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f9ca 	bl	800358c <I2C_MasterRequestWrite>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e08d      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003218:	e066      	b.n	80032e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fb0c 	bl	800383c <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	2b04      	cmp	r3, #4
 8003230:	d107      	bne.n	8003242 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06b      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b04      	cmp	r3, #4
 8003282:	d11b      	bne.n	80032bc <HAL_I2C_Master_Transmit+0x188>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d017      	beq.n	80032bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	6a39      	ldr	r1, [r7, #32]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fafc 	bl	80038be <I2C_WaitOnBTFFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e01a      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d194      	bne.n	800321a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	00100002 	.word	0x00100002
 800332c:	ffff0000 	.word	0xffff0000

08003330 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	460b      	mov	r3, r1
 800333e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7fe f8e6 	bl	8001510 <HAL_GetTick>
 8003344:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003346:	2301      	movs	r3, #1
 8003348:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	f040 8111 	bne.w	800357a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2319      	movs	r3, #25
 800335e:	2201      	movs	r2, #1
 8003360:	4988      	ldr	r1, [pc, #544]	@ (8003584 <HAL_I2C_IsDeviceReady+0x254>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f994 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
 8003370:	e104      	b.n	800357c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_I2C_IsDeviceReady+0x50>
 800337c:	2302      	movs	r3, #2
 800337e:	e0fd      	b.n	800357c <HAL_I2C_IsDeviceReady+0x24c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b01      	cmp	r3, #1
 8003394:	d007      	beq.n	80033a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2224      	movs	r2, #36	@ 0x24
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a70      	ldr	r2, [pc, #448]	@ (8003588 <HAL_I2C_IsDeviceReady+0x258>)
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f952 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003400:	d103      	bne.n	800340a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0b6      	b.n	800357c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800341c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800341e:	f7fe f877 	bl	8001510 <HAL_GetTick>
 8003422:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003452:	e025      	b.n	80034a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003454:	f7fe f85c 	bl	8001510 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d302      	bcc.n	800346a <HAL_I2C_IsDeviceReady+0x13a>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22a0      	movs	r2, #160	@ 0xa0
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2ba0      	cmp	r3, #160	@ 0xa0
 80034aa:	d005      	beq.n	80034b8 <HAL_I2C_IsDeviceReady+0x188>
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_I2C_IsDeviceReady+0x188>
 80034b2:	7dbb      	ldrb	r3, [r7, #22]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0cd      	beq.n	8003454 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d129      	bne.n	8003522 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2319      	movs	r3, #25
 80034fa:	2201      	movs	r2, #1
 80034fc:	4921      	ldr	r1, [pc, #132]	@ (8003584 <HAL_I2C_IsDeviceReady+0x254>)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8c6 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e036      	b.n	800357c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e02c      	b.n	800357c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003530:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800353a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	490f      	ldr	r1, [pc, #60]	@ (8003584 <HAL_I2C_IsDeviceReady+0x254>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f8a2 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e012      	b.n	800357c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	3301      	adds	r3, #1
 800355a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	f4ff af32 	bcc.w	80033ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00100002 	.word	0x00100002
 8003588:	ffff0000 	.word	0xffff0000

0800358c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	460b      	mov	r3, r1
 800359a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d006      	beq.n	80035b6 <I2C_MasterRequestWrite+0x2a>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <I2C_MasterRequestWrite+0x2a>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035b4:	d108      	bne.n	80035c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e00b      	b.n	80035e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	2b12      	cmp	r3, #18
 80035ce:	d107      	bne.n	80035e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f84f 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003606:	d103      	bne.n	8003610 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e035      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800361c:	d108      	bne.n	8003630 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	e01b      	b.n	8003668 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003630:	897b      	ldrh	r3, [r7, #10]
 8003632:	11db      	asrs	r3, r3, #7
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0306 	and.w	r3, r3, #6
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f063 030f 	orn	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	490e      	ldr	r1, [pc, #56]	@ (8003688 <I2C_MasterRequestWrite+0xfc>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f875 	bl	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e010      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4907      	ldr	r1, [pc, #28]	@ (800368c <I2C_MasterRequestWrite+0x100>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f865 	bl	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010008 	.word	0x00010008
 800368c:	00010002 	.word	0x00010002

08003690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a0:	e025      	b.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036a8:	d021      	beq.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fd ff31 	bl	8001510 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d116      	bne.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e023      	b.n	8003736 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10d      	bne.n	8003714 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	e00c      	b.n	800372e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	429a      	cmp	r2, r3
 8003732:	d0b6      	beq.n	80036a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800374c:	e051      	b.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375c:	d123      	bne.n	80037a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003776:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f043 0204 	orr.w	r2, r3, #4
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e046      	b.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037ac:	d021      	beq.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7fd feaf 	bl	8001510 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d116      	bne.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e020      	b.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10c      	bne.n	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e00b      	b.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	43da      	mvns	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d18d      	bne.n	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003848:	e02d      	b.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f878 	bl	8003940 <I2C_IsAcknowledgeFailed>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e02d      	b.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003860:	d021      	beq.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003862:	f7fd fe55 	bl	8001510 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d116      	bne.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e007      	b.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d1ca      	bne.n	800384a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ca:	e02d      	b.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f837 	bl	8003940 <I2C_IsAcknowledgeFailed>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e02d      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038e2:	d021      	beq.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e4:	f7fd fe14 	bl	8001510 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d1ca      	bne.n	80038cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003956:	d11b      	bne.n	8003990 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003960:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e267      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d075      	beq.n	8003aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	4b88      	ldr	r3, [pc, #544]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ca:	4b85      	ldr	r3, [pc, #532]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d6:	4b82      	ldr	r3, [pc, #520]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b7e      	ldr	r3, [pc, #504]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d157      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e242      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x74>
 8003a06:	4b76      	ldr	r3, [pc, #472]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x98>
 8003a1e:	4b70      	ldr	r3, [pc, #448]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xb0>
 8003a38:	4b69      	ldr	r3, [pc, #420]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a65      	ldr	r2, [pc, #404]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd fd5a 	bl	8001510 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd fd56 	bl	8001510 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e207      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5b      	ldr	r3, [pc, #364]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xc0>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd fd46 	bl	8001510 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd fd42 	bl	8001510 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1f3      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b51      	ldr	r3, [pc, #324]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0xe8>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac2:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ace:	4b44      	ldr	r3, [pc, #272]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b41      	ldr	r3, [pc, #260]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c7      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3b      	ldr	r3, [pc, #236]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4937      	ldr	r1, [pc, #220]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd fcfb 	bl	8001510 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fcf7 	bl	8001510 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a8      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4925      	ldr	r1, [pc, #148]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_RCC_OscConfig+0x244>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fcda 	bl	8001510 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd fcd6 	bl	8001510 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e187      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d036      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fcba 	bl	8001510 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fcb6 	bl	8001510 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e167      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x200>
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_OscConfig+0x248>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fca3 	bl	8001510 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	e00e      	b.n	8003bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bce:	f7fd fc9f 	bl	8001510 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d907      	bls.n	8003bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e150      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470000 	.word	0x42470000
 8003be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ea      	bne.n	8003bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8097 	beq.w	8003d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b81      	ldr	r3, [pc, #516]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c26:	4b7a      	ldr	r3, [pc, #488]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	4b77      	ldr	r3, [pc, #476]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c42:	4b74      	ldr	r3, [pc, #464]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4e:	f7fd fc5f 	bl	8001510 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c56:	f7fd fc5b 	bl	8001510 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e10c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_OscConfig+0x474>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
 8003c7c:	4b64      	ldr	r3, [pc, #400]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c80:	4a63      	ldr	r2, [pc, #396]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c88:	e01c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x30c>
 8003c92:	4b5f      	ldr	r3, [pc, #380]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	4a5e      	ldr	r2, [pc, #376]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x324>
 8003cac:	4b58      	ldr	r3, [pc, #352]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4a57      	ldr	r2, [pc, #348]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb8:	4b55      	ldr	r3, [pc, #340]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	4a54      	ldr	r2, [pc, #336]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 0304 	bic.w	r3, r3, #4
 8003cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fc20 	bl	8001510 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd fc1c 	bl	8001510 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0cb      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b49      	ldr	r3, [pc, #292]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x334>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fc0a 	bl	8001510 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd fc06 	bl	8001510 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0b5      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	4b3e      	ldr	r3, [pc, #248]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d28:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	4a38      	ldr	r2, [pc, #224]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80a1 	beq.w	8003e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d05c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d141      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd fbda 	bl	8001510 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd fbd6 	bl	8001510 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e087      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	491b      	ldr	r1, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fd fbaf 	bl	8001510 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fd fbab 	bl	8001510 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e05c      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x416>
 8003dd4:	e054      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_OscConfig+0x478>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fb98 	bl	8001510 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fb94 	bl	8001510 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e045      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCC_OscConfig+0x470>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x444>
 8003e02:	e03d      	b.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e038      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d028      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d121      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0cc      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b68      	ldr	r3, [pc, #416]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d90c      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a52      	ldr	r2, [pc, #328]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e067      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b37      	ldr	r3, [pc, #220]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4934      	ldr	r1, [pc, #208]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fd fac6 	bl	8001510 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fd fac2 	bl	8001510 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e04f      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d20c      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004002:	4b12      	ldr	r3, [pc, #72]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd f966 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023c00 	.word	0x40023c00
 800404c:	40023800 	.word	0x40023800
 8004050:	08008aa4 	.word	0x08008aa4
 8004054:	20000048 	.word	0x20000048
 8004058:	2000004c 	.word	0x2000004c

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b090      	sub	sp, #64	@ 0x40
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
 8004068:	2300      	movs	r3, #0
 800406a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800406c:	2300      	movs	r3, #0
 800406e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004074:	4b59      	ldr	r3, [pc, #356]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d00d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004080:	2b08      	cmp	r3, #8
 8004082:	f200 80a1 	bhi.w	80041c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x34>
 800408a:	2b04      	cmp	r3, #4
 800408c:	d003      	beq.n	8004096 <HAL_RCC_GetSysClockFreq+0x3a>
 800408e:	e09b      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b53      	ldr	r3, [pc, #332]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004092:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004094:	e09b      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004096:	4b53      	ldr	r3, [pc, #332]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004098:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800409a:	e098      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800409c:	4b4f      	ldr	r3, [pc, #316]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a6:	4b4d      	ldr	r3, [pc, #308]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d028      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b2:	4b4a      	ldr	r3, [pc, #296]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	2200      	movs	r2, #0
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040c4:	2100      	movs	r1, #0
 80040c6:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c8:	fb03 f201 	mul.w	r2, r3, r1
 80040cc:	2300      	movs	r3, #0
 80040ce:	fb00 f303 	mul.w	r3, r0, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	4a43      	ldr	r2, [pc, #268]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040d6:	fba0 1202 	umull	r1, r2, r0, r2
 80040da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040dc:	460a      	mov	r2, r1
 80040de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e2:	4413      	add	r3, r2
 80040e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	2200      	movs	r2, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	61fa      	str	r2, [r7, #28]
 80040ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040f6:	f7fc f873 	bl	80001e0 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4613      	mov	r3, r2
 8004100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004102:	e053      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004104:	4b35      	ldr	r3, [pc, #212]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	2200      	movs	r2, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	617a      	str	r2, [r7, #20]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004116:	f04f 0b00 	mov.w	fp, #0
 800411a:	4652      	mov	r2, sl
 800411c:	465b      	mov	r3, fp
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	ebb2 080a 	subs.w	r8, r2, sl
 8004136:	eb63 090b 	sbc.w	r9, r3, fp
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004146:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800414a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800414e:	ebb2 0408 	subs.w	r4, r2, r8
 8004152:	eb63 0509 	sbc.w	r5, r3, r9
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	00eb      	lsls	r3, r5, #3
 8004160:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004164:	00e2      	lsls	r2, r4, #3
 8004166:	4614      	mov	r4, r2
 8004168:	461d      	mov	r5, r3
 800416a:	eb14 030a 	adds.w	r3, r4, sl
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	eb45 030b 	adc.w	r3, r5, fp
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004182:	4629      	mov	r1, r5
 8004184:	028b      	lsls	r3, r1, #10
 8004186:	4621      	mov	r1, r4
 8004188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800418c:	4621      	mov	r1, r4
 800418e:	028a      	lsls	r2, r1, #10
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004196:	2200      	movs	r2, #0
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a0:	f7fc f81e 	bl	80001e0 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4613      	mov	r3, r2
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x180>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	3301      	adds	r3, #1
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80041bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041c6:	e002      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b05      	ldr	r3, [pc, #20]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3740      	adds	r7, #64	@ 0x40
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	017d7840 	.word	0x017d7840

080041e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000048 	.word	0x20000048

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004204:	f7ff fff0 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0a9b      	lsrs	r3, r3, #10
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4903      	ldr	r1, [pc, #12]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40023800 	.word	0x40023800
 8004224:	08008ab4 	.word	0x08008ab4

08004228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800422c:	f7ff ffdc 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0b5b      	lsrs	r3, r3, #13
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	@ (800424c <HAL_RCC_GetPCLK2Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	08008ab4 	.word	0x08008ab4

08004250 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	220f      	movs	r2, #15
 800425e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004260:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800426c:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004278:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004284:	4b09      	ldr	r3, [pc, #36]	@ (80042ac <HAL_RCC_GetClockConfig+0x5c>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004292:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <HAL_RCC_GetClockConfig+0x60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0207 	and.w	r2, r3, #7
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40023c00 	.word	0x40023c00

080042b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e041      	b.n	800434a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f839 	bl	8004352 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 f9ca 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e044      	b.n	800440a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1e      	ldr	r2, [pc, #120]	@ (8004418 <HAL_TIM_Base_Start_IT+0xb0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043aa:	d013      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1a      	ldr	r2, [pc, #104]	@ (800441c <HAL_TIM_Base_Start_IT+0xb4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a19      	ldr	r2, [pc, #100]	@ (8004420 <HAL_TIM_Base_Start_IT+0xb8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a17      	ldr	r2, [pc, #92]	@ (8004424 <HAL_TIM_Base_Start_IT+0xbc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_TIM_Base_Start_IT+0xc0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d111      	bne.n	80043f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d010      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e007      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f8ee 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8e0 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8f1 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d122      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8c4 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8b6 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8c7 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f89a 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f88c 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f89d 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f870 	bl	8004650 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f862 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f873 	bl	8004664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0201 	mvn.w	r2, #1
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc fa96 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ba:	2b80      	cmp	r3, #128	@ 0x80
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c8:	2b80      	cmp	r3, #128	@ 0x80
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8e2 	bl	80047a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b40      	cmp	r3, #64	@ 0x40
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b40      	cmp	r3, #64	@ 0x40
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f838 	bl	8004678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8ac 	bl	800478c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a34      	ldr	r2, [pc, #208]	@ (8004770 <TIM_Base_SetConfig+0xe4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00f      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a31      	ldr	r2, [pc, #196]	@ (8004774 <TIM_Base_SetConfig+0xe8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a30      	ldr	r2, [pc, #192]	@ (8004778 <TIM_Base_SetConfig+0xec>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a2f      	ldr	r2, [pc, #188]	@ (800477c <TIM_Base_SetConfig+0xf0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a25      	ldr	r2, [pc, #148]	@ (8004770 <TIM_Base_SetConfig+0xe4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01b      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e4:	d017      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <TIM_Base_SetConfig+0xe8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a21      	ldr	r2, [pc, #132]	@ (8004778 <TIM_Base_SetConfig+0xec>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00f      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a20      	ldr	r2, [pc, #128]	@ (800477c <TIM_Base_SetConfig+0xf0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1f      	ldr	r2, [pc, #124]	@ (8004780 <TIM_Base_SetConfig+0xf4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a1e      	ldr	r2, [pc, #120]	@ (8004784 <TIM_Base_SetConfig+0xf8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <TIM_Base_SetConfig+0xfc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a08      	ldr	r2, [pc, #32]	@ (8004770 <TIM_Base_SetConfig+0xe4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d103      	bne.n	800475c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	615a      	str	r2, [r3, #20]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800

0800478c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047c6:	2b84      	cmp	r3, #132	@ 0x84
 80047c8:	d005      	beq.n	80047d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	3303      	adds	r3, #3
 80047d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047e8:	f000 fdf0 	bl	80053cc <vTaskStartScheduler>
  
  return osOK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80047f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f4:	b089      	sub	sp, #36	@ 0x24
 80047f6:	af04      	add	r7, sp, #16
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <osThreadCreate+0x54>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685c      	ldr	r4, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691e      	ldr	r6, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ffc8 	bl	80047b4 <makeFreeRtosPriority>
 8004824:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800482e:	9202      	str	r2, [sp, #8]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	9100      	str	r1, [sp, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4632      	mov	r2, r6
 8004838:	4629      	mov	r1, r5
 800483a:	4620      	mov	r0, r4
 800483c:	f000 fc16 	bl	800506c <xTaskCreateStatic>
 8004840:	4603      	mov	r3, r0
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e01c      	b.n	8004880 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685c      	ldr	r4, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004852:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ffaa 	bl	80047b4 <makeFreeRtosPriority>
 8004860:	4602      	mov	r2, r0
 8004862:	f107 030c 	add.w	r3, r7, #12
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	9200      	str	r2, [sp, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4632      	mov	r2, r6
 800486e:	4629      	mov	r1, r5
 8004870:	4620      	mov	r0, r4
 8004872:	f000 fc5b 	bl	800512c <xTaskCreate>
 8004876:	4603      	mov	r3, r0
 8004878:	2b01      	cmp	r3, #1
 800487a:	d001      	beq.n	8004880 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004880:	68fb      	ldr	r3, [r7, #12]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800488a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f103 0208 	add.w	r2, r3, #8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0208 	add.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f103 0208 	add.w	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004942:	d103      	bne.n	800494c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e00c      	b.n	8004966 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3308      	adds	r3, #8
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e002      	b.n	800495a <vListInsert+0x2e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	d2f6      	bcs.n	8004954 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6892      	ldr	r2, [r2, #8]
 80049b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6852      	ldr	r2, [r2, #4]
 80049be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d103      	bne.n	80049d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a20:	f001 fb32 	bl	8006088 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	441a      	add	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a50:	3b01      	subs	r3, #1
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	22ff      	movs	r2, #255	@ 0xff
 8004a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	22ff      	movs	r2, #255	@ 0xff
 8004a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d114      	bne.n	8004aa0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01a      	beq.n	8004ab4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3310      	adds	r3, #16
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fefc 	bl	8005880 <xTaskRemoveFromEventList>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d012      	beq.n	8004ab4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <xQueueGenericReset+0xd0>)
 8004a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	e009      	b.n	8004ab4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3310      	adds	r3, #16
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fef0 	bl	800488a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3324      	adds	r3, #36	@ 0x24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff feeb 	bl	800488a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ab4:	f001 fb1a 	bl	80060ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ab8:	2301      	movs	r3, #1
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	@ 0x28
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	613b      	str	r3, [r7, #16]
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3348      	adds	r3, #72	@ 0x48
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fbe2 	bl	80062cc <pvPortMalloc>
 8004b08:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d011      	beq.n	8004b34 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3348      	adds	r3, #72	@ 0x48
 8004b18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b22:	79fa      	ldrb	r2, [r7, #7]
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f805 	bl	8004b3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b34:	69bb      	ldr	r3, [r7, #24]
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e002      	b.n	8004b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	69b8      	ldr	r0, [r7, #24]
 8004b70:	f7ff ff40 	bl	80049f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b090      	sub	sp, #64	@ 0x40
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	e7fd      	b.n	8004ba8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <xQueueGenericSendFromISR+0x3e>
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <xQueueGenericSendFromISR+0x42>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <xQueueGenericSendFromISR+0x44>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d103      	bne.n	8004bea <xQueueGenericSendFromISR+0x6e>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <xQueueGenericSendFromISR+0x72>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueGenericSendFromISR+0x74>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	623b      	str	r3, [r7, #32]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c0c:	f001 fb1c 	bl	8006248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c10:	f3ef 8211 	mrs	r2, BASEPRI
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <xQueueGenericSendFromISR+0xc2>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d12f      	bne.n	8004c9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c54:	f000 f912 	bl	8004e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c60:	d112      	bne.n	8004c88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d016      	beq.n	8004c98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	3324      	adds	r3, #36	@ 0x24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fe06 	bl	8005880 <xTaskRemoveFromEventList>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00e      	beq.n	8004c98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e007      	b.n	8004c98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	b25a      	sxtb	r2, r3
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004c9c:	e001      	b.n	8004ca2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3740      	adds	r7, #64	@ 0x40
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	@ 0x30
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <xQueueReceive+0x32>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	623b      	str	r3, [r7, #32]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d103      	bne.n	8004cf8 <xQueueReceive+0x40>
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <xQueueReceive+0x44>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <xQueueReceive+0x46>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <xQueueReceive+0x62>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	61fb      	str	r3, [r7, #28]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d1a:	f000 ff77 	bl	8005c0c <xTaskGetSchedulerState>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <xQueueReceive+0x72>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <xQueueReceive+0x76>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <xQueueReceive+0x78>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <xQueueReceive+0x94>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	61bb      	str	r3, [r7, #24]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d4c:	f001 f99c 	bl	8006088 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01f      	beq.n	8004d9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d60:	f000 f8f6 	bl	8004f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	1e5a      	subs	r2, r3, #1
 8004d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d76:	3310      	adds	r3, #16
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fd81 	bl	8005880 <xTaskRemoveFromEventList>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d84:	4b3c      	ldr	r3, [pc, #240]	@ (8004e78 <xQueueReceive+0x1c0>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d94:	f001 f9aa 	bl	80060ec <vPortExitCritical>
				return pdPASS;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e069      	b.n	8004e70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004da2:	f001 f9a3 	bl	80060ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e062      	b.n	8004e70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d106      	bne.n	8004dbe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fdc7 	bl	8005948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dbe:	f001 f995 	bl	80060ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dc2:	f000 fb6d 	bl	80054a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dc6:	f001 f95f 	bl	8006088 <vPortEnterCritical>
 8004dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dd6:	d103      	bne.n	8004de0 <xQueueReceive+0x128>
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dec:	d103      	bne.n	8004df6 <xQueueReceive+0x13e>
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004df6:	f001 f979 	bl	80060ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dfa:	1d3a      	adds	r2, r7, #4
 8004dfc:	f107 0310 	add.w	r3, r7, #16
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fdb6 	bl	8005974 <xTaskCheckForTimeOut>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d123      	bne.n	8004e56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e10:	f000 f916 	bl	8005040 <prvIsQueueEmpty>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d017      	beq.n	8004e4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	3324      	adds	r3, #36	@ 0x24
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fd06 	bl	8005834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e2a:	f000 f8b7 	bl	8004f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e2e:	f000 fb45 	bl	80054bc <xTaskResumeAll>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d189      	bne.n	8004d4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e38:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <xQueueReceive+0x1c0>)
 8004e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	e780      	b.n	8004d4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e4c:	f000 f8a6 	bl	8004f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e50:	f000 fb34 	bl	80054bc <xTaskResumeAll>
 8004e54:	e77a      	b.n	8004d4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e58:	f000 f8a0 	bl	8004f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e5c:	f000 fb2e 	bl	80054bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e62:	f000 f8ed 	bl	8005040 <prvIsQueueEmpty>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f43f af6f 	beq.w	8004d4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3730      	adds	r7, #48	@ 0x30
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10d      	bne.n	8004eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d14d      	bne.n	8004f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fece 	bl	8005c48 <xTaskPriorityDisinherit>
 8004eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	e043      	b.n	8004f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d119      	bne.n	8004ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6858      	ldr	r0, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	f002 fe90 	bl	8007bec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d32b      	bcc.n	8004f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e026      	b.n	8004f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68d8      	ldr	r0, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	f002 fe76 	bl	8007bec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	425b      	negs	r3, r3
 8004f0a:	441a      	add	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d207      	bcs.n	8004f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	425b      	negs	r3, r3
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d105      	bne.n	8004f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f46:	697b      	ldr	r3, [r7, #20]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	441a      	add	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d303      	bcc.n	8004f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68d9      	ldr	r1, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6838      	ldr	r0, [r7, #0]
 8004f90:	f002 fe2c 	bl	8007bec <memcpy>
	}
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fa4:	f001 f870 	bl	8006088 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb0:	e011      	b.n	8004fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3324      	adds	r3, #36	@ 0x24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fc5e 	bl	8005880 <xTaskRemoveFromEventList>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fca:	f000 fd37 	bl	8005a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dce9      	bgt.n	8004fb2 <prvUnlockQueue+0x16>
 8004fde:	e000      	b.n	8004fe2 <prvUnlockQueue+0x46>
					break;
 8004fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	22ff      	movs	r2, #255	@ 0xff
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fea:	f001 f87f 	bl	80060ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fee:	f001 f84b 	bl	8006088 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ffa:	e011      	b.n	8005020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d012      	beq.n	800502a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3310      	adds	r3, #16
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fc39 	bl	8005880 <xTaskRemoveFromEventList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005014:	f000 fd12 	bl	8005a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005018:	7bbb      	ldrb	r3, [r7, #14]
 800501a:	3b01      	subs	r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005024:	2b00      	cmp	r3, #0
 8005026:	dce9      	bgt.n	8004ffc <prvUnlockQueue+0x60>
 8005028:	e000      	b.n	800502c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800502a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	22ff      	movs	r2, #255	@ 0xff
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005034:	f001 f85a 	bl	80060ec <vPortExitCritical>
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005048:	f001 f81e 	bl	8006088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e001      	b.n	800505e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800505e:	f001 f845 	bl	80060ec <vPortExitCritical>

	return xReturn;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08e      	sub	sp, #56	@ 0x38
 8005070:	af04      	add	r7, sp, #16
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	623b      	str	r3, [r7, #32]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	61fb      	str	r3, [r7, #28]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050b6:	23a0      	movs	r3, #160	@ 0xa0
 80050b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80050be:	d00b      	beq.n	80050d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61bb      	str	r3, [r7, #24]
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01e      	beq.n	800511e <xTaskCreateStatic+0xb2>
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01b      	beq.n	800511e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050f8:	2300      	movs	r3, #0
 80050fa:	9303      	str	r3, [sp, #12]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	9302      	str	r3, [sp, #8]
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f851 	bl	80051b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005116:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005118:	f000 f8ee 	bl	80052f8 <prvAddNewTaskToReadyList>
 800511c:	e001      	b.n	8005122 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005122:	697b      	ldr	r3, [r7, #20]
	}
 8005124:	4618      	mov	r0, r3
 8005126:	3728      	adds	r7, #40	@ 0x28
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	@ 0x30
 8005130:	af04      	add	r7, sp, #16
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f001 f8c3 	bl	80062cc <pvPortMalloc>
 8005146:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00e      	beq.n	800516c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800514e:	20a0      	movs	r0, #160	@ 0xa0
 8005150:	f001 f8bc 	bl	80062cc <pvPortMalloc>
 8005154:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
 8005162:	e005      	b.n	8005170 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005164:	6978      	ldr	r0, [r7, #20]
 8005166:	f001 f97f 	bl	8006468 <vPortFree>
 800516a:	e001      	b.n	8005170 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d017      	beq.n	80051a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	2300      	movs	r3, #0
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	9302      	str	r3, [sp, #8]
 8005188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f80f 	bl	80051b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519a:	69f8      	ldr	r0, [r7, #28]
 800519c:	f000 f8ac 	bl	80052f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051a0:	2301      	movs	r3, #1
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	e002      	b.n	80051ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ac:	69bb      	ldr	r3, [r7, #24]
	}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051d0:	3b01      	subs	r3, #1
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	617b      	str	r3, [r7, #20]
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01f      	beq.n	8005248 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	e012      	b.n	8005234 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	7819      	ldrb	r1, [r3, #0]
 8005216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	3334      	adds	r3, #52	@ 0x34
 800521e:	460a      	mov	r2, r1
 8005220:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d006      	beq.n	800523c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3301      	adds	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d9e9      	bls.n	800520e <prvInitialiseNewTask+0x56>
 800523a:	e000      	b.n	800523e <prvInitialiseNewTask+0x86>
			{
				break;
 800523c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005246:	e003      	b.n	8005250 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	2b06      	cmp	r3, #6
 8005254:	d901      	bls.n	800525a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005256:	2306      	movs	r3, #6
 8005258:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800525e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005264:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	2200      	movs	r2, #0
 800526a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	3304      	adds	r3, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fb2a 	bl	80048ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	3318      	adds	r3, #24
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fb25 	bl	80048ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005284:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	f1c3 0207 	rsb	r2, r3, #7
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005294:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	2200      	movs	r2, #0
 800529a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	334c      	adds	r3, #76	@ 0x4c
 80052aa:	224c      	movs	r2, #76	@ 0x4c
 80052ac:	2100      	movs	r1, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	f002 fc12 	bl	8007ad8 <memset>
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	4a0d      	ldr	r2, [pc, #52]	@ (80052ec <prvInitialiseNewTask+0x134>)
 80052b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	4a0c      	ldr	r2, [pc, #48]	@ (80052f0 <prvInitialiseNewTask+0x138>)
 80052be:	655a      	str	r2, [r3, #84]	@ 0x54
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <prvInitialiseNewTask+0x13c>)
 80052c4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68f9      	ldr	r1, [r7, #12]
 80052ca:	69b8      	ldr	r0, [r7, #24]
 80052cc:	f000 fdaa 	bl	8005e24 <pxPortInitialiseStack>
 80052d0:	4602      	mov	r2, r0
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052e2:	bf00      	nop
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20006714 	.word	0x20006714
 80052f0:	2000677c 	.word	0x2000677c
 80052f4:	200067e4 	.word	0x200067e4

080052f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005300:	f000 fec2 	bl	8006088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005304:	4b2a      	ldr	r3, [pc, #168]	@ (80053b0 <prvAddNewTaskToReadyList+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	4a29      	ldr	r2, [pc, #164]	@ (80053b0 <prvAddNewTaskToReadyList+0xb8>)
 800530c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800530e:	4b29      	ldr	r3, [pc, #164]	@ (80053b4 <prvAddNewTaskToReadyList+0xbc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005316:	4a27      	ldr	r2, [pc, #156]	@ (80053b4 <prvAddNewTaskToReadyList+0xbc>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800531c:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <prvAddNewTaskToReadyList+0xb8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d110      	bne.n	8005346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005324:	f000 fbae 	bl	8005a84 <prvInitialiseTaskLists>
 8005328:	e00d      	b.n	8005346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800532a:	4b23      	ldr	r3, [pc, #140]	@ (80053b8 <prvAddNewTaskToReadyList+0xc0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005332:	4b20      	ldr	r3, [pc, #128]	@ (80053b4 <prvAddNewTaskToReadyList+0xbc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	429a      	cmp	r2, r3
 800533e:	d802      	bhi.n	8005346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005340:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <prvAddNewTaskToReadyList+0xbc>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005346:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <prvAddNewTaskToReadyList+0xc4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	4a1b      	ldr	r2, [pc, #108]	@ (80053bc <prvAddNewTaskToReadyList+0xc4>)
 800534e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	2201      	movs	r2, #1
 8005356:	409a      	lsls	r2, r3
 8005358:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <prvAddNewTaskToReadyList+0xc8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4313      	orrs	r3, r2
 800535e:	4a18      	ldr	r2, [pc, #96]	@ (80053c0 <prvAddNewTaskToReadyList+0xc8>)
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4a15      	ldr	r2, [pc, #84]	@ (80053c4 <prvAddNewTaskToReadyList+0xcc>)
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7ff fab3 	bl	80048e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800537e:	f000 feb5 	bl	80060ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <prvAddNewTaskToReadyList+0xc0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00e      	beq.n	80053a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800538a:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <prvAddNewTaskToReadyList+0xbc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d207      	bcs.n	80053a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005398:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <prvAddNewTaskToReadyList+0xd0>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20002ac0 	.word	0x20002ac0
 80053b4:	200029c0 	.word	0x200029c0
 80053b8:	20002acc 	.word	0x20002acc
 80053bc:	20002adc 	.word	0x20002adc
 80053c0:	20002ac8 	.word	0x20002ac8
 80053c4:	200029c4 	.word	0x200029c4
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	@ 0x28
 80053d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053da:	463a      	mov	r2, r7
 80053dc:	1d39      	adds	r1, r7, #4
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb f874 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053e8:	6839      	ldr	r1, [r7, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	9202      	str	r2, [sp, #8]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	2300      	movs	r3, #0
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	460a      	mov	r2, r1
 80053fa:	4921      	ldr	r1, [pc, #132]	@ (8005480 <vTaskStartScheduler+0xb4>)
 80053fc:	4821      	ldr	r0, [pc, #132]	@ (8005484 <vTaskStartScheduler+0xb8>)
 80053fe:	f7ff fe35 	bl	800506c <xTaskCreateStatic>
 8005402:	4603      	mov	r3, r0
 8005404:	4a20      	ldr	r2, [pc, #128]	@ (8005488 <vTaskStartScheduler+0xbc>)
 8005406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005408:	4b1f      	ldr	r3, [pc, #124]	@ (8005488 <vTaskStartScheduler+0xbc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005410:	2301      	movs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e001      	b.n	800541a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d11b      	bne.n	8005458 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <vTaskStartScheduler+0xc0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	334c      	adds	r3, #76	@ 0x4c
 800543a:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <vTaskStartScheduler+0xc4>)
 800543c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800543e:	4b15      	ldr	r3, [pc, #84]	@ (8005494 <vTaskStartScheduler+0xc8>)
 8005440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005444:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005446:	4b14      	ldr	r3, [pc, #80]	@ (8005498 <vTaskStartScheduler+0xcc>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800544c:	4b13      	ldr	r3, [pc, #76]	@ (800549c <vTaskStartScheduler+0xd0>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005452:	f000 fd75 	bl	8005f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005456:	e00f      	b.n	8005478 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800545e:	d10b      	bne.n	8005478 <vTaskStartScheduler+0xac>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <vTaskStartScheduler+0xa8>
}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	08007d40 	.word	0x08007d40
 8005484:	08005a55 	.word	0x08005a55
 8005488:	20002ae4 	.word	0x20002ae4
 800548c:	200029c0 	.word	0x200029c0
 8005490:	20000058 	.word	0x20000058
 8005494:	20002ae0 	.word	0x20002ae0
 8005498:	20002acc 	.word	0x20002acc
 800549c:	20002ac4 	.word	0x20002ac4

080054a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <vTaskSuspendAll+0x18>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	4a03      	ldr	r2, [pc, #12]	@ (80054b8 <vTaskSuspendAll+0x18>)
 80054ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	20002ae8 	.word	0x20002ae8

080054bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054ca:	4b42      	ldr	r3, [pc, #264]	@ (80055d4 <xTaskResumeAll+0x118>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <xTaskResumeAll+0x2e>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	603b      	str	r3, [r7, #0]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054ea:	f000 fdcd 	bl	8006088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054ee:	4b39      	ldr	r3, [pc, #228]	@ (80055d4 <xTaskResumeAll+0x118>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	4a37      	ldr	r2, [pc, #220]	@ (80055d4 <xTaskResumeAll+0x118>)
 80054f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f8:	4b36      	ldr	r3, [pc, #216]	@ (80055d4 <xTaskResumeAll+0x118>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d161      	bne.n	80055c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005500:	4b35      	ldr	r3, [pc, #212]	@ (80055d8 <xTaskResumeAll+0x11c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05d      	beq.n	80055c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005508:	e02e      	b.n	8005568 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <xTaskResumeAll+0x120>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3318      	adds	r3, #24
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fa41 	bl	800499e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fa3c 	bl	800499e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552a:	2201      	movs	r2, #1
 800552c:	409a      	lsls	r2, r3
 800552e:	4b2c      	ldr	r3, [pc, #176]	@ (80055e0 <xTaskResumeAll+0x124>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	4a2a      	ldr	r2, [pc, #168]	@ (80055e0 <xTaskResumeAll+0x124>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a27      	ldr	r2, [pc, #156]	@ (80055e4 <xTaskResumeAll+0x128>)
 8005546:	441a      	add	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7ff f9c8 	bl	80048e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005558:	4b23      	ldr	r3, [pc, #140]	@ (80055e8 <xTaskResumeAll+0x12c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005562:	4b22      	ldr	r3, [pc, #136]	@ (80055ec <xTaskResumeAll+0x130>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005568:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <xTaskResumeAll+0x120>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1cc      	bne.n	800550a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005576:	f000 fb29 	bl	8005bcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800557a:	4b1d      	ldr	r3, [pc, #116]	@ (80055f0 <xTaskResumeAll+0x134>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d010      	beq.n	80055a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005586:	f000 f837 	bl	80055f8 <xTaskIncrementTick>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005590:	4b16      	ldr	r3, [pc, #88]	@ (80055ec <xTaskResumeAll+0x130>)
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3b01      	subs	r3, #1
 800559a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055a2:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <xTaskResumeAll+0x134>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055a8:	4b10      	ldr	r3, [pc, #64]	@ (80055ec <xTaskResumeAll+0x130>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055b0:	2301      	movs	r3, #1
 80055b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055b4:	4b0f      	ldr	r3, [pc, #60]	@ (80055f4 <xTaskResumeAll+0x138>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055c4:	f000 fd92 	bl	80060ec <vPortExitCritical>

	return xAlreadyYielded;
 80055c8:	68bb      	ldr	r3, [r7, #8]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20002ae8 	.word	0x20002ae8
 80055d8:	20002ac0 	.word	0x20002ac0
 80055dc:	20002a80 	.word	0x20002a80
 80055e0:	20002ac8 	.word	0x20002ac8
 80055e4:	200029c4 	.word	0x200029c4
 80055e8:	200029c0 	.word	0x200029c0
 80055ec:	20002ad4 	.word	0x20002ad4
 80055f0:	20002ad0 	.word	0x20002ad0
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005602:	4b4f      	ldr	r3, [pc, #316]	@ (8005740 <xTaskIncrementTick+0x148>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 808f 	bne.w	800572a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800560c:	4b4d      	ldr	r3, [pc, #308]	@ (8005744 <xTaskIncrementTick+0x14c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005614:	4a4b      	ldr	r2, [pc, #300]	@ (8005744 <xTaskIncrementTick+0x14c>)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d121      	bne.n	8005664 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005620:	4b49      	ldr	r3, [pc, #292]	@ (8005748 <xTaskIncrementTick+0x150>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <xTaskIncrementTick+0x4a>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	603b      	str	r3, [r7, #0]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <xTaskIncrementTick+0x46>
 8005642:	4b41      	ldr	r3, [pc, #260]	@ (8005748 <xTaskIncrementTick+0x150>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	4b40      	ldr	r3, [pc, #256]	@ (800574c <xTaskIncrementTick+0x154>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a3e      	ldr	r2, [pc, #248]	@ (8005748 <xTaskIncrementTick+0x150>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	4a3e      	ldr	r2, [pc, #248]	@ (800574c <xTaskIncrementTick+0x154>)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b3e      	ldr	r3, [pc, #248]	@ (8005750 <xTaskIncrementTick+0x158>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	4a3c      	ldr	r2, [pc, #240]	@ (8005750 <xTaskIncrementTick+0x158>)
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	f000 fab4 	bl	8005bcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005664:	4b3b      	ldr	r3, [pc, #236]	@ (8005754 <xTaskIncrementTick+0x15c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d348      	bcc.n	8005700 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800566e:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <xTaskIncrementTick+0x150>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005678:	4b36      	ldr	r3, [pc, #216]	@ (8005754 <xTaskIncrementTick+0x15c>)
 800567a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800567e:	601a      	str	r2, [r3, #0]
					break;
 8005680:	e03e      	b.n	8005700 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005682:	4b31      	ldr	r3, [pc, #196]	@ (8005748 <xTaskIncrementTick+0x150>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d203      	bcs.n	80056a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800569a:	4a2e      	ldr	r2, [pc, #184]	@ (8005754 <xTaskIncrementTick+0x15c>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056a0:	e02e      	b.n	8005700 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3304      	adds	r3, #4
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff f979 	bl	800499e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	3318      	adds	r3, #24
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff f970 	bl	800499e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	2201      	movs	r2, #1
 80056c4:	409a      	lsls	r2, r3
 80056c6:	4b24      	ldr	r3, [pc, #144]	@ (8005758 <xTaskIncrementTick+0x160>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	4a22      	ldr	r2, [pc, #136]	@ (8005758 <xTaskIncrementTick+0x160>)
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4a1f      	ldr	r2, [pc, #124]	@ (800575c <xTaskIncrementTick+0x164>)
 80056de:	441a      	add	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	3304      	adds	r3, #4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4610      	mov	r0, r2
 80056e8:	f7ff f8fc 	bl	80048e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005760 <xTaskIncrementTick+0x168>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d3b9      	bcc.n	800566e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056fe:	e7b6      	b.n	800566e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005700:	4b17      	ldr	r3, [pc, #92]	@ (8005760 <xTaskIncrementTick+0x168>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4915      	ldr	r1, [pc, #84]	@ (800575c <xTaskIncrementTick+0x164>)
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d901      	bls.n	800571c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800571c:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <xTaskIncrementTick+0x16c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e004      	b.n	8005734 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800572a:	4b0f      	ldr	r3, [pc, #60]	@ (8005768 <xTaskIncrementTick+0x170>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	4a0d      	ldr	r2, [pc, #52]	@ (8005768 <xTaskIncrementTick+0x170>)
 8005732:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005734:	697b      	ldr	r3, [r7, #20]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20002ae8 	.word	0x20002ae8
 8005744:	20002ac4 	.word	0x20002ac4
 8005748:	20002a78 	.word	0x20002a78
 800574c:	20002a7c 	.word	0x20002a7c
 8005750:	20002ad8 	.word	0x20002ad8
 8005754:	20002ae0 	.word	0x20002ae0
 8005758:	20002ac8 	.word	0x20002ac8
 800575c:	200029c4 	.word	0x200029c4
 8005760:	200029c0 	.word	0x200029c0
 8005764:	20002ad4 	.word	0x20002ad4
 8005768:	20002ad0 	.word	0x20002ad0

0800576c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005772:	4b2a      	ldr	r3, [pc, #168]	@ (800581c <vTaskSwitchContext+0xb0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800577a:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <vTaskSwitchContext+0xb4>)
 800577c:	2201      	movs	r2, #1
 800577e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005780:	e045      	b.n	800580e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005782:	4b27      	ldr	r3, [pc, #156]	@ (8005820 <vTaskSwitchContext+0xb4>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	4b26      	ldr	r3, [pc, #152]	@ (8005824 <vTaskSwitchContext+0xb8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	f1c3 031f 	rsb	r3, r3, #31
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	4922      	ldr	r1, [pc, #136]	@ (8005828 <vTaskSwitchContext+0xbc>)
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <vTaskSwitchContext+0x5e>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	607b      	str	r3, [r7, #4]
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop
 80057c8:	e7fd      	b.n	80057c6 <vTaskSwitchContext+0x5a>
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4a14      	ldr	r2, [pc, #80]	@ (8005828 <vTaskSwitchContext+0xbc>)
 80057d6:	4413      	add	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	605a      	str	r2, [r3, #4]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3308      	adds	r3, #8
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d104      	bne.n	80057fa <vTaskSwitchContext+0x8e>
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <vTaskSwitchContext+0xc0>)
 8005802:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005804:	4b09      	ldr	r3, [pc, #36]	@ (800582c <vTaskSwitchContext+0xc0>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	334c      	adds	r3, #76	@ 0x4c
 800580a:	4a09      	ldr	r2, [pc, #36]	@ (8005830 <vTaskSwitchContext+0xc4>)
 800580c:	6013      	str	r3, [r2, #0]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20002ae8 	.word	0x20002ae8
 8005820:	20002ad4 	.word	0x20002ad4
 8005824:	20002ac8 	.word	0x20002ac8
 8005828:	200029c4 	.word	0x200029c4
 800582c:	200029c0 	.word	0x200029c0
 8005830:	20000058 	.word	0x20000058

08005834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10b      	bne.n	800585c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800585c:	4b07      	ldr	r3, [pc, #28]	@ (800587c <vTaskPlaceOnEventList+0x48>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3318      	adds	r3, #24
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff f861 	bl	800492c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800586a:	2101      	movs	r1, #1
 800586c:	6838      	ldr	r0, [r7, #0]
 800586e:	f000 fa73 	bl	8005d58 <prvAddCurrentTaskToDelayedList>
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200029c0 	.word	0x200029c0

08005880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	60fb      	str	r3, [r7, #12]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	3318      	adds	r3, #24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff f873 	bl	800499e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <xTaskRemoveFromEventList+0xb0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11c      	bne.n	80058fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff f86a 	bl	800499e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	2201      	movs	r2, #1
 80058d0:	409a      	lsls	r2, r3
 80058d2:	4b18      	ldr	r3, [pc, #96]	@ (8005934 <xTaskRemoveFromEventList+0xb4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	4a16      	ldr	r2, [pc, #88]	@ (8005934 <xTaskRemoveFromEventList+0xb4>)
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <xTaskRemoveFromEventList+0xb8>)
 80058ea:	441a      	add	r2, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7fe fff6 	bl	80048e4 <vListInsertEnd>
 80058f8:	e005      	b.n	8005906 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	3318      	adds	r3, #24
 80058fe:	4619      	mov	r1, r3
 8005900:	480e      	ldr	r0, [pc, #56]	@ (800593c <xTaskRemoveFromEventList+0xbc>)
 8005902:	f7fe ffef 	bl	80048e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <xTaskRemoveFromEventList+0xc0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	429a      	cmp	r2, r3
 8005912:	d905      	bls.n	8005920 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005918:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <xTaskRemoveFromEventList+0xc4>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e001      	b.n	8005924 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005924:	697b      	ldr	r3, [r7, #20]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20002ae8 	.word	0x20002ae8
 8005934:	20002ac8 	.word	0x20002ac8
 8005938:	200029c4 	.word	0x200029c4
 800593c:	20002a80 	.word	0x20002a80
 8005940:	200029c0 	.word	0x200029c0
 8005944:	20002ad4 	.word	0x20002ad4

08005948 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005950:	4b06      	ldr	r3, [pc, #24]	@ (800596c <vTaskInternalSetTimeOutState+0x24>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <vTaskInternalSetTimeOutState+0x28>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20002ad8 	.word	0x20002ad8
 8005970:	20002ac4 	.word	0x20002ac4

08005974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	613b      	str	r3, [r7, #16]
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60fb      	str	r3, [r7, #12]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059ba:	f000 fb65 	bl	8006088 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059be:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <xTaskCheckForTimeOut+0xc0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059d6:	d102      	bne.n	80059de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	e023      	b.n	8005a26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b15      	ldr	r3, [pc, #84]	@ (8005a38 <xTaskCheckForTimeOut+0xc4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d007      	beq.n	80059fa <xTaskCheckForTimeOut+0x86>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	e015      	b.n	8005a26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d20b      	bcs.n	8005a1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff99 	bl	8005948 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	e004      	b.n	8005a26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a26:	f000 fb61 	bl	80060ec <vPortExitCritical>

	return xReturn;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20002ac4 	.word	0x20002ac4
 8005a38:	20002ad8 	.word	0x20002ad8

08005a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a40:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <vTaskMissedYield+0x14>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20002ad4 	.word	0x20002ad4

08005a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a5c:	f000 f852 	bl	8005b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a60:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <prvIdleTask+0x28>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d9f9      	bls.n	8005a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a68:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <prvIdleTask+0x2c>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a78:	e7f0      	b.n	8005a5c <prvIdleTask+0x8>
 8005a7a:	bf00      	nop
 8005a7c:	200029c4 	.word	0x200029c4
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	e00c      	b.n	8005aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ae4 <prvInitialiseTaskLists+0x60>)
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fef3 	bl	800488a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b06      	cmp	r3, #6
 8005aae:	d9ef      	bls.n	8005a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ab0:	480d      	ldr	r0, [pc, #52]	@ (8005ae8 <prvInitialiseTaskLists+0x64>)
 8005ab2:	f7fe feea 	bl	800488a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ab6:	480d      	ldr	r0, [pc, #52]	@ (8005aec <prvInitialiseTaskLists+0x68>)
 8005ab8:	f7fe fee7 	bl	800488a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005abc:	480c      	ldr	r0, [pc, #48]	@ (8005af0 <prvInitialiseTaskLists+0x6c>)
 8005abe:	f7fe fee4 	bl	800488a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ac2:	480c      	ldr	r0, [pc, #48]	@ (8005af4 <prvInitialiseTaskLists+0x70>)
 8005ac4:	f7fe fee1 	bl	800488a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ac8:	480b      	ldr	r0, [pc, #44]	@ (8005af8 <prvInitialiseTaskLists+0x74>)
 8005aca:	f7fe fede 	bl	800488a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ace:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <prvInitialiseTaskLists+0x78>)
 8005ad0:	4a05      	ldr	r2, [pc, #20]	@ (8005ae8 <prvInitialiseTaskLists+0x64>)
 8005ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <prvInitialiseTaskLists+0x7c>)
 8005ad6:	4a05      	ldr	r2, [pc, #20]	@ (8005aec <prvInitialiseTaskLists+0x68>)
 8005ad8:	601a      	str	r2, [r3, #0]
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200029c4 	.word	0x200029c4
 8005ae8:	20002a50 	.word	0x20002a50
 8005aec:	20002a64 	.word	0x20002a64
 8005af0:	20002a80 	.word	0x20002a80
 8005af4:	20002a94 	.word	0x20002a94
 8005af8:	20002aac 	.word	0x20002aac
 8005afc:	20002a78 	.word	0x20002a78
 8005b00:	20002a7c 	.word	0x20002a7c

08005b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b0a:	e019      	b.n	8005b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b0c:	f000 fabc 	bl	8006088 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	4b10      	ldr	r3, [pc, #64]	@ (8005b54 <prvCheckTasksWaitingTermination+0x50>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe ff3e 	bl	800499e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b22:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <prvCheckTasksWaitingTermination+0x54>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4a0b      	ldr	r2, [pc, #44]	@ (8005b58 <prvCheckTasksWaitingTermination+0x54>)
 8005b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <prvCheckTasksWaitingTermination+0x58>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4a0a      	ldr	r2, [pc, #40]	@ (8005b5c <prvCheckTasksWaitingTermination+0x58>)
 8005b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b36:	f000 fad9 	bl	80060ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f810 	bl	8005b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <prvCheckTasksWaitingTermination+0x58>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e1      	bne.n	8005b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20002a94 	.word	0x20002a94
 8005b58:	20002ac0 	.word	0x20002ac0
 8005b5c:	20002aa8 	.word	0x20002aa8

08005b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	334c      	adds	r3, #76	@ 0x4c
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 ffbb 	bl	8007ae8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fc71 	bl	8006468 <vPortFree>
				vPortFree( pxTCB );
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fc6e 	bl	8006468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b8c:	e019      	b.n	8005bc2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d103      	bne.n	8005ba0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fc65 	bl	8006468 <vPortFree>
	}
 8005b9e:	e010      	b.n	8005bc2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d00b      	beq.n	8005bc2 <prvDeleteTCB+0x62>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60fb      	str	r3, [r7, #12]
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	e7fd      	b.n	8005bbe <prvDeleteTCB+0x5e>
	}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <prvResetNextTaskUnblockTime+0x38>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <prvResetNextTaskUnblockTime+0x3c>)
 8005bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005be2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005be4:	e008      	b.n	8005bf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <prvResetNextTaskUnblockTime+0x38>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	4a04      	ldr	r2, [pc, #16]	@ (8005c08 <prvResetNextTaskUnblockTime+0x3c>)
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	20002a78 	.word	0x20002a78
 8005c08:	20002ae0 	.word	0x20002ae0

08005c0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c12:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <xTaskGetSchedulerState+0x34>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	e008      	b.n	8005c32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c20:	4b08      	ldr	r3, [pc, #32]	@ (8005c44 <xTaskGetSchedulerState+0x38>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d102      	bne.n	8005c2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	607b      	str	r3, [r7, #4]
 8005c2c:	e001      	b.n	8005c32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c32:	687b      	ldr	r3, [r7, #4]
	}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20002acc 	.word	0x20002acc
 8005c44:	20002ae8 	.word	0x20002ae8

08005c48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d070      	beq.n	8005d40 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d4c <xTaskPriorityDisinherit+0x104>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d00b      	beq.n	8005c80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	60fb      	str	r3, [r7, #12]
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	e7fd      	b.n	8005c7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60bb      	str	r3, [r7, #8]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca4:	1e5a      	subs	r2, r3, #1
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d044      	beq.n	8005d40 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d140      	bne.n	8005d40 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fe6b 	bl	800499e <uxListRemove>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d115      	bne.n	8005cfa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd2:	491f      	ldr	r1, [pc, #124]	@ (8005d50 <xTaskPriorityDisinherit+0x108>)
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xTaskPriorityDisinherit+0xb2>
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	2201      	movs	r2, #1
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43da      	mvns	r2, r3
 8005cf0:	4b18      	ldr	r3, [pc, #96]	@ (8005d54 <xTaskPriorityDisinherit+0x10c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <xTaskPriorityDisinherit+0x10c>)
 8005cf8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	f1c3 0207 	rsb	r2, r3, #7
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	2201      	movs	r2, #1
 8005d14:	409a      	lsls	r2, r3
 8005d16:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <xTaskPriorityDisinherit+0x10c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d54 <xTaskPriorityDisinherit+0x10c>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4a08      	ldr	r2, [pc, #32]	@ (8005d50 <xTaskPriorityDisinherit+0x108>)
 8005d2e:	441a      	add	r2, r3
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f7fe fdd4 	bl	80048e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d40:	697b      	ldr	r3, [r7, #20]
	}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200029c0 	.word	0x200029c0
 8005d50:	200029c4 	.word	0x200029c4
 8005d54:	20002ac8 	.word	0x20002ac8

08005d58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d62:	4b29      	ldr	r3, [pc, #164]	@ (8005e08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d68:	4b28      	ldr	r3, [pc, #160]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe fe15 	bl	800499e <uxListRemove>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d7a:	4b24      	ldr	r3, [pc, #144]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	2201      	movs	r2, #1
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43da      	mvns	r2, r3
 8005d88:	4b21      	ldr	r3, [pc, #132]	@ (8005e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	4a20      	ldr	r2, [pc, #128]	@ (8005e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d98:	d10a      	bne.n	8005db0 <prvAddCurrentTaskToDelayedList+0x58>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	481a      	ldr	r0, [pc, #104]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005daa:	f7fe fd9b 	bl	80048e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dae:	e026      	b.n	8005dfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005db8:	4b14      	ldr	r3, [pc, #80]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d209      	bcs.n	8005ddc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc8:	4b13      	ldr	r3, [pc, #76]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f7fe fda9 	bl	800492c <vListInsert>
}
 8005dda:	e010      	b.n	8005dfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7fe fd9f 	bl	800492c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dee:	4b0c      	ldr	r3, [pc, #48]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d202      	bcs.n	8005dfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005df8:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6013      	str	r3, [r2, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20002ac4 	.word	0x20002ac4
 8005e0c:	200029c0 	.word	0x200029c0
 8005e10:	20002ac8 	.word	0x20002ac8
 8005e14:	20002aac 	.word	0x20002aac
 8005e18:	20002a7c 	.word	0x20002a7c
 8005e1c:	20002a78 	.word	0x20002a78
 8005e20:	20002ae0 	.word	0x20002ae0

08005e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3b04      	subs	r3, #4
 8005e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3b04      	subs	r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 0201 	bic.w	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3b04      	subs	r3, #4
 8005e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e54:	4a0c      	ldr	r2, [pc, #48]	@ (8005e88 <pxPortInitialiseStack+0x64>)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b14      	subs	r3, #20
 8005e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b04      	subs	r3, #4
 8005e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f06f 0202 	mvn.w	r2, #2
 8005e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3b20      	subs	r3, #32
 8005e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	08005e8d 	.word	0x08005e8d

08005e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e96:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <prvTaskExitError+0x58>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9e:	d00b      	beq.n	8005eb8 <prvTaskExitError+0x2c>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	60fb      	str	r3, [r7, #12]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <prvTaskExitError+0x28>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60bb      	str	r3, [r7, #8]
}
 8005eca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ecc:	bf00      	nop
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0fc      	beq.n	8005ece <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000054 	.word	0x20000054
	...

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	@ (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	200029c0 	.word	0x200029c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f18:	4808      	ldr	r0, [pc, #32]	@ (8005f3c <prvPortStartFirstTask+0x24>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8814 	msr	CONTROL, r0
 8005f2a:	b662      	cpsie	i
 8005f2c:	b661      	cpsie	f
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	df00      	svc	0
 8005f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f3a:	bf00      	nop
 8005f3c:	e000ed08 	.word	0xe000ed08

08005f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f46:	4b47      	ldr	r3, [pc, #284]	@ (8006064 <xPortStartScheduler+0x124>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a47      	ldr	r2, [pc, #284]	@ (8006068 <xPortStartScheduler+0x128>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10b      	bne.n	8005f68 <xPortStartScheduler+0x28>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f68:	4b3e      	ldr	r3, [pc, #248]	@ (8006064 <xPortStartScheduler+0x124>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800606c <xPortStartScheduler+0x12c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d10b      	bne.n	8005f8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60fb      	str	r3, [r7, #12]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f8a:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <xPortStartScheduler+0x130>)
 8005f8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	22ff      	movs	r2, #255	@ 0xff
 8005f9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	4b31      	ldr	r3, [pc, #196]	@ (8006074 <xPortStartScheduler+0x134>)
 8005fb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fb2:	4b31      	ldr	r3, [pc, #196]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fb4:	2207      	movs	r2, #7
 8005fb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fb8:	e009      	b.n	8005fce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005fba:	4b2f      	ldr	r3, [pc, #188]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd6:	2b80      	cmp	r3, #128	@ 0x80
 8005fd8:	d0ef      	beq.n	8005fba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fda:	4b27      	ldr	r3, [pc, #156]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1c3 0307 	rsb	r3, r3, #7
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d00b      	beq.n	8005ffe <xPortStartScheduler+0xbe>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60bb      	str	r3, [r7, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	e7fd      	b.n	8005ffa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8006078 <xPortStartScheduler+0x138>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	4a1c      	ldr	r2, [pc, #112]	@ (8006078 <xPortStartScheduler+0x138>)
 8006006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006008:	4b1b      	ldr	r3, [pc, #108]	@ (8006078 <xPortStartScheduler+0x138>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006010:	4a19      	ldr	r2, [pc, #100]	@ (8006078 <xPortStartScheduler+0x138>)
 8006012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <xPortStartScheduler+0x13c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a16      	ldr	r2, [pc, #88]	@ (800607c <xPortStartScheduler+0x13c>)
 8006022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006028:	4b14      	ldr	r3, [pc, #80]	@ (800607c <xPortStartScheduler+0x13c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a13      	ldr	r2, [pc, #76]	@ (800607c <xPortStartScheduler+0x13c>)
 800602e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006034:	f000 f8da 	bl	80061ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006038:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <xPortStartScheduler+0x140>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800603e:	f000 f8f9 	bl	8006234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006042:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <xPortStartScheduler+0x144>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a0f      	ldr	r2, [pc, #60]	@ (8006084 <xPortStartScheduler+0x144>)
 8006048:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800604c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800604e:	f7ff ff63 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006052:	f7ff fb8b 	bl	800576c <vTaskSwitchContext>
	prvTaskExitError();
 8006056:	f7ff ff19 	bl	8005e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	e000ed00 	.word	0xe000ed00
 8006068:	410fc271 	.word	0x410fc271
 800606c:	410fc270 	.word	0x410fc270
 8006070:	e000e400 	.word	0xe000e400
 8006074:	20002aec 	.word	0x20002aec
 8006078:	20002af0 	.word	0x20002af0
 800607c:	e000ed20 	.word	0xe000ed20
 8006080:	20000054 	.word	0x20000054
 8006084:	e000ef34 	.word	0xe000ef34

08006088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	607b      	str	r3, [r7, #4]
}
 80060a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060a2:	4b10      	ldr	r3, [pc, #64]	@ (80060e4 <vPortEnterCritical+0x5c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	4a0e      	ldr	r2, [pc, #56]	@ (80060e4 <vPortEnterCritical+0x5c>)
 80060aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060ac:	4b0d      	ldr	r3, [pc, #52]	@ (80060e4 <vPortEnterCritical+0x5c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d110      	bne.n	80060d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060b4:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <vPortEnterCritical+0x60>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	603b      	str	r3, [r7, #0]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <vPortEnterCritical+0x4a>
	}
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000054 	.word	0x20000054
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060f2:	4b12      	ldr	r3, [pc, #72]	@ (800613c <vPortExitCritical+0x50>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <vPortExitCritical+0x26>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	607b      	str	r3, [r7, #4]
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	e7fd      	b.n	800610e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006112:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <vPortExitCritical+0x50>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	4a08      	ldr	r2, [pc, #32]	@ (800613c <vPortExitCritical+0x50>)
 800611a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800611c:	4b07      	ldr	r3, [pc, #28]	@ (800613c <vPortExitCritical+0x50>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <vPortExitCritical+0x44>
 8006124:	2300      	movs	r3, #0
 8006126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	f383 8811 	msr	BASEPRI, r3
}
 800612e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	20000054 	.word	0x20000054

08006140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006140:	f3ef 8009 	mrs	r0, PSP
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	4b15      	ldr	r3, [pc, #84]	@ (80061a0 <pxCurrentTCBConst>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f01e 0f10 	tst.w	lr, #16
 8006150:	bf08      	it	eq
 8006152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	6010      	str	r0, [r2, #0]
 800615c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006164:	f380 8811 	msr	BASEPRI, r0
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f7ff fafc 	bl	800576c <vTaskSwitchContext>
 8006174:	f04f 0000 	mov.w	r0, #0
 8006178:	f380 8811 	msr	BASEPRI, r0
 800617c:	bc09      	pop	{r0, r3}
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f01e 0f10 	tst.w	lr, #16
 800618a:	bf08      	it	eq
 800618c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006190:	f380 8809 	msr	PSP, r0
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst>:
 80061a0:	200029c0 	.word	0x200029c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061c2:	f7ff fa19 	bl	80055f8 <xTaskIncrementTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <SysTick_Handler+0x40>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	2300      	movs	r3, #0
 80061d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <vPortSetupTimerInterrupt+0x34>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <vPortSetupTimerInterrupt+0x38>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006228 <vPortSetupTimerInterrupt+0x3c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0a      	ldr	r2, [pc, #40]	@ (800622c <vPortSetupTimerInterrupt+0x40>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	4a09      	ldr	r2, [pc, #36]	@ (8006230 <vPortSetupTimerInterrupt+0x44>)
 800620a:	3b01      	subs	r3, #1
 800620c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800620e:	4b04      	ldr	r3, [pc, #16]	@ (8006220 <vPortSetupTimerInterrupt+0x34>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	e000e010 	.word	0xe000e010
 8006224:	e000e018 	.word	0xe000e018
 8006228:	20000048 	.word	0x20000048
 800622c:	10624dd3 	.word	0x10624dd3
 8006230:	e000e014 	.word	0xe000e014

08006234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006234:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006244 <vPortEnableVFP+0x10>
 8006238:	6801      	ldr	r1, [r0, #0]
 800623a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800623e:	6001      	str	r1, [r0, #0]
 8006240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006242:	bf00      	nop
 8006244:	e000ed88 	.word	0xe000ed88

08006248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800624e:	f3ef 8305 	mrs	r3, IPSR
 8006252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d915      	bls.n	8006286 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800625a:	4a18      	ldr	r2, [pc, #96]	@ (80062bc <vPortValidateInterruptPriority+0x74>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006264:	4b16      	ldr	r3, [pc, #88]	@ (80062c0 <vPortValidateInterruptPriority+0x78>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	7afa      	ldrb	r2, [r7, #11]
 800626a:	429a      	cmp	r2, r3
 800626c:	d20b      	bcs.n	8006286 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	607b      	str	r3, [r7, #4]
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	e7fd      	b.n	8006282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006286:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <vPortValidateInterruptPriority+0x7c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800628e:	4b0e      	ldr	r3, [pc, #56]	@ (80062c8 <vPortValidateInterruptPriority+0x80>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d90b      	bls.n	80062ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	603b      	str	r3, [r7, #0]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <vPortValidateInterruptPriority+0x62>
	}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	e000e3f0 	.word	0xe000e3f0
 80062c0:	20002aec 	.word	0x20002aec
 80062c4:	e000ed0c 	.word	0xe000ed0c
 80062c8:	20002af0 	.word	0x20002af0

080062cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	@ 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062d8:	f7ff f8e2 	bl	80054a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006450 <pvPortMalloc+0x184>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062e4:	f000 f924 	bl	8006530 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006454 <pvPortMalloc+0x188>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 8095 	bne.w	8006420 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01e      	beq.n	800633a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80062fc:	2208      	movs	r2, #8
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d015      	beq.n	800633a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f023 0307 	bic.w	r3, r3, #7
 8006314:	3308      	adds	r3, #8
 8006316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <pvPortMalloc+0x6e>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	617b      	str	r3, [r7, #20]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d06f      	beq.n	8006420 <pvPortMalloc+0x154>
 8006340:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <pvPortMalloc+0x18c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d86a      	bhi.n	8006420 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800634a:	4b44      	ldr	r3, [pc, #272]	@ (800645c <pvPortMalloc+0x190>)
 800634c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800634e:	4b43      	ldr	r3, [pc, #268]	@ (800645c <pvPortMalloc+0x190>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006354:	e004      	b.n	8006360 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	429a      	cmp	r2, r3
 8006368:	d903      	bls.n	8006372 <pvPortMalloc+0xa6>
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f1      	bne.n	8006356 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006372:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <pvPortMalloc+0x184>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006378:	429a      	cmp	r2, r3
 800637a:	d051      	beq.n	8006420 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2208      	movs	r2, #8
 8006382:	4413      	add	r3, r2
 8006384:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1ad2      	subs	r2, r2, r3
 8006396:	2308      	movs	r3, #8
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	429a      	cmp	r2, r3
 800639c:	d920      	bls.n	80063e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800639e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4413      	add	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <pvPortMalloc+0xfc>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	e7fd      	b.n	80063c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	1ad2      	subs	r2, r2, r3
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063da:	69b8      	ldr	r0, [r7, #24]
 80063dc:	f000 f90a 	bl	80065f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006458 <pvPortMalloc+0x18c>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006458 <pvPortMalloc+0x18c>)
 80063ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <pvPortMalloc+0x18c>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006460 <pvPortMalloc+0x194>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d203      	bcs.n	8006402 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063fa:	4b17      	ldr	r3, [pc, #92]	@ (8006458 <pvPortMalloc+0x18c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a18      	ldr	r2, [pc, #96]	@ (8006460 <pvPortMalloc+0x194>)
 8006400:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	4b13      	ldr	r3, [pc, #76]	@ (8006454 <pvPortMalloc+0x188>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	431a      	orrs	r2, r3
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006416:	4b13      	ldr	r3, [pc, #76]	@ (8006464 <pvPortMalloc+0x198>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	4a11      	ldr	r2, [pc, #68]	@ (8006464 <pvPortMalloc+0x198>)
 800641e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006420:	f7ff f84c 	bl	80054bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <pvPortMalloc+0x17a>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60fb      	str	r3, [r7, #12]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <pvPortMalloc+0x176>
	return pvReturn;
 8006446:	69fb      	ldr	r3, [r7, #28]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3728      	adds	r7, #40	@ 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200066fc 	.word	0x200066fc
 8006454:	20006710 	.word	0x20006710
 8006458:	20006700 	.word	0x20006700
 800645c:	200066f4 	.word	0x200066f4
 8006460:	20006704 	.word	0x20006704
 8006464:	20006708 	.word	0x20006708

08006468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d04f      	beq.n	800651a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800647a:	2308      	movs	r3, #8
 800647c:	425b      	negs	r3, r3
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4413      	add	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	4b25      	ldr	r3, [pc, #148]	@ (8006524 <vPortFree+0xbc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <vPortFree+0x46>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60fb      	str	r3, [r7, #12]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <vPortFree+0x66>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	60bb      	str	r3, [r7, #8]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	4b14      	ldr	r3, [pc, #80]	@ (8006524 <vPortFree+0xbc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01e      	beq.n	800651a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11a      	bne.n	800651a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006524 <vPortFree+0xbc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	401a      	ands	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064f4:	f7fe ffd4 	bl	80054a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006528 <vPortFree+0xc0>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4413      	add	r3, r2
 8006502:	4a09      	ldr	r2, [pc, #36]	@ (8006528 <vPortFree+0xc0>)
 8006504:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006506:	6938      	ldr	r0, [r7, #16]
 8006508:	f000 f874 	bl	80065f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800650c:	4b07      	ldr	r3, [pc, #28]	@ (800652c <vPortFree+0xc4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	4a06      	ldr	r2, [pc, #24]	@ (800652c <vPortFree+0xc4>)
 8006514:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006516:	f7fe ffd1 	bl	80054bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800651a:	bf00      	nop
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20006710 	.word	0x20006710
 8006528:	20006700 	.word	0x20006700
 800652c:	2000670c 	.word	0x2000670c

08006530 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006536:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800653a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800653c:	4b27      	ldr	r3, [pc, #156]	@ (80065dc <prvHeapInit+0xac>)
 800653e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00c      	beq.n	8006564 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3307      	adds	r3, #7
 800654e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0307 	bic.w	r3, r3, #7
 8006556:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	4a1f      	ldr	r2, [pc, #124]	@ (80065dc <prvHeapInit+0xac>)
 8006560:	4413      	add	r3, r2
 8006562:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006568:	4a1d      	ldr	r2, [pc, #116]	@ (80065e0 <prvHeapInit+0xb0>)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800656e:	4b1c      	ldr	r3, [pc, #112]	@ (80065e0 <prvHeapInit+0xb0>)
 8006570:	2200      	movs	r2, #0
 8006572:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4413      	add	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800657c:	2208      	movs	r2, #8
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0307 	bic.w	r3, r3, #7
 800658a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4a15      	ldr	r2, [pc, #84]	@ (80065e4 <prvHeapInit+0xb4>)
 8006590:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006592:	4b14      	ldr	r3, [pc, #80]	@ (80065e4 <prvHeapInit+0xb4>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <prvHeapInit+0xb4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	1ad2      	subs	r2, r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065b0:	4b0c      	ldr	r3, [pc, #48]	@ (80065e4 <prvHeapInit+0xb4>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a0a      	ldr	r2, [pc, #40]	@ (80065e8 <prvHeapInit+0xb8>)
 80065be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4a09      	ldr	r2, [pc, #36]	@ (80065ec <prvHeapInit+0xbc>)
 80065c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065c8:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <prvHeapInit+0xc0>)
 80065ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80065ce:	601a      	str	r2, [r3, #0]
}
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	20002af4 	.word	0x20002af4
 80065e0:	200066f4 	.word	0x200066f4
 80065e4:	200066fc 	.word	0x200066fc
 80065e8:	20006704 	.word	0x20006704
 80065ec:	20006700 	.word	0x20006700
 80065f0:	20006710 	.word	0x20006710

080065f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065fc:	4b28      	ldr	r3, [pc, #160]	@ (80066a0 <prvInsertBlockIntoFreeList+0xac>)
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	e002      	b.n	8006608 <prvInsertBlockIntoFreeList+0x14>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	429a      	cmp	r2, r3
 8006610:	d8f7      	bhi.n	8006602 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4413      	add	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d108      	bne.n	8006636 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	441a      	add	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	441a      	add	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d118      	bne.n	800667c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b15      	ldr	r3, [pc, #84]	@ (80066a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d00d      	beq.n	8006672 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	441a      	add	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e008      	b.n	8006684 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006672:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e003      	b.n	8006684 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d002      	beq.n	8006692 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	200066f4 	.word	0x200066f4
 80066a4:	200066fc 	.word	0x200066fc

080066a8 <arm_mean_f32>:
 80066a8:	b430      	push	{r4, r5}
 80066aa:	088d      	lsrs	r5, r1, #2
 80066ac:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8006720 <arm_mean_f32+0x78>
 80066b0:	d018      	beq.n	80066e4 <arm_mean_f32+0x3c>
 80066b2:	f100 0310 	add.w	r3, r0, #16
 80066b6:	462c      	mov	r4, r5
 80066b8:	ed53 5a04 	vldr	s11, [r3, #-16]
 80066bc:	ed13 6a03 	vldr	s12, [r3, #-12]
 80066c0:	ed53 6a02 	vldr	s13, [r3, #-8]
 80066c4:	ed13 7a01 	vldr	s14, [r3, #-4]
 80066c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80066cc:	3c01      	subs	r4, #1
 80066ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 80066d2:	f103 0310 	add.w	r3, r3, #16
 80066d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066de:	d1eb      	bne.n	80066b8 <arm_mean_f32+0x10>
 80066e0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80066e4:	f011 0303 	ands.w	r3, r1, #3
 80066e8:	d00f      	beq.n	800670a <arm_mean_f32+0x62>
 80066ea:	ed90 7a00 	vldr	s14, [r0]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066f4:	d009      	beq.n	800670a <arm_mean_f32+0x62>
 80066f6:	ed90 7a01 	vldr	s14, [r0, #4]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006700:	bf1c      	itt	ne
 8006702:	ed90 7a02 	vldrne	s14, [r0, #8]
 8006706:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800670a:	ee07 1a10 	vmov	s14, r1
 800670e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006712:	bc30      	pop	{r4, r5}
 8006714:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006718:	edc2 6a00 	vstr	s13, [r2]
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	00000000 	.word	0x00000000

08006724 <arm_max_f32>:
 8006724:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 8006728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672a:	4607      	mov	r7, r0
 800672c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8006730:	ecf7 7a01 	vldmia	r7!, {s15}
 8006734:	d060      	beq.n	80067f8 <arm_max_f32+0xd4>
 8006736:	2400      	movs	r4, #0
 8006738:	3014      	adds	r0, #20
 800673a:	4625      	mov	r5, r4
 800673c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8006740:	ed10 7a04 	vldr	s14, [r0, #-16]
 8006744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674c:	bf48      	it	mi
 800674e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006752:	ed10 7a03 	vldr	s14, [r0, #-12]
 8006756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800675a:	bf48      	it	mi
 800675c:	1c65      	addmi	r5, r4, #1
 800675e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006762:	bf48      	it	mi
 8006764:	eef0 7a47 	vmovmi.f32	s15, s14
 8006768:	ed10 7a02 	vldr	s14, [r0, #-8]
 800676c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006770:	bf48      	it	mi
 8006772:	1ca5      	addmi	r5, r4, #2
 8006774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006778:	bf48      	it	mi
 800677a:	eef0 7a47 	vmovmi.f32	s15, s14
 800677e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006786:	bf48      	it	mi
 8006788:	1ce5      	addmi	r5, r4, #3
 800678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678e:	f104 0404 	add.w	r4, r4, #4
 8006792:	bf44      	itt	mi
 8006794:	eef0 7a47 	vmovmi.f32	s15, s14
 8006798:	4625      	movmi	r5, r4
 800679a:	42a6      	cmp	r6, r4
 800679c:	f100 0010 	add.w	r0, r0, #16
 80067a0:	d1ce      	bne.n	8006740 <arm_max_f32+0x1c>
 80067a2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80067a6:	f01c 0003 	ands.w	r0, ip, #3
 80067aa:	d021      	beq.n	80067f0 <arm_max_f32+0xcc>
 80067ac:	ed97 7a00 	vldr	s14, [r7]
 80067b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b8:	bfc4      	itt	gt
 80067ba:	eef0 7a47 	vmovgt.f32	s15, s14
 80067be:	1a0d      	subgt	r5, r1, r0
 80067c0:	3801      	subs	r0, #1
 80067c2:	d015      	beq.n	80067f0 <arm_max_f32+0xcc>
 80067c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80067c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d0:	bf44      	itt	mi
 80067d2:	eef0 7a47 	vmovmi.f32	s15, s14
 80067d6:	1a0d      	submi	r5, r1, r0
 80067d8:	2801      	cmp	r0, #1
 80067da:	d009      	beq.n	80067f0 <arm_max_f32+0xcc>
 80067dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80067e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e8:	bfc4      	itt	gt
 80067ea:	eef0 7a47 	vmovgt.f32	s15, s14
 80067ee:	4665      	movgt	r5, ip
 80067f0:	edc2 7a00 	vstr	s15, [r2]
 80067f4:	601d      	str	r5, [r3, #0]
 80067f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f8:	4675      	mov	r5, lr
 80067fa:	e7d4      	b.n	80067a6 <arm_max_f32+0x82>

080067fc <arm_rfft_32_fast_init_f32>:
 80067fc:	b178      	cbz	r0, 800681e <arm_rfft_32_fast_init_f32+0x22>
 80067fe:	b430      	push	{r4, r5}
 8006800:	4908      	ldr	r1, [pc, #32]	@ (8006824 <arm_rfft_32_fast_init_f32+0x28>)
 8006802:	4a09      	ldr	r2, [pc, #36]	@ (8006828 <arm_rfft_32_fast_init_f32+0x2c>)
 8006804:	2310      	movs	r3, #16
 8006806:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800680a:	8003      	strh	r3, [r0, #0]
 800680c:	2520      	movs	r5, #32
 800680e:	2414      	movs	r4, #20
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <arm_rfft_32_fast_init_f32+0x30>)
 8006812:	8205      	strh	r5, [r0, #16]
 8006814:	8184      	strh	r4, [r0, #12]
 8006816:	6143      	str	r3, [r0, #20]
 8006818:	bc30      	pop	{r4, r5}
 800681a:	2000      	movs	r0, #0
 800681c:	4770      	bx	lr
 800681e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006822:	4770      	bx	lr
 8006824:	08009a74 	.word	0x08009a74
 8006828:	0800e3ac 	.word	0x0800e3ac
 800682c:	0801712c 	.word	0x0801712c

08006830 <arm_rfft_64_fast_init_f32>:
 8006830:	b178      	cbz	r0, 8006852 <arm_rfft_64_fast_init_f32+0x22>
 8006832:	b430      	push	{r4, r5}
 8006834:	4908      	ldr	r1, [pc, #32]	@ (8006858 <arm_rfft_64_fast_init_f32+0x28>)
 8006836:	4a09      	ldr	r2, [pc, #36]	@ (800685c <arm_rfft_64_fast_init_f32+0x2c>)
 8006838:	2320      	movs	r3, #32
 800683a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800683e:	8003      	strh	r3, [r0, #0]
 8006840:	2540      	movs	r5, #64	@ 0x40
 8006842:	2430      	movs	r4, #48	@ 0x30
 8006844:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <arm_rfft_64_fast_init_f32+0x30>)
 8006846:	8205      	strh	r5, [r0, #16]
 8006848:	8184      	strh	r4, [r0, #12]
 800684a:	6143      	str	r3, [r0, #20]
 800684c:	bc30      	pop	{r4, r5}
 800684e:	2000      	movs	r0, #0
 8006850:	4770      	bx	lr
 8006852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006856:	4770      	bx	lr
 8006858:	0800bbcc 	.word	0x0800bbcc
 800685c:	08012c2c 	.word	0x08012c2c
 8006860:	0801b9ac 	.word	0x0801b9ac

08006864 <arm_rfft_256_fast_init_f32>:
 8006864:	b180      	cbz	r0, 8006888 <arm_rfft_256_fast_init_f32+0x24>
 8006866:	b430      	push	{r4, r5}
 8006868:	4909      	ldr	r1, [pc, #36]	@ (8006890 <arm_rfft_256_fast_init_f32+0x2c>)
 800686a:	4a0a      	ldr	r2, [pc, #40]	@ (8006894 <arm_rfft_256_fast_init_f32+0x30>)
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006872:	8003      	strh	r3, [r0, #0]
 8006874:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8006878:	24d0      	movs	r4, #208	@ 0xd0
 800687a:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <arm_rfft_256_fast_init_f32+0x34>)
 800687c:	8205      	strh	r5, [r0, #16]
 800687e:	8184      	strh	r4, [r0, #12]
 8006880:	6143      	str	r3, [r0, #20]
 8006882:	bc30      	pop	{r4, r5}
 8006884:	2000      	movs	r0, #0
 8006886:	4770      	bx	lr
 8006888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	080098d4 	.word	0x080098d4
 8006894:	0800dfac 	.word	0x0800dfac
 8006898:	08016d2c 	.word	0x08016d2c

0800689c <arm_rfft_512_fast_init_f32>:
 800689c:	b190      	cbz	r0, 80068c4 <arm_rfft_512_fast_init_f32+0x28>
 800689e:	b430      	push	{r4, r5}
 80068a0:	490a      	ldr	r1, [pc, #40]	@ (80068cc <arm_rfft_512_fast_init_f32+0x30>)
 80068a2:	4a0b      	ldr	r2, [pc, #44]	@ (80068d0 <arm_rfft_512_fast_init_f32+0x34>)
 80068a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80068ac:	8003      	strh	r3, [r0, #0]
 80068ae:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80068b2:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80068b6:	4b07      	ldr	r3, [pc, #28]	@ (80068d4 <arm_rfft_512_fast_init_f32+0x38>)
 80068b8:	8205      	strh	r5, [r0, #16]
 80068ba:	8184      	strh	r4, [r0, #12]
 80068bc:	6143      	str	r3, [r0, #20]
 80068be:	bc30      	pop	{r4, r5}
 80068c0:	2000      	movs	r0, #0
 80068c2:	4770      	bx	lr
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	0800b85c 	.word	0x0800b85c
 80068d0:	0801242c 	.word	0x0801242c
 80068d4:	0801b1ac 	.word	0x0801b1ac

080068d8 <arm_rfft_1024_fast_init_f32>:
 80068d8:	b190      	cbz	r0, 8006900 <arm_rfft_1024_fast_init_f32+0x28>
 80068da:	b430      	push	{r4, r5}
 80068dc:	490a      	ldr	r1, [pc, #40]	@ (8006908 <arm_rfft_1024_fast_init_f32+0x30>)
 80068de:	4a0b      	ldr	r2, [pc, #44]	@ (800690c <arm_rfft_1024_fast_init_f32+0x34>)
 80068e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068e4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80068e8:	8003      	strh	r3, [r0, #0]
 80068ea:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80068ee:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80068f2:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <arm_rfft_1024_fast_init_f32+0x38>)
 80068f4:	8205      	strh	r5, [r0, #16]
 80068f6:	8184      	strh	r4, [r0, #12]
 80068f8:	6143      	str	r3, [r0, #20]
 80068fa:	bc30      	pop	{r4, r5}
 80068fc:	2000      	movs	r0, #0
 80068fe:	4770      	bx	lr
 8006900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	0800bc2c 	.word	0x0800bc2c
 800690c:	08012d2c 	.word	0x08012d2c
 8006910:	08013d2c 	.word	0x08013d2c

08006914 <arm_rfft_2048_fast_init_f32>:
 8006914:	b190      	cbz	r0, 800693c <arm_rfft_2048_fast_init_f32+0x28>
 8006916:	b430      	push	{r4, r5}
 8006918:	490a      	ldr	r1, [pc, #40]	@ (8006944 <arm_rfft_2048_fast_init_f32+0x30>)
 800691a:	4a0b      	ldr	r2, [pc, #44]	@ (8006948 <arm_rfft_2048_fast_init_f32+0x34>)
 800691c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006920:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006924:	8003      	strh	r3, [r0, #0]
 8006926:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800692a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800692e:	4b07      	ldr	r3, [pc, #28]	@ (800694c <arm_rfft_2048_fast_init_f32+0x38>)
 8006930:	8205      	strh	r5, [r0, #16]
 8006932:	8184      	strh	r4, [r0, #12]
 8006934:	6143      	str	r3, [r0, #20]
 8006936:	bc30      	pop	{r4, r5}
 8006938:	2000      	movs	r0, #0
 800693a:	4770      	bx	lr
 800693c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	08008ac4 	.word	0x08008ac4
 8006948:	0800bfac 	.word	0x0800bfac
 800694c:	08014d2c 	.word	0x08014d2c

08006950 <arm_rfft_4096_fast_init_f32>:
 8006950:	b190      	cbz	r0, 8006978 <arm_rfft_4096_fast_init_f32+0x28>
 8006952:	b430      	push	{r4, r5}
 8006954:	490a      	ldr	r1, [pc, #40]	@ (8006980 <arm_rfft_4096_fast_init_f32+0x30>)
 8006956:	4a0b      	ldr	r2, [pc, #44]	@ (8006984 <arm_rfft_4096_fast_init_f32+0x34>)
 8006958:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800695c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006960:	8003      	strh	r3, [r0, #0]
 8006962:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006966:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800696a:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <arm_rfft_4096_fast_init_f32+0x38>)
 800696c:	8205      	strh	r5, [r0, #16]
 800696e:	8184      	strh	r4, [r0, #12]
 8006970:	6143      	str	r3, [r0, #20]
 8006972:	bc30      	pop	{r4, r5}
 8006974:	2000      	movs	r0, #0
 8006976:	4770      	bx	lr
 8006978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	08009a9c 	.word	0x08009a9c
 8006984:	0800e42c 	.word	0x0800e42c
 8006988:	080171ac 	.word	0x080171ac

0800698c <arm_rfft_fast_init_f32>:
 800698c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006990:	d01f      	beq.n	80069d2 <arm_rfft_fast_init_f32+0x46>
 8006992:	d90b      	bls.n	80069ac <arm_rfft_fast_init_f32+0x20>
 8006994:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006998:	d019      	beq.n	80069ce <arm_rfft_fast_init_f32+0x42>
 800699a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800699e:	d012      	beq.n	80069c6 <arm_rfft_fast_init_f32+0x3a>
 80069a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80069a4:	d00d      	beq.n	80069c2 <arm_rfft_fast_init_f32+0x36>
 80069a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069aa:	4770      	bx	lr
 80069ac:	2940      	cmp	r1, #64	@ 0x40
 80069ae:	d00c      	beq.n	80069ca <arm_rfft_fast_init_f32+0x3e>
 80069b0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80069b4:	d003      	beq.n	80069be <arm_rfft_fast_init_f32+0x32>
 80069b6:	2920      	cmp	r1, #32
 80069b8:	d1f5      	bne.n	80069a6 <arm_rfft_fast_init_f32+0x1a>
 80069ba:	4b07      	ldr	r3, [pc, #28]	@ (80069d8 <arm_rfft_fast_init_f32+0x4c>)
 80069bc:	4718      	bx	r3
 80069be:	4b07      	ldr	r3, [pc, #28]	@ (80069dc <arm_rfft_fast_init_f32+0x50>)
 80069c0:	4718      	bx	r3
 80069c2:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <arm_rfft_fast_init_f32+0x54>)
 80069c4:	4718      	bx	r3
 80069c6:	4b07      	ldr	r3, [pc, #28]	@ (80069e4 <arm_rfft_fast_init_f32+0x58>)
 80069c8:	4718      	bx	r3
 80069ca:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <arm_rfft_fast_init_f32+0x5c>)
 80069cc:	e7f6      	b.n	80069bc <arm_rfft_fast_init_f32+0x30>
 80069ce:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <arm_rfft_fast_init_f32+0x60>)
 80069d0:	e7f4      	b.n	80069bc <arm_rfft_fast_init_f32+0x30>
 80069d2:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <arm_rfft_fast_init_f32+0x64>)
 80069d4:	e7f2      	b.n	80069bc <arm_rfft_fast_init_f32+0x30>
 80069d6:	bf00      	nop
 80069d8:	080067fd 	.word	0x080067fd
 80069dc:	08006865 	.word	0x08006865
 80069e0:	080068d9 	.word	0x080068d9
 80069e4:	08006951 	.word	0x08006951
 80069e8:	08006831 	.word	0x08006831
 80069ec:	08006915 	.word	0x08006915
 80069f0:	0800689d 	.word	0x0800689d

080069f4 <stage_rfft_f32>:
 80069f4:	b410      	push	{r4}
 80069f6:	edd1 7a00 	vldr	s15, [r1]
 80069fa:	ed91 7a01 	vldr	s14, [r1, #4]
 80069fe:	8804      	ldrh	r4, [r0, #0]
 8006a00:	6940      	ldr	r0, [r0, #20]
 8006a02:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006a06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006a0a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006a0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a16:	3c01      	subs	r4, #1
 8006a18:	ee26 7a84 	vmul.f32	s14, s13, s8
 8006a1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006a20:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006a24:	ed82 7a00 	vstr	s14, [r2]
 8006a28:	edc2 7a01 	vstr	s15, [r2, #4]
 8006a2c:	3010      	adds	r0, #16
 8006a2e:	3210      	adds	r2, #16
 8006a30:	3b08      	subs	r3, #8
 8006a32:	3110      	adds	r1, #16
 8006a34:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006a38:	ed93 7a02 	vldr	s14, [r3, #8]
 8006a3c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006a40:	edd3 4a03 	vldr	s9, [r3, #12]
 8006a44:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006a48:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006a4c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8006a50:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006a54:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006a58:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006a5c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006a60:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006a64:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006a68:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006a6c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006a70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006a74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a7c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006a80:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006a84:	3c01      	subs	r4, #1
 8006a86:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006a8a:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006a8e:	f1a3 0308 	sub.w	r3, r3, #8
 8006a92:	f101 0108 	add.w	r1, r1, #8
 8006a96:	f100 0008 	add.w	r0, r0, #8
 8006a9a:	f102 0208 	add.w	r2, r2, #8
 8006a9e:	d1c9      	bne.n	8006a34 <stage_rfft_f32+0x40>
 8006aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop

08006aa8 <merge_rfft_f32>:
 8006aa8:	b410      	push	{r4}
 8006aaa:	edd1 7a00 	vldr	s15, [r1]
 8006aae:	edd1 6a01 	vldr	s13, [r1, #4]
 8006ab2:	8804      	ldrh	r4, [r0, #0]
 8006ab4:	6940      	ldr	r0, [r0, #20]
 8006ab6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006aba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006abe:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006ac2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006ac6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006aca:	3c01      	subs	r4, #1
 8006acc:	ed82 7a00 	vstr	s14, [r2]
 8006ad0:	edc2 7a01 	vstr	s15, [r2, #4]
 8006ad4:	b3dc      	cbz	r4, 8006b4e <merge_rfft_f32+0xa6>
 8006ad6:	00e3      	lsls	r3, r4, #3
 8006ad8:	3b08      	subs	r3, #8
 8006ada:	440b      	add	r3, r1
 8006adc:	3010      	adds	r0, #16
 8006ade:	3210      	adds	r2, #16
 8006ae0:	3110      	adds	r1, #16
 8006ae2:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006ae6:	ed93 7a02 	vldr	s14, [r3, #8]
 8006aea:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006aee:	edd3 4a03 	vldr	s9, [r3, #12]
 8006af2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006af6:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006afa:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006afe:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006b02:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006b06:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006b0a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006b0e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006b12:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006b16:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006b1a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006b1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006b22:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006b26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006b2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006b32:	3c01      	subs	r4, #1
 8006b34:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006b38:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006b3c:	f1a3 0308 	sub.w	r3, r3, #8
 8006b40:	f101 0108 	add.w	r1, r1, #8
 8006b44:	f100 0008 	add.w	r0, r0, #8
 8006b48:	f102 0208 	add.w	r2, r2, #8
 8006b4c:	d1c9      	bne.n	8006ae2 <merge_rfft_f32+0x3a>
 8006b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <arm_rfft_fast_f32>:
 8006b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b58:	8a05      	ldrh	r5, [r0, #16]
 8006b5a:	086d      	lsrs	r5, r5, #1
 8006b5c:	8005      	strh	r5, [r0, #0]
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4616      	mov	r6, r2
 8006b62:	461d      	mov	r5, r3
 8006b64:	b14b      	cbz	r3, 8006b7a <arm_rfft_fast_f32+0x26>
 8006b66:	f7ff ff9f 	bl	8006aa8 <merge_rfft_f32>
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4620      	mov	r0, r4
 8006b70:	2301      	movs	r3, #1
 8006b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b76:	f000 bb33 	b.w	80071e0 <arm_cfft_f32>
 8006b7a:	460f      	mov	r7, r1
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f000 fb2e 	bl	80071e0 <arm_cfft_f32>
 8006b84:	4632      	mov	r2, r6
 8006b86:	4639      	mov	r1, r7
 8006b88:	4620      	mov	r0, r4
 8006b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8e:	f7ff bf31 	b.w	80069f4 <stage_rfft_f32>
 8006b92:	bf00      	nop

08006b94 <arm_cfft_radix8by2_f32>:
 8006b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b98:	ed2d 8b08 	vpush	{d8-d11}
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	4608      	mov	r0, r1
 8006ba0:	f8b7 c000 	ldrh.w	ip, [r7]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006baa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006bb2:	f000 80b0 	beq.w	8006d16 <arm_cfft_radix8by2_f32+0x182>
 8006bb6:	008c      	lsls	r4, r1, #2
 8006bb8:	3410      	adds	r4, #16
 8006bba:	f100 0310 	add.w	r3, r0, #16
 8006bbe:	1906      	adds	r6, r0, r4
 8006bc0:	3210      	adds	r2, #16
 8006bc2:	4444      	add	r4, r8
 8006bc4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006bc8:	f108 0510 	add.w	r5, r8, #16
 8006bcc:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006bd0:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006bd4:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006bd8:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006bdc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006be0:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006be4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006be8:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006bec:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006bf0:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006bf4:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006bf8:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006bfc:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006c00:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006c04:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006c08:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006c0c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8006c10:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006c14:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006c18:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006c1c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8006c20:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006c24:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006c28:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006c2c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8006c30:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006c34:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006c38:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006c3c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006c40:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006c44:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006c48:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006c4c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006c50:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006c54:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006c58:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006c5c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006c60:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006c64:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006c68:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006c6c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006c70:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006c74:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006c78:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006c7c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006c80:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006c84:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006c88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006c8c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006c90:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006c94:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006c98:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006c9c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006ca0:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006ca4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006ca8:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006cac:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006cb0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006cb4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006cb8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006cbc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006cc0:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006cc4:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006cc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006ccc:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006cd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006cd4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006cd8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006cdc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006ce0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006ce4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006ce8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006cec:	3310      	adds	r3, #16
 8006cee:	4563      	cmp	r3, ip
 8006cf0:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006cf4:	f106 0610 	add.w	r6, r6, #16
 8006cf8:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006cfc:	f102 0210 	add.w	r2, r2, #16
 8006d00:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006d04:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006d08:	f105 0510 	add.w	r5, r5, #16
 8006d0c:	f104 0410 	add.w	r4, r4, #16
 8006d10:	f47f af5c 	bne.w	8006bcc <arm_cfft_radix8by2_f32+0x38>
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	b28c      	uxth	r4, r1
 8006d18:	4621      	mov	r1, r4
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	f000 fc1c 	bl	8007558 <arm_radix8_butterfly_f32>
 8006d20:	ecbd 8b08 	vpop	{d8-d11}
 8006d24:	4621      	mov	r1, r4
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	4640      	mov	r0, r8
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	f000 bc12 	b.w	8007558 <arm_radix8_butterfly_f32>

08006d34 <arm_cfft_radix8by4_f32>:
 8006d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	ed2d 8b0a 	vpush	{d8-d12}
 8006d3c:	b08d      	sub	sp, #52	@ 0x34
 8006d3e:	460d      	mov	r5, r1
 8006d40:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d42:	8801      	ldrh	r1, [r0, #0]
 8006d44:	6842      	ldr	r2, [r0, #4]
 8006d46:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d48:	0849      	lsrs	r1, r1, #1
 8006d4a:	008b      	lsls	r3, r1, #2
 8006d4c:	18ee      	adds	r6, r5, r3
 8006d4e:	18f0      	adds	r0, r6, r3
 8006d50:	edd0 5a00 	vldr	s11, [r0]
 8006d54:	edd5 7a00 	vldr	s15, [r5]
 8006d58:	ed96 7a00 	vldr	s14, [r6]
 8006d5c:	edd0 3a01 	vldr	s7, [r0, #4]
 8006d60:	ed96 4a01 	vldr	s8, [r6, #4]
 8006d64:	ed95 5a01 	vldr	s10, [r5, #4]
 8006d68:	9008      	str	r0, [sp, #32]
 8006d6a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006d6e:	18c7      	adds	r7, r0, r3
 8006d70:	edd7 4a00 	vldr	s9, [r7]
 8006d74:	ed97 3a01 	vldr	s6, [r7, #4]
 8006d78:	9701      	str	r7, [sp, #4]
 8006d7a:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006d7e:	462c      	mov	r4, r5
 8006d80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006d84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006d88:	ee16 ca90 	vmov	ip, s13
 8006d8c:	f844 cb08 	str.w	ip, [r4], #8
 8006d90:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006d94:	edd6 5a01 	vldr	s11, [r6, #4]
 8006d98:	edd7 2a01 	vldr	s5, [r7, #4]
 8006d9c:	9404      	str	r4, [sp, #16]
 8006d9e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006da2:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006da6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006daa:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006dae:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006db2:	0849      	lsrs	r1, r1, #1
 8006db4:	f102 0e08 	add.w	lr, r2, #8
 8006db8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006dbc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006dc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dc2:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006dc6:	f1a1 0902 	sub.w	r9, r1, #2
 8006dca:	f8cd e00c 	str.w	lr, [sp, #12]
 8006dce:	4631      	mov	r1, r6
 8006dd0:	ee13 ea90 	vmov	lr, s7
 8006dd4:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006dd8:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006ddc:	4604      	mov	r4, r0
 8006dde:	edc5 5a01 	vstr	s11, [r5, #4]
 8006de2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006de6:	f841 eb08 	str.w	lr, [r1], #8
 8006dea:	ee34 5a24 	vadd.f32	s10, s8, s9
 8006dee:	ee16 ea10 	vmov	lr, s12
 8006df2:	ed86 5a01 	vstr	s10, [r6, #4]
 8006df6:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006dfa:	f844 eb08 	str.w	lr, [r4], #8
 8006dfe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006e02:	edc0 6a01 	vstr	s13, [r0, #4]
 8006e06:	9405      	str	r4, [sp, #20]
 8006e08:	4604      	mov	r4, r0
 8006e0a:	ee17 0a90 	vmov	r0, s15
 8006e0e:	9106      	str	r1, [sp, #24]
 8006e10:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006e14:	f102 0110 	add.w	r1, r2, #16
 8006e18:	46bc      	mov	ip, r7
 8006e1a:	9100      	str	r1, [sp, #0]
 8006e1c:	f847 0b08 	str.w	r0, [r7], #8
 8006e20:	f102 0118 	add.w	r1, r2, #24
 8006e24:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006e28:	9102      	str	r1, [sp, #8]
 8006e2a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006e2e:	9007      	str	r0, [sp, #28]
 8006e30:	f000 8134 	beq.w	800709c <arm_cfft_radix8by4_f32+0x368>
 8006e34:	f102 0920 	add.w	r9, r2, #32
 8006e38:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8006e3c:	9a01      	ldr	r2, [sp, #4]
 8006e3e:	f8dd a000 	ldr.w	sl, [sp]
 8006e42:	3b0c      	subs	r3, #12
 8006e44:	4683      	mov	fp, r0
 8006e46:	4463      	add	r3, ip
 8006e48:	f105 0e10 	add.w	lr, r5, #16
 8006e4c:	f1a4 010c 	sub.w	r1, r4, #12
 8006e50:	f104 0510 	add.w	r5, r4, #16
 8006e54:	f1a6 0c0c 	sub.w	ip, r6, #12
 8006e58:	f1a2 040c 	sub.w	r4, r2, #12
 8006e5c:	f106 0010 	add.w	r0, r6, #16
 8006e60:	3210      	adds	r2, #16
 8006e62:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8006e66:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006e6a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006e6e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006e72:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006e76:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8006e7a:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006e7e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006e82:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006e86:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006e8a:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006e8e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006e92:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006e96:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006e9a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006e9e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006ea2:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006ea6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006eaa:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006eae:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006eb2:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006eb6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006eba:	ed94 7a02 	vldr	s14, [r4, #8]
 8006ebe:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006ec2:	ed91 ba02 	vldr	s22, [r1, #8]
 8006ec6:	edd3 9a02 	vldr	s19, [r3, #8]
 8006eca:	edd4 2a01 	vldr	s5, [r4, #4]
 8006ece:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006ed2:	ed93 5a01 	vldr	s10, [r3, #4]
 8006ed6:	edd1 0a01 	vldr	s1, [r1, #4]
 8006eda:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006ede:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006ee2:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006ee6:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006eea:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006eee:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006ef2:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006ef6:	ed91 7a01 	vldr	s14, [r1, #4]
 8006efa:	edd3 8a01 	vldr	s17, [r3, #4]
 8006efe:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006f02:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006f06:	ee37 7a28 	vadd.f32	s14, s14, s17
 8006f0a:	ee32 9a60 	vsub.f32	s18, s4, s1
 8006f0e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8006f12:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006f16:	ed1a aa02 	vldr	s20, [sl, #-8]
 8006f1a:	ee73 8a22 	vadd.f32	s17, s6, s5
 8006f1e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8006f22:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006f26:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006f2a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8006f2e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8006f32:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006f36:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8006f3a:	ee63 ca87 	vmul.f32	s25, s7, s14
 8006f3e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006f42:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006f46:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006f4a:	ee73 3aea 	vsub.f32	s7, s7, s21
 8006f4e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006f52:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8006f56:	ee3b aaca 	vsub.f32	s20, s23, s20
 8006f5a:	ee34 4a67 	vsub.f32	s8, s8, s15
 8006f5e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006f62:	ee36 6a48 	vsub.f32	s12, s12, s16
 8006f66:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8006f6a:	ed00 7a02 	vstr	s14, [r0, #-8]
 8006f6e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006f72:	edc1 8a01 	vstr	s17, [r1, #4]
 8006f76:	ed81 aa02 	vstr	s20, [r1, #8]
 8006f7a:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006f7e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006f82:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006f86:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006f8a:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006f8e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006f92:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006f96:	ee66 9a26 	vmul.f32	s19, s12, s13
 8006f9a:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006f9e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006fa2:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006fa6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006faa:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006fae:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006fb2:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006fb6:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006fba:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006fbe:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006fc2:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006fc6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006fca:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006fce:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006fd2:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006fd6:	ed84 7a01 	vstr	s14, [r4, #4]
 8006fda:	ed84 4a02 	vstr	s8, [r4, #8]
 8006fde:	ee35 6a81 	vadd.f32	s12, s11, s2
 8006fe2:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006fe6:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 8006fea:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 8006fee:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006ff2:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006ff6:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006ffa:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006ffe:	ee26 5a25 	vmul.f32	s10, s12, s11
 8007002:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007006:	ee26 6a26 	vmul.f32	s12, s12, s13
 800700a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800700e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8007012:	ee23 3a25 	vmul.f32	s6, s6, s11
 8007016:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800701a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800701e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8007022:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007026:	f1bb 0b01 	subs.w	fp, fp, #1
 800702a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800702e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007032:	f10e 0e08 	add.w	lr, lr, #8
 8007036:	ed83 3a02 	vstr	s6, [r3, #8]
 800703a:	ed83 7a01 	vstr	s14, [r3, #4]
 800703e:	f1ac 0c08 	sub.w	ip, ip, #8
 8007042:	f10a 0a08 	add.w	sl, sl, #8
 8007046:	f100 0008 	add.w	r0, r0, #8
 800704a:	f1a1 0108 	sub.w	r1, r1, #8
 800704e:	f109 0910 	add.w	r9, r9, #16
 8007052:	f105 0508 	add.w	r5, r5, #8
 8007056:	f1a4 0408 	sub.w	r4, r4, #8
 800705a:	f108 0818 	add.w	r8, r8, #24
 800705e:	f102 0208 	add.w	r2, r2, #8
 8007062:	f1a3 0308 	sub.w	r3, r3, #8
 8007066:	f47f aefc 	bne.w	8006e62 <arm_cfft_radix8by4_f32+0x12e>
 800706a:	9907      	ldr	r1, [sp, #28]
 800706c:	9800      	ldr	r0, [sp, #0]
 800706e:	00cb      	lsls	r3, r1, #3
 8007070:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007074:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007078:	9100      	str	r1, [sp, #0]
 800707a:	9904      	ldr	r1, [sp, #16]
 800707c:	4419      	add	r1, r3
 800707e:	9104      	str	r1, [sp, #16]
 8007080:	9903      	ldr	r1, [sp, #12]
 8007082:	4419      	add	r1, r3
 8007084:	9103      	str	r1, [sp, #12]
 8007086:	9906      	ldr	r1, [sp, #24]
 8007088:	4419      	add	r1, r3
 800708a:	9106      	str	r1, [sp, #24]
 800708c:	9905      	ldr	r1, [sp, #20]
 800708e:	441f      	add	r7, r3
 8007090:	4419      	add	r1, r3
 8007092:	9b02      	ldr	r3, [sp, #8]
 8007094:	9105      	str	r1, [sp, #20]
 8007096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	9904      	ldr	r1, [sp, #16]
 800709e:	9805      	ldr	r0, [sp, #20]
 80070a0:	ed91 4a00 	vldr	s8, [r1]
 80070a4:	edd0 6a00 	vldr	s13, [r0]
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	ed97 3a00 	vldr	s6, [r7]
 80070ae:	edd3 7a00 	vldr	s15, [r3]
 80070b2:	edd0 4a01 	vldr	s9, [r0, #4]
 80070b6:	edd1 3a01 	vldr	s7, [r1, #4]
 80070ba:	ed97 2a01 	vldr	s4, [r7, #4]
 80070be:	ed93 7a01 	vldr	s14, [r3, #4]
 80070c2:	9a03      	ldr	r2, [sp, #12]
 80070c4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80070c8:	ee34 6a26 	vadd.f32	s12, s8, s13
 80070cc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80070d0:	ee37 5a86 	vadd.f32	s10, s15, s12
 80070d4:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80070d8:	ee35 5a03 	vadd.f32	s10, s10, s6
 80070dc:	ee74 6a66 	vsub.f32	s13, s8, s13
 80070e0:	ed81 5a00 	vstr	s10, [r1]
 80070e4:	ed93 5a01 	vldr	s10, [r3, #4]
 80070e8:	edd7 4a01 	vldr	s9, [r7, #4]
 80070ec:	ee35 5a85 	vadd.f32	s10, s11, s10
 80070f0:	ee37 4a26 	vadd.f32	s8, s14, s13
 80070f4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80070f8:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80070fc:	ed81 5a01 	vstr	s10, [r1, #4]
 8007100:	edd2 1a00 	vldr	s3, [r2]
 8007104:	edd2 2a01 	vldr	s5, [r2, #4]
 8007108:	ee34 5a83 	vadd.f32	s10, s9, s6
 800710c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007110:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007114:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007118:	ee24 4a22 	vmul.f32	s8, s8, s5
 800711c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007120:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007124:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007128:	ee35 5a44 	vsub.f32	s10, s10, s8
 800712c:	edc3 2a00 	vstr	s5, [r3]
 8007130:	ed83 5a01 	vstr	s10, [r3, #4]
 8007134:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8007138:	9b00      	ldr	r3, [sp, #0]
 800713a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800713e:	ed93 4a01 	vldr	s8, [r3, #4]
 8007142:	ed93 5a00 	vldr	s10, [r3]
 8007146:	9b02      	ldr	r3, [sp, #8]
 8007148:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800714c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007150:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007154:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007158:	ee65 5a84 	vmul.f32	s11, s11, s8
 800715c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007160:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007164:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007168:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800716c:	ed80 6a01 	vstr	s12, [r0, #4]
 8007170:	edc0 5a00 	vstr	s11, [r0]
 8007174:	edd3 5a01 	vldr	s11, [r3, #4]
 8007178:	edd3 6a00 	vldr	s13, [r3]
 800717c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007180:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007184:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007188:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800718c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007190:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007194:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007198:	ee76 7a27 	vadd.f32	s15, s12, s15
 800719c:	ed87 7a01 	vstr	s14, [r7, #4]
 80071a0:	edc7 7a00 	vstr	s15, [r7]
 80071a4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 80071a8:	4621      	mov	r1, r4
 80071aa:	686a      	ldr	r2, [r5, #4]
 80071ac:	2304      	movs	r3, #4
 80071ae:	f000 f9d3 	bl	8007558 <arm_radix8_butterfly_f32>
 80071b2:	4630      	mov	r0, r6
 80071b4:	4621      	mov	r1, r4
 80071b6:	686a      	ldr	r2, [r5, #4]
 80071b8:	2304      	movs	r3, #4
 80071ba:	f000 f9cd 	bl	8007558 <arm_radix8_butterfly_f32>
 80071be:	9808      	ldr	r0, [sp, #32]
 80071c0:	686a      	ldr	r2, [r5, #4]
 80071c2:	4621      	mov	r1, r4
 80071c4:	2304      	movs	r3, #4
 80071c6:	f000 f9c7 	bl	8007558 <arm_radix8_butterfly_f32>
 80071ca:	686a      	ldr	r2, [r5, #4]
 80071cc:	9801      	ldr	r0, [sp, #4]
 80071ce:	4621      	mov	r1, r4
 80071d0:	2304      	movs	r3, #4
 80071d2:	b00d      	add	sp, #52	@ 0x34
 80071d4:	ecbd 8b0a 	vpop	{d8-d12}
 80071d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	f000 b9bc 	b.w	8007558 <arm_radix8_butterfly_f32>

080071e0 <arm_cfft_f32>:
 80071e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e4:	2a01      	cmp	r2, #1
 80071e6:	4606      	mov	r6, r0
 80071e8:	4617      	mov	r7, r2
 80071ea:	460c      	mov	r4, r1
 80071ec:	4698      	mov	r8, r3
 80071ee:	8805      	ldrh	r5, [r0, #0]
 80071f0:	d056      	beq.n	80072a0 <arm_cfft_f32+0xc0>
 80071f2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80071f6:	d063      	beq.n	80072c0 <arm_cfft_f32+0xe0>
 80071f8:	d916      	bls.n	8007228 <arm_cfft_f32+0x48>
 80071fa:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80071fe:	d01a      	beq.n	8007236 <arm_cfft_f32+0x56>
 8007200:	d947      	bls.n	8007292 <arm_cfft_f32+0xb2>
 8007202:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8007206:	d05b      	beq.n	80072c0 <arm_cfft_f32+0xe0>
 8007208:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800720c:	d105      	bne.n	800721a <arm_cfft_f32+0x3a>
 800720e:	2301      	movs	r3, #1
 8007210:	6872      	ldr	r2, [r6, #4]
 8007212:	4629      	mov	r1, r5
 8007214:	4620      	mov	r0, r4
 8007216:	f000 f99f 	bl	8007558 <arm_radix8_butterfly_f32>
 800721a:	f1b8 0f00 	cmp.w	r8, #0
 800721e:	d111      	bne.n	8007244 <arm_cfft_f32+0x64>
 8007220:	2f01      	cmp	r7, #1
 8007222:	d016      	beq.n	8007252 <arm_cfft_f32+0x72>
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	2d20      	cmp	r5, #32
 800722a:	d049      	beq.n	80072c0 <arm_cfft_f32+0xe0>
 800722c:	d935      	bls.n	800729a <arm_cfft_f32+0xba>
 800722e:	2d40      	cmp	r5, #64	@ 0x40
 8007230:	d0ed      	beq.n	800720e <arm_cfft_f32+0x2e>
 8007232:	2d80      	cmp	r5, #128	@ 0x80
 8007234:	d1f1      	bne.n	800721a <arm_cfft_f32+0x3a>
 8007236:	4621      	mov	r1, r4
 8007238:	4630      	mov	r0, r6
 800723a:	f7ff fcab 	bl	8006b94 <arm_cfft_radix8by2_f32>
 800723e:	f1b8 0f00 	cmp.w	r8, #0
 8007242:	d0ed      	beq.n	8007220 <arm_cfft_f32+0x40>
 8007244:	68b2      	ldr	r2, [r6, #8]
 8007246:	89b1      	ldrh	r1, [r6, #12]
 8007248:	4620      	mov	r0, r4
 800724a:	f000 f841 	bl	80072d0 <arm_bitreversal_32>
 800724e:	2f01      	cmp	r7, #1
 8007250:	d1e8      	bne.n	8007224 <arm_cfft_f32+0x44>
 8007252:	ee07 5a90 	vmov	s15, r5
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800725e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007262:	2d00      	cmp	r5, #0
 8007264:	d0de      	beq.n	8007224 <arm_cfft_f32+0x44>
 8007266:	f104 0108 	add.w	r1, r4, #8
 800726a:	2300      	movs	r3, #0
 800726c:	3301      	adds	r3, #1
 800726e:	429d      	cmp	r5, r3
 8007270:	f101 0108 	add.w	r1, r1, #8
 8007274:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007278:	ed51 7a03 	vldr	s15, [r1, #-12]
 800727c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007280:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007284:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007288:	ed41 7a03 	vstr	s15, [r1, #-12]
 800728c:	d1ee      	bne.n	800726c <arm_cfft_f32+0x8c>
 800728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007292:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007296:	d0ba      	beq.n	800720e <arm_cfft_f32+0x2e>
 8007298:	e7bf      	b.n	800721a <arm_cfft_f32+0x3a>
 800729a:	2d10      	cmp	r5, #16
 800729c:	d0cb      	beq.n	8007236 <arm_cfft_f32+0x56>
 800729e:	e7bc      	b.n	800721a <arm_cfft_f32+0x3a>
 80072a0:	b19d      	cbz	r5, 80072ca <arm_cfft_f32+0xea>
 80072a2:	f101 030c 	add.w	r3, r1, #12
 80072a6:	2200      	movs	r2, #0
 80072a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80072ac:	3201      	adds	r2, #1
 80072ae:	eef1 7a67 	vneg.f32	s15, s15
 80072b2:	4295      	cmp	r5, r2
 80072b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80072b8:	f103 0308 	add.w	r3, r3, #8
 80072bc:	d1f4      	bne.n	80072a8 <arm_cfft_f32+0xc8>
 80072be:	e798      	b.n	80071f2 <arm_cfft_f32+0x12>
 80072c0:	4621      	mov	r1, r4
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff fd36 	bl	8006d34 <arm_cfft_radix8by4_f32>
 80072c8:	e7a7      	b.n	800721a <arm_cfft_f32+0x3a>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0aa      	beq.n	8007224 <arm_cfft_f32+0x44>
 80072ce:	e7b9      	b.n	8007244 <arm_cfft_f32+0x64>

080072d0 <arm_bitreversal_32>:
 80072d0:	b1e9      	cbz	r1, 800730e <arm_bitreversal_32+0x3e>
 80072d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d4:	2500      	movs	r5, #0
 80072d6:	f102 0e02 	add.w	lr, r2, #2
 80072da:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80072de:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80072e2:	08a4      	lsrs	r4, r4, #2
 80072e4:	089b      	lsrs	r3, r3, #2
 80072e6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80072ea:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80072ee:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80072f2:	00a6      	lsls	r6, r4, #2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80072fa:	3304      	adds	r3, #4
 80072fc:	1d34      	adds	r4, r6, #4
 80072fe:	3502      	adds	r5, #2
 8007300:	58c6      	ldr	r6, [r0, r3]
 8007302:	5907      	ldr	r7, [r0, r4]
 8007304:	50c7      	str	r7, [r0, r3]
 8007306:	428d      	cmp	r5, r1
 8007308:	5106      	str	r6, [r0, r4]
 800730a:	d3e6      	bcc.n	80072da <arm_bitreversal_32+0xa>
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730e:	4770      	bx	lr

08007310 <arm_cmplx_mag_f32>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	ed2d 8b02 	vpush	{d8}
 8007318:	0897      	lsrs	r7, r2, #2
 800731a:	b084      	sub	sp, #16
 800731c:	d077      	beq.n	800740e <arm_cmplx_mag_f32+0xfe>
 800731e:	f04f 0800 	mov.w	r8, #0
 8007322:	f100 0420 	add.w	r4, r0, #32
 8007326:	f101 0510 	add.w	r5, r1, #16
 800732a:	463e      	mov	r6, r7
 800732c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8007330:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8007334:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800733c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007340:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007348:	f2c0 80c5 	blt.w	80074d6 <arm_cmplx_mag_f32+0x1c6>
 800734c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007354:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007358:	f100 80cb 	bmi.w	80074f2 <arm_cmplx_mag_f32+0x1e2>
 800735c:	ed05 8a04 	vstr	s16, [r5, #-16]
 8007360:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8007364:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8007368:	ee20 0a00 	vmul.f32	s0, s0, s0
 800736c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007370:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007374:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	f2c0 80a8 	blt.w	80074d0 <arm_cmplx_mag_f32+0x1c0>
 8007380:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800738c:	f100 80a8 	bmi.w	80074e0 <arm_cmplx_mag_f32+0x1d0>
 8007390:	ed05 8a03 	vstr	s16, [r5, #-12]
 8007394:	ed14 0a04 	vldr	s0, [r4, #-16]
 8007398:	ed54 7a03 	vldr	s15, [r4, #-12]
 800739c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80073a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80073ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b0:	f2c0 808b 	blt.w	80074ca <arm_cmplx_mag_f32+0x1ba>
 80073b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80073b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80073c0:	f100 80a9 	bmi.w	8007516 <arm_cmplx_mag_f32+0x206>
 80073c4:	ed05 8a02 	vstr	s16, [r5, #-8]
 80073c8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80073cc:	ed54 7a01 	vldr	s15, [r4, #-4]
 80073d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80073d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80073d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80073dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	db6e      	blt.n	80074c4 <arm_cmplx_mag_f32+0x1b4>
 80073e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80073ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80073f2:	f100 8087 	bmi.w	8007504 <arm_cmplx_mag_f32+0x1f4>
 80073f6:	ed05 8a01 	vstr	s16, [r5, #-4]
 80073fa:	3e01      	subs	r6, #1
 80073fc:	f104 0420 	add.w	r4, r4, #32
 8007400:	f105 0510 	add.w	r5, r5, #16
 8007404:	d192      	bne.n	800732c <arm_cmplx_mag_f32+0x1c>
 8007406:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800740a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800740e:	f012 0203 	ands.w	r2, r2, #3
 8007412:	d052      	beq.n	80074ba <arm_cmplx_mag_f32+0x1aa>
 8007414:	ed90 0a00 	vldr	s0, [r0]
 8007418:	edd0 7a01 	vldr	s15, [r0, #4]
 800741c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007420:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007424:	2300      	movs	r3, #0
 8007426:	ee37 0a80 	vadd.f32	s0, s15, s0
 800742a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007432:	bfb8      	it	lt
 8007434:	600b      	strlt	r3, [r1, #0]
 8007436:	db08      	blt.n	800744a <arm_cmplx_mag_f32+0x13a>
 8007438:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800743c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007440:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007444:	d479      	bmi.n	800753a <arm_cmplx_mag_f32+0x22a>
 8007446:	ed81 8a00 	vstr	s16, [r1]
 800744a:	3a01      	subs	r2, #1
 800744c:	d035      	beq.n	80074ba <arm_cmplx_mag_f32+0x1aa>
 800744e:	ed90 0a02 	vldr	s0, [r0, #8]
 8007452:	edd0 7a03 	vldr	s15, [r0, #12]
 8007456:	ee20 0a00 	vmul.f32	s0, s0, s0
 800745a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800745e:	2300      	movs	r3, #0
 8007460:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007464:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746c:	bfb8      	it	lt
 800746e:	604b      	strlt	r3, [r1, #4]
 8007470:	db08      	blt.n	8007484 <arm_cmplx_mag_f32+0x174>
 8007472:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800747e:	d453      	bmi.n	8007528 <arm_cmplx_mag_f32+0x218>
 8007480:	ed81 8a01 	vstr	s16, [r1, #4]
 8007484:	2a01      	cmp	r2, #1
 8007486:	d018      	beq.n	80074ba <arm_cmplx_mag_f32+0x1aa>
 8007488:	ed90 0a04 	vldr	s0, [r0, #16]
 800748c:	edd0 7a05 	vldr	s15, [r0, #20]
 8007490:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007494:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007498:	2300      	movs	r3, #0
 800749a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800749e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80074a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a6:	db19      	blt.n	80074dc <arm_cmplx_mag_f32+0x1cc>
 80074a8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80074ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80074b4:	d44a      	bmi.n	800754c <arm_cmplx_mag_f32+0x23c>
 80074b6:	ed81 8a02 	vstr	s16, [r1, #8]
 80074ba:	b004      	add	sp, #16
 80074bc:	ecbd 8b02 	vpop	{d8}
 80074c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c4:	f845 8c04 	str.w	r8, [r5, #-4]
 80074c8:	e797      	b.n	80073fa <arm_cmplx_mag_f32+0xea>
 80074ca:	f845 8c08 	str.w	r8, [r5, #-8]
 80074ce:	e77b      	b.n	80073c8 <arm_cmplx_mag_f32+0xb8>
 80074d0:	f845 8c0c 	str.w	r8, [r5, #-12]
 80074d4:	e75e      	b.n	8007394 <arm_cmplx_mag_f32+0x84>
 80074d6:	f845 8c10 	str.w	r8, [r5, #-16]
 80074da:	e741      	b.n	8007360 <arm_cmplx_mag_f32+0x50>
 80074dc:	608b      	str	r3, [r1, #8]
 80074de:	e7ec      	b.n	80074ba <arm_cmplx_mag_f32+0x1aa>
 80074e0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80074e4:	9001      	str	r0, [sp, #4]
 80074e6:	f000 fbe5 	bl	8007cb4 <sqrtf>
 80074ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80074ee:	9801      	ldr	r0, [sp, #4]
 80074f0:	e74e      	b.n	8007390 <arm_cmplx_mag_f32+0x80>
 80074f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80074f6:	9001      	str	r0, [sp, #4]
 80074f8:	f000 fbdc 	bl	8007cb4 <sqrtf>
 80074fc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007500:	9801      	ldr	r0, [sp, #4]
 8007502:	e72b      	b.n	800735c <arm_cmplx_mag_f32+0x4c>
 8007504:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007508:	9001      	str	r0, [sp, #4]
 800750a:	f000 fbd3 	bl	8007cb4 <sqrtf>
 800750e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007512:	9801      	ldr	r0, [sp, #4]
 8007514:	e76f      	b.n	80073f6 <arm_cmplx_mag_f32+0xe6>
 8007516:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800751a:	9001      	str	r0, [sp, #4]
 800751c:	f000 fbca 	bl	8007cb4 <sqrtf>
 8007520:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007524:	9801      	ldr	r0, [sp, #4]
 8007526:	e74d      	b.n	80073c4 <arm_cmplx_mag_f32+0xb4>
 8007528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800752c:	9201      	str	r2, [sp, #4]
 800752e:	f000 fbc1 	bl	8007cb4 <sqrtf>
 8007532:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8007536:	9903      	ldr	r1, [sp, #12]
 8007538:	e7a2      	b.n	8007480 <arm_cmplx_mag_f32+0x170>
 800753a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	f000 fbb8 	bl	8007cb4 <sqrtf>
 8007544:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8007548:	9903      	ldr	r1, [sp, #12]
 800754a:	e77c      	b.n	8007446 <arm_cmplx_mag_f32+0x136>
 800754c:	9101      	str	r1, [sp, #4]
 800754e:	f000 fbb1 	bl	8007cb4 <sqrtf>
 8007552:	9901      	ldr	r1, [sp, #4]
 8007554:	e7af      	b.n	80074b6 <arm_cmplx_mag_f32+0x1a6>
 8007556:	bf00      	nop

08007558 <arm_radix8_butterfly_f32>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	ed2d 8b10 	vpush	{d8-d15}
 8007560:	b095      	sub	sp, #84	@ 0x54
 8007562:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8007566:	4603      	mov	r3, r0
 8007568:	3304      	adds	r3, #4
 800756a:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8007850 <arm_radix8_butterfly_f32+0x2f8>
 800756e:	9012      	str	r0, [sp, #72]	@ 0x48
 8007570:	468b      	mov	fp, r1
 8007572:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007574:	4689      	mov	r9, r1
 8007576:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800757a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800757c:	960f      	str	r6, [sp, #60]	@ 0x3c
 800757e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8007582:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8007586:	eb03 0508 	add.w	r5, r3, r8
 800758a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800758e:	eb05 040e 	add.w	r4, r5, lr
 8007592:	0137      	lsls	r7, r6, #4
 8007594:	eba6 030a 	sub.w	r3, r6, sl
 8007598:	eb04 000e 	add.w	r0, r4, lr
 800759c:	44b2      	add	sl, r6
 800759e:	1d3a      	adds	r2, r7, #4
 80075a0:	9702      	str	r7, [sp, #8]
 80075a2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80075a6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80075aa:	ebae 0c06 	sub.w	ip, lr, r6
 80075ae:	9703      	str	r7, [sp, #12]
 80075b0:	eb03 0708 	add.w	r7, r3, r8
 80075b4:	9701      	str	r7, [sp, #4]
 80075b6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80075ba:	9706      	str	r7, [sp, #24]
 80075bc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80075be:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80075c2:	f10e 0104 	add.w	r1, lr, #4
 80075c6:	4439      	add	r1, r7
 80075c8:	443a      	add	r2, r7
 80075ca:	0137      	lsls	r7, r6, #4
 80075cc:	00f6      	lsls	r6, r6, #3
 80075ce:	9704      	str	r7, [sp, #16]
 80075d0:	9605      	str	r6, [sp, #20]
 80075d2:	9f01      	ldr	r7, [sp, #4]
 80075d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80075d6:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80075da:	f04f 0c00 	mov.w	ip, #0
 80075de:	edd4 6a00 	vldr	s13, [r4]
 80075e2:	edd7 1a00 	vldr	s3, [r7]
 80075e6:	ed16 aa01 	vldr	s20, [r6, #-4]
 80075ea:	edd5 5a00 	vldr	s11, [r5]
 80075ee:	ed52 9a01 	vldr	s19, [r2, #-4]
 80075f2:	ed90 6a00 	vldr	s12, [r0]
 80075f6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80075fa:	ed93 3a00 	vldr	s6, [r3]
 80075fe:	ee39 0a86 	vadd.f32	s0, s19, s12
 8007602:	ee33 2a21 	vadd.f32	s4, s6, s3
 8007606:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800760a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800760e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8007612:	ee34 4a80 	vadd.f32	s8, s9, s0
 8007616:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800761a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800761e:	ee34 4a47 	vsub.f32	s8, s8, s14
 8007622:	ed46 6a01 	vstr	s13, [r6, #-4]
 8007626:	ed85 4a00 	vstr	s8, [r5]
 800762a:	edd1 6a00 	vldr	s13, [r1]
 800762e:	ed94 9a01 	vldr	s18, [r4, #4]
 8007632:	edd3 2a01 	vldr	s5, [r3, #4]
 8007636:	edd7 8a01 	vldr	s17, [r7, #4]
 800763a:	edd6 0a00 	vldr	s1, [r6]
 800763e:	edd5 3a01 	vldr	s7, [r5, #4]
 8007642:	ed90 8a01 	vldr	s16, [r0, #4]
 8007646:	ed92 7a00 	vldr	s14, [r2]
 800764a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800764e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8007652:	ee72 aae8 	vsub.f32	s21, s5, s17
 8007656:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800765a:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800765e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007662:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8007666:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800766a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800766e:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8007672:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8007676:	ee77 0a08 	vadd.f32	s1, s14, s16
 800767a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800767e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007682:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8007686:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800768a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800768e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8007692:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007696:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800769a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800769e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80076a2:	ee33 2a20 	vadd.f32	s4, s6, s1
 80076a6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80076aa:	ee33 3a60 	vsub.f32	s6, s6, s1
 80076ae:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80076b2:	ee77 0a01 	vadd.f32	s1, s14, s2
 80076b6:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80076ba:	ee37 7a41 	vsub.f32	s14, s14, s2
 80076be:	ee73 1a84 	vadd.f32	s3, s7, s8
 80076c2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80076c6:	ee76 3a27 	vadd.f32	s7, s12, s15
 80076ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80076ce:	ee32 8a00 	vadd.f32	s16, s4, s0
 80076d2:	ee33 1a45 	vsub.f32	s2, s6, s10
 80076d6:	ee32 2a40 	vsub.f32	s4, s4, s0
 80076da:	ee35 5a03 	vadd.f32	s10, s10, s6
 80076de:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80076e2:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80076e6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80076ea:	ee34 6a67 	vsub.f32	s12, s8, s15
 80076ee:	ee75 4a87 	vadd.f32	s9, s11, s14
 80076f2:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80076f6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80076fa:	ee77 7a84 	vadd.f32	s15, s15, s8
 80076fe:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8007702:	44dc      	add	ip, fp
 8007704:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007708:	45e1      	cmp	r9, ip
 800770a:	ed86 8a00 	vstr	s16, [r6]
 800770e:	ed85 2a01 	vstr	s4, [r5, #4]
 8007712:	4456      	add	r6, sl
 8007714:	ed02 0a01 	vstr	s0, [r2, #-4]
 8007718:	4455      	add	r5, sl
 800771a:	edc0 6a00 	vstr	s13, [r0]
 800771e:	ed82 1a00 	vstr	s2, [r2]
 8007722:	ed80 5a01 	vstr	s10, [r0, #4]
 8007726:	4452      	add	r2, sl
 8007728:	ed01 3a01 	vstr	s6, [r1, #-4]
 800772c:	4450      	add	r0, sl
 800772e:	edc7 2a00 	vstr	s5, [r7]
 8007732:	edc4 4a00 	vstr	s9, [r4]
 8007736:	ed83 7a00 	vstr	s14, [r3]
 800773a:	edc1 5a00 	vstr	s11, [r1]
 800773e:	edc7 3a01 	vstr	s7, [r7, #4]
 8007742:	4451      	add	r1, sl
 8007744:	ed84 6a01 	vstr	s12, [r4, #4]
 8007748:	4457      	add	r7, sl
 800774a:	edc3 7a01 	vstr	s15, [r3, #4]
 800774e:	4454      	add	r4, sl
 8007750:	4453      	add	r3, sl
 8007752:	f63f af44 	bhi.w	80075de <arm_radix8_butterfly_f32+0x86>
 8007756:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007758:	2b07      	cmp	r3, #7
 800775a:	f240 81b7 	bls.w	8007acc <arm_radix8_butterfly_f32+0x574>
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	9903      	ldr	r1, [sp, #12]
 8007762:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007764:	9e05      	ldr	r6, [sp, #20]
 8007766:	9a04      	ldr	r2, [sp, #16]
 8007768:	f103 0c08 	add.w	ip, r3, #8
 800776c:	9b02      	ldr	r3, [sp, #8]
 800776e:	3108      	adds	r1, #8
 8007770:	f108 0808 	add.w	r8, r8, #8
 8007774:	1841      	adds	r1, r0, r1
 8007776:	3608      	adds	r6, #8
 8007778:	330c      	adds	r3, #12
 800777a:	4604      	mov	r4, r0
 800777c:	4444      	add	r4, r8
 800777e:	18c3      	adds	r3, r0, r3
 8007780:	9109      	str	r1, [sp, #36]	@ 0x24
 8007782:	1981      	adds	r1, r0, r6
 8007784:	f10e 0e08 	add.w	lr, lr, #8
 8007788:	3208      	adds	r2, #8
 800778a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800778c:	9107      	str	r1, [sp, #28]
 800778e:	4604      	mov	r4, r0
 8007790:	4601      	mov	r1, r0
 8007792:	9304      	str	r3, [sp, #16]
 8007794:	f100 030c 	add.w	r3, r0, #12
 8007798:	4474      	add	r4, lr
 800779a:	f04f 0801 	mov.w	r8, #1
 800779e:	1882      	adds	r2, r0, r2
 80077a0:	4461      	add	r1, ip
 80077a2:	9305      	str	r3, [sp, #20]
 80077a4:	464b      	mov	r3, r9
 80077a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80077a8:	46c1      	mov	r9, r8
 80077aa:	9208      	str	r2, [sp, #32]
 80077ac:	46d8      	mov	r8, fp
 80077ae:	9106      	str	r1, [sp, #24]
 80077b0:	f04f 0e00 	mov.w	lr, #0
 80077b4:	469b      	mov	fp, r3
 80077b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077ba:	449e      	add	lr, r3
 80077bc:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80077c0:	441a      	add	r2, r3
 80077c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80077c4:	441a      	add	r2, r3
 80077c6:	18d4      	adds	r4, r2, r3
 80077c8:	18e5      	adds	r5, r4, r3
 80077ca:	18ee      	adds	r6, r5, r3
 80077cc:	18f7      	adds	r7, r6, r3
 80077ce:	eb07 0c03 	add.w	ip, r7, r3
 80077d2:	920d      	str	r2, [sp, #52]	@ 0x34
 80077d4:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80077d8:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80077dc:	910c      	str	r1, [sp, #48]	@ 0x30
 80077de:	4419      	add	r1, r3
 80077e0:	9103      	str	r1, [sp, #12]
 80077e2:	4419      	add	r1, r3
 80077e4:	18ca      	adds	r2, r1, r3
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	441a      	add	r2, r3
 80077ea:	18d0      	adds	r0, r2, r3
 80077ec:	ed92 ea01 	vldr	s28, [r2, #4]
 80077f0:	9a02      	ldr	r2, [sp, #8]
 80077f2:	edd4 7a00 	vldr	s15, [r4]
 80077f6:	edd2 da01 	vldr	s27, [r2, #4]
 80077fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077fc:	ed91 da01 	vldr	s26, [r1, #4]
 8007800:	ed92 ca01 	vldr	s24, [r2, #4]
 8007804:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007806:	9903      	ldr	r1, [sp, #12]
 8007808:	edcd 7a03 	vstr	s15, [sp, #12]
 800780c:	edd2 7a00 	vldr	s15, [r2]
 8007810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007812:	edcd 7a02 	vstr	s15, [sp, #8]
 8007816:	edd2 7a00 	vldr	s15, [r2]
 800781a:	edd0 ea01 	vldr	s29, [r0, #4]
 800781e:	edd1 ca01 	vldr	s25, [r1, #4]
 8007822:	eddc ba00 	vldr	s23, [ip]
 8007826:	edd7 aa00 	vldr	s21, [r7]
 800782a:	ed96 aa00 	vldr	s20, [r6]
 800782e:	edd5 9a00 	vldr	s19, [r5]
 8007832:	edcd 7a01 	vstr	s15, [sp, #4]
 8007836:	4403      	add	r3, r0
 8007838:	ed93 fa01 	vldr	s30, [r3, #4]
 800783c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8007840:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8007844:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007848:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800784c:	46cc      	mov	ip, r9
 800784e:	e001      	b.n	8007854 <arm_radix8_butterfly_f32+0x2fc>
 8007850:	3f3504f3 	.word	0x3f3504f3
 8007854:	ed91 6a00 	vldr	s12, [r1]
 8007858:	ed93 5a00 	vldr	s10, [r3]
 800785c:	edd0 fa00 	vldr	s31, [r0]
 8007860:	edd4 7a00 	vldr	s15, [r4]
 8007864:	ed95 7a00 	vldr	s14, [r5]
 8007868:	ed56 3a01 	vldr	s7, [r6, #-4]
 800786c:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007870:	ed92 2a00 	vldr	s4, [r2]
 8007874:	ed96 0a00 	vldr	s0, [r6]
 8007878:	ee33 8a85 	vadd.f32	s16, s7, s10
 800787c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007880:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007884:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007888:	ee78 1a04 	vadd.f32	s3, s16, s8
 800788c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007890:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007894:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800789c:	ed06 6a01 	vstr	s12, [r6, #-4]
 80078a0:	edd4 8a01 	vldr	s17, [r4, #4]
 80078a4:	ed92 9a01 	vldr	s18, [r2, #4]
 80078a8:	edd7 0a00 	vldr	s1, [r7]
 80078ac:	edd1 2a01 	vldr	s5, [r1, #4]
 80078b0:	ed95 7a01 	vldr	s14, [r5, #4]
 80078b4:	ed93 6a01 	vldr	s12, [r3, #4]
 80078b8:	edd0 5a01 	vldr	s11, [r0, #4]
 80078bc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80078c0:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80078c4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80078c8:	ee78 fac7 	vsub.f32	s31, s17, s14
 80078cc:	ee38 4a44 	vsub.f32	s8, s16, s8
 80078d0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80078d4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80078d8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80078dc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80078e0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80078e4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80078e8:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80078ec:	ee71 4a64 	vsub.f32	s9, s2, s9
 80078f0:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80078f4:	ee32 1a08 	vadd.f32	s2, s4, s16
 80078f8:	ee72 fa87 	vadd.f32	s31, s5, s14
 80078fc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007900:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007904:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007908:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800790c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007910:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8007914:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8007918:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800791c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007920:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007924:	ee74 0a22 	vadd.f32	s1, s8, s5
 8007928:	ee36 0a28 	vadd.f32	s0, s12, s17
 800792c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007930:	ee36 6a68 	vsub.f32	s12, s12, s17
 8007934:	ee32 4a64 	vsub.f32	s8, s4, s9
 8007938:	ee73 8a09 	vadd.f32	s17, s6, s18
 800793c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007940:	ee33 9a49 	vsub.f32	s18, s6, s18
 8007944:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007948:	ee35 3a85 	vadd.f32	s6, s11, s10
 800794c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007950:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007954:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007958:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800795c:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007960:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007964:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007968:	ee73 3a82 	vadd.f32	s7, s7, s4
 800796c:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007970:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007974:	eddd 1a02 	vldr	s3, [sp, #8]
 8007978:	ee35 5a43 	vsub.f32	s10, s10, s6
 800797c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007980:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007984:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007988:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800798c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007990:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007994:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007998:	ee39 6a06 	vadd.f32	s12, s18, s12
 800799c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80079a0:	ee21 4a84 	vmul.f32	s8, s3, s8
 80079a4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80079a8:	ee22 7a07 	vmul.f32	s14, s4, s14
 80079ac:	ee22 2a08 	vmul.f32	s4, s4, s16
 80079b0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80079b4:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80079b8:	ee31 1a09 	vadd.f32	s2, s2, s18
 80079bc:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80079c0:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80079c4:	ee74 0a60 	vsub.f32	s1, s8, s1
 80079c8:	ee37 7a48 	vsub.f32	s14, s14, s16
 80079cc:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80079d0:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80079d4:	ee72 1a21 	vadd.f32	s3, s4, s3
 80079d8:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80079dc:	ee38 2a89 	vadd.f32	s4, s17, s18
 80079e0:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80079e4:	ee38 8a04 	vadd.f32	s16, s16, s8
 80079e8:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80079ec:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80079f0:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80079f4:	eddd 5a03 	vldr	s11, [sp, #12]
 80079f8:	edc6 fa00 	vstr	s31, [r6]
 80079fc:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007a00:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007a04:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007a08:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8007a0c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8007a10:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8007a14:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007a18:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8007a1c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007a20:	ee74 4a89 	vadd.f32	s9, s9, s18
 8007a24:	ee34 3a43 	vsub.f32	s6, s8, s6
 8007a28:	ee78 8a85 	vadd.f32	s17, s17, s10
 8007a2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007a30:	44c4      	add	ip, r8
 8007a32:	45e3      	cmp	fp, ip
 8007a34:	edc3 3a00 	vstr	s7, [r3]
 8007a38:	edc3 6a01 	vstr	s13, [r3, #4]
 8007a3c:	4456      	add	r6, sl
 8007a3e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8007a42:	edc7 0a00 	vstr	s1, [r7]
 8007a46:	4453      	add	r3, sl
 8007a48:	ed80 2a00 	vstr	s4, [r0]
 8007a4c:	edc0 2a01 	vstr	s5, [r0, #4]
 8007a50:	4457      	add	r7, sl
 8007a52:	edc2 1a00 	vstr	s3, [r2]
 8007a56:	ed82 7a01 	vstr	s14, [r2, #4]
 8007a5a:	4450      	add	r0, sl
 8007a5c:	ed85 8a00 	vstr	s16, [r5]
 8007a60:	ed85 0a01 	vstr	s0, [r5, #4]
 8007a64:	4452      	add	r2, sl
 8007a66:	edc1 4a00 	vstr	s9, [r1]
 8007a6a:	4455      	add	r5, sl
 8007a6c:	ed81 3a01 	vstr	s6, [r1, #4]
 8007a70:	edc4 8a00 	vstr	s17, [r4]
 8007a74:	ed84 6a01 	vstr	s12, [r4, #4]
 8007a78:	4451      	add	r1, sl
 8007a7a:	4454      	add	r4, sl
 8007a7c:	f63f aeea 	bhi.w	8007854 <arm_radix8_butterfly_f32+0x2fc>
 8007a80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a82:	3308      	adds	r3, #8
 8007a84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a88:	3308      	adds	r3, #8
 8007a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8e:	3308      	adds	r3, #8
 8007a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a92:	9b08      	ldr	r3, [sp, #32]
 8007a94:	3308      	adds	r3, #8
 8007a96:	9308      	str	r3, [sp, #32]
 8007a98:	9b07      	ldr	r3, [sp, #28]
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	9307      	str	r3, [sp, #28]
 8007a9e:	9b06      	ldr	r3, [sp, #24]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	9306      	str	r3, [sp, #24]
 8007aa4:	9b05      	ldr	r3, [sp, #20]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	9b04      	ldr	r3, [sp, #16]
 8007aac:	3308      	adds	r3, #8
 8007aae:	9304      	str	r3, [sp, #16]
 8007ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab2:	f109 0901 	add.w	r9, r9, #1
 8007ab6:	454b      	cmp	r3, r9
 8007ab8:	f47f ae7d 	bne.w	80077b6 <arm_radix8_butterfly_f32+0x25e>
 8007abc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	46d9      	mov	r9, fp
 8007ac4:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ac6:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8007aca:	e554      	b.n	8007576 <arm_radix8_butterfly_f32+0x1e>
 8007acc:	b015      	add	sp, #84	@ 0x54
 8007ace:	ecbd 8b10 	vpop	{d8-d15}
 8007ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad6:	bf00      	nop

08007ad8 <memset>:
 8007ad8:	4402      	add	r2, r0
 8007ada:	4603      	mov	r3, r0
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d100      	bne.n	8007ae2 <memset+0xa>
 8007ae0:	4770      	bx	lr
 8007ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ae6:	e7f9      	b.n	8007adc <memset+0x4>

08007ae8 <_reclaim_reent>:
 8007ae8:	4b29      	ldr	r3, [pc, #164]	@ (8007b90 <_reclaim_reent+0xa8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4283      	cmp	r3, r0
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	4604      	mov	r4, r0
 8007af2:	d04b      	beq.n	8007b8c <_reclaim_reent+0xa4>
 8007af4:	69c3      	ldr	r3, [r0, #28]
 8007af6:	b1ab      	cbz	r3, 8007b24 <_reclaim_reent+0x3c>
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	b16b      	cbz	r3, 8007b18 <_reclaim_reent+0x30>
 8007afc:	2500      	movs	r5, #0
 8007afe:	69e3      	ldr	r3, [r4, #28]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	5959      	ldr	r1, [r3, r5]
 8007b04:	2900      	cmp	r1, #0
 8007b06:	d13b      	bne.n	8007b80 <_reclaim_reent+0x98>
 8007b08:	3504      	adds	r5, #4
 8007b0a:	2d80      	cmp	r5, #128	@ 0x80
 8007b0c:	d1f7      	bne.n	8007afe <_reclaim_reent+0x16>
 8007b0e:	69e3      	ldr	r3, [r4, #28]
 8007b10:	4620      	mov	r0, r4
 8007b12:	68d9      	ldr	r1, [r3, #12]
 8007b14:	f000 f878 	bl	8007c08 <_free_r>
 8007b18:	69e3      	ldr	r3, [r4, #28]
 8007b1a:	6819      	ldr	r1, [r3, #0]
 8007b1c:	b111      	cbz	r1, 8007b24 <_reclaim_reent+0x3c>
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 f872 	bl	8007c08 <_free_r>
 8007b24:	6961      	ldr	r1, [r4, #20]
 8007b26:	b111      	cbz	r1, 8007b2e <_reclaim_reent+0x46>
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 f86d 	bl	8007c08 <_free_r>
 8007b2e:	69e1      	ldr	r1, [r4, #28]
 8007b30:	b111      	cbz	r1, 8007b38 <_reclaim_reent+0x50>
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 f868 	bl	8007c08 <_free_r>
 8007b38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007b3a:	b111      	cbz	r1, 8007b42 <_reclaim_reent+0x5a>
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f000 f863 	bl	8007c08 <_free_r>
 8007b42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b44:	b111      	cbz	r1, 8007b4c <_reclaim_reent+0x64>
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 f85e 	bl	8007c08 <_free_r>
 8007b4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007b4e:	b111      	cbz	r1, 8007b56 <_reclaim_reent+0x6e>
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 f859 	bl	8007c08 <_free_r>
 8007b56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007b58:	b111      	cbz	r1, 8007b60 <_reclaim_reent+0x78>
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 f854 	bl	8007c08 <_free_r>
 8007b60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007b62:	b111      	cbz	r1, 8007b6a <_reclaim_reent+0x82>
 8007b64:	4620      	mov	r0, r4
 8007b66:	f000 f84f 	bl	8007c08 <_free_r>
 8007b6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007b6c:	b111      	cbz	r1, 8007b74 <_reclaim_reent+0x8c>
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 f84a 	bl	8007c08 <_free_r>
 8007b74:	6a23      	ldr	r3, [r4, #32]
 8007b76:	b14b      	cbz	r3, 8007b8c <_reclaim_reent+0xa4>
 8007b78:	4620      	mov	r0, r4
 8007b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b7e:	4718      	bx	r3
 8007b80:	680e      	ldr	r6, [r1, #0]
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 f840 	bl	8007c08 <_free_r>
 8007b88:	4631      	mov	r1, r6
 8007b8a:	e7bb      	b.n	8007b04 <_reclaim_reent+0x1c>
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000058 	.word	0x20000058

08007b94 <__errno>:
 8007b94:	4b01      	ldr	r3, [pc, #4]	@ (8007b9c <__errno+0x8>)
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20000058 	.word	0x20000058

08007ba0 <__libc_init_array>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	4d0d      	ldr	r5, [pc, #52]	@ (8007bd8 <__libc_init_array+0x38>)
 8007ba4:	4c0d      	ldr	r4, [pc, #52]	@ (8007bdc <__libc_init_array+0x3c>)
 8007ba6:	1b64      	subs	r4, r4, r5
 8007ba8:	10a4      	asrs	r4, r4, #2
 8007baa:	2600      	movs	r6, #0
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	d109      	bne.n	8007bc4 <__libc_init_array+0x24>
 8007bb0:	4d0b      	ldr	r5, [pc, #44]	@ (8007be0 <__libc_init_array+0x40>)
 8007bb2:	4c0c      	ldr	r4, [pc, #48]	@ (8007be4 <__libc_init_array+0x44>)
 8007bb4:	f000 f8a0 	bl	8007cf8 <_init>
 8007bb8:	1b64      	subs	r4, r4, r5
 8007bba:	10a4      	asrs	r4, r4, #2
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	42a6      	cmp	r6, r4
 8007bc0:	d105      	bne.n	8007bce <__libc_init_array+0x2e>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc8:	4798      	blx	r3
 8007bca:	3601      	adds	r6, #1
 8007bcc:	e7ee      	b.n	8007bac <__libc_init_array+0xc>
 8007bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd2:	4798      	blx	r3
 8007bd4:	3601      	adds	r6, #1
 8007bd6:	e7f2      	b.n	8007bbe <__libc_init_array+0x1e>
 8007bd8:	0801bab4 	.word	0x0801bab4
 8007bdc:	0801bab4 	.word	0x0801bab4
 8007be0:	0801bab4 	.word	0x0801bab4
 8007be4:	0801bab8 	.word	0x0801bab8

08007be8 <__retarget_lock_acquire_recursive>:
 8007be8:	4770      	bx	lr

08007bea <__retarget_lock_release_recursive>:
 8007bea:	4770      	bx	lr

08007bec <memcpy>:
 8007bec:	440a      	add	r2, r1
 8007bee:	4291      	cmp	r1, r2
 8007bf0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007bf4:	d100      	bne.n	8007bf8 <memcpy+0xc>
 8007bf6:	4770      	bx	lr
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c02:	4291      	cmp	r1, r2
 8007c04:	d1f9      	bne.n	8007bfa <memcpy+0xe>
 8007c06:	bd10      	pop	{r4, pc}

08007c08 <_free_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d041      	beq.n	8007c94 <_free_r+0x8c>
 8007c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c14:	1f0c      	subs	r4, r1, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfb8      	it	lt
 8007c1a:	18e4      	addlt	r4, r4, r3
 8007c1c:	f000 f83e 	bl	8007c9c <__malloc_lock>
 8007c20:	4a1d      	ldr	r2, [pc, #116]	@ (8007c98 <_free_r+0x90>)
 8007c22:	6813      	ldr	r3, [r2, #0]
 8007c24:	b933      	cbnz	r3, 8007c34 <_free_r+0x2c>
 8007c26:	6063      	str	r3, [r4, #4]
 8007c28:	6014      	str	r4, [r2, #0]
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c30:	f000 b83a 	b.w	8007ca8 <__malloc_unlock>
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	d908      	bls.n	8007c4a <_free_r+0x42>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	1821      	adds	r1, r4, r0
 8007c3c:	428b      	cmp	r3, r1
 8007c3e:	bf01      	itttt	eq
 8007c40:	6819      	ldreq	r1, [r3, #0]
 8007c42:	685b      	ldreq	r3, [r3, #4]
 8007c44:	1809      	addeq	r1, r1, r0
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	e7ed      	b.n	8007c26 <_free_r+0x1e>
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	b10b      	cbz	r3, 8007c54 <_free_r+0x4c>
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d9fa      	bls.n	8007c4a <_free_r+0x42>
 8007c54:	6811      	ldr	r1, [r2, #0]
 8007c56:	1850      	adds	r0, r2, r1
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d10b      	bne.n	8007c74 <_free_r+0x6c>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	4401      	add	r1, r0
 8007c60:	1850      	adds	r0, r2, r1
 8007c62:	4283      	cmp	r3, r0
 8007c64:	6011      	str	r1, [r2, #0]
 8007c66:	d1e0      	bne.n	8007c2a <_free_r+0x22>
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	6053      	str	r3, [r2, #4]
 8007c6e:	4408      	add	r0, r1
 8007c70:	6010      	str	r0, [r2, #0]
 8007c72:	e7da      	b.n	8007c2a <_free_r+0x22>
 8007c74:	d902      	bls.n	8007c7c <_free_r+0x74>
 8007c76:	230c      	movs	r3, #12
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	e7d6      	b.n	8007c2a <_free_r+0x22>
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	1821      	adds	r1, r4, r0
 8007c80:	428b      	cmp	r3, r1
 8007c82:	bf04      	itt	eq
 8007c84:	6819      	ldreq	r1, [r3, #0]
 8007c86:	685b      	ldreq	r3, [r3, #4]
 8007c88:	6063      	str	r3, [r4, #4]
 8007c8a:	bf04      	itt	eq
 8007c8c:	1809      	addeq	r1, r1, r0
 8007c8e:	6021      	streq	r1, [r4, #0]
 8007c90:	6054      	str	r4, [r2, #4]
 8007c92:	e7ca      	b.n	8007c2a <_free_r+0x22>
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	bf00      	nop
 8007c98:	20006850 	.word	0x20006850

08007c9c <__malloc_lock>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	@ (8007ca4 <__malloc_lock+0x8>)
 8007c9e:	f7ff bfa3 	b.w	8007be8 <__retarget_lock_acquire_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	2000684c 	.word	0x2000684c

08007ca8 <__malloc_unlock>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	@ (8007cb0 <__malloc_unlock+0x8>)
 8007caa:	f7ff bf9e 	b.w	8007bea <__retarget_lock_release_recursive>
 8007cae:	bf00      	nop
 8007cb0:	2000684c 	.word	0x2000684c

08007cb4 <sqrtf>:
 8007cb4:	b508      	push	{r3, lr}
 8007cb6:	ed2d 8b02 	vpush	{d8}
 8007cba:	eeb0 8a40 	vmov.f32	s16, s0
 8007cbe:	f000 f817 	bl	8007cf0 <__ieee754_sqrtf>
 8007cc2:	eeb4 8a48 	vcmp.f32	s16, s16
 8007cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cca:	d60c      	bvs.n	8007ce6 <sqrtf+0x32>
 8007ccc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007cec <sqrtf+0x38>
 8007cd0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd8:	d505      	bpl.n	8007ce6 <sqrtf+0x32>
 8007cda:	f7ff ff5b 	bl	8007b94 <__errno>
 8007cde:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007ce2:	2321      	movs	r3, #33	@ 0x21
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	ecbd 8b02 	vpop	{d8}
 8007cea:	bd08      	pop	{r3, pc}
 8007cec:	00000000 	.word	0x00000000

08007cf0 <__ieee754_sqrtf>:
 8007cf0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007cf4:	4770      	bx	lr
	...

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
