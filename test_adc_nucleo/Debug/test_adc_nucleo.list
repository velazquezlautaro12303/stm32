
test_adc_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007920  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013e10  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8d0  0801b8d0  00032068  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8d0  0801b8d0  0002b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8d8  0801b8d8  00032068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8d8  0801b8d8  0002b8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8dc  0801b8dc  0002b8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002068  20000000  0801b8e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c6b0  20002068  0801d948  00032068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e718  0801d948  0003e718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032068  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00032098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000200cd  00000000  00000000  00032150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000492e  00000000  00000000  0005221d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  00056b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdc  00000000  00000000  00058108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2a1  00000000  00000000  000590e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001afa1  00000000  00000000  00073385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a400b  00000000  00000000  0008e326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e58  00000000  00000000  00132334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0013818c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003c05  00000000  00000000  001381df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  0013bde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20002068 	.word	0x20002068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007aa8 	.word	0x08007aa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000206c 	.word	0x2000206c
 80001dc:	08007aa8 	.word	0x08007aa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20002084 	.word	0x20002084
 80005ac:	20002124 	.word	0x20002124

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 ff73 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f821 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f95d 	bl	800087c <MX_GPIO_Init>
  MX_DMA_Init();
 80005c2:	f000 f93b 	bl	800083c <MX_DMA_Init>
  MX_ADC1_Init();
 80005c6:	f000 f87b 	bl	80006c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005ca:	f000 f909 	bl	80007e0 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x48>)
 80005d0:	1d3c      	adds	r4, r7, #4
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f90c 	bl	8004802 <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <main+0x4c>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f004 f900 	bl	80047f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x44>
 80005f6:	bf00      	nop
 80005f8:	08007acc 	.word	0x08007acc
 80005fc:	20002420 	.word	0x20002420

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fd4e 	bl	80070b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xb8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xb8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <SystemClock_Config+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xbc>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f003 f99b 	bl	80039b0 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000680:	f000 fa56 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fbfe 	bl	8003ea0 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 fa41 	bl	8000b30 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2220      	movs	r2, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fce8 	bl	80070b0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e0:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <MX_ADC1_Init+0x110>)
 80006e2:	4a3c      	ldr	r2, [pc, #240]	; (80007d4 <MX_ADC1_Init+0x114>)
 80006e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <MX_ADC1_Init+0x110>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <MX_ADC1_Init+0x110>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_ADC1_Init+0x110>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <MX_ADC1_Init+0x110>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_ADC1_Init+0x110>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <MX_ADC1_Init+0x110>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MX_ADC1_Init+0x110>)
 800070e:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <MX_ADC1_Init+0x118>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <MX_ADC1_Init+0x110>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_ADC1_Init+0x110>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <MX_ADC1_Init+0x110>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_ADC1_Init+0x110>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	4828      	ldr	r0, [pc, #160]	; (80007d0 <MX_ADC1_Init+0x110>)
 800072e:	f000 fef9 	bl	8001524 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000738:	f000 f9fa 	bl	8000b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4619      	mov	r1, r3
 800074e:	4820      	ldr	r0, [pc, #128]	; (80007d0 <MX_ADC1_Init+0x110>)
 8000750:	f001 f984 	bl	8001a5c <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800075a:	f000 f9e9 	bl	8000b30 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000766:	2303      	movs	r3, #3
 8000768:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_ADC1_Init+0x11c>)
 8000774:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_ADC1_Init+0x110>)
 8000788:	f001 fc12 	bl	8001fb0 <HAL_ADCEx_InjectedConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000792:	f000 f9cd 	bl	8000b30 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_ADC1_Init+0x110>)
 80007a0:	f001 fc06 	bl	8001fb0 <HAL_ADCEx_InjectedConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80007aa:	f000 f9c1 	bl	8000b30 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 3;
 80007ae:	2303      	movs	r3, #3
 80007b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_ADC1_Init+0x110>)
 80007b8:	f001 fbfa 	bl	8001fb0 <HAL_ADCEx_InjectedConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80007c2:	f000 f9b5 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20002324 	.word	0x20002324
 80007d4:	40012000 	.word	0x40012000
 80007d8:	0f000001 	.word	0x0f000001
 80007dc:	000f0001 	.word	0x000f0001

080007e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f002 fb4d 	bl	8002ebc <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 f982 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200023cc 	.word	0x200023cc
 8000834:	40005400 	.word	0x40005400
 8000838:	00061a80 	.word	0x00061a80

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_DMA_Init+0x3c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <MX_DMA_Init+0x3c>)
 800084c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_DMA_Init+0x3c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2038      	movs	r0, #56	; 0x38
 8000864:	f001 fdf2 	bl	800244c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000868:	2038      	movs	r0, #56	; 0x38
 800086a:	f001 fe0b 	bl	8002484 <HAL_NVIC_EnableIRQ>

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_GPIO_Init+0x7c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <MX_GPIO_Init+0x7c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x7c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <MX_GPIO_Init+0x80>)
 80008d0:	f002 fada 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008d4:	2320      	movs	r3, #32
 80008d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_GPIO_Init+0x80>)
 80008ec:	f002 f948 	bl	8002b80 <HAL_GPIO_Init>

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000

08000900 <get_note_from_frequency>:

/* USER CODE BEGIN 4 */

  //char snum[5];
  char* get_note_from_frequency(uint32_t frequency) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	  if (frequency >= 0 && frequency <= 100) return "CONTINUA";
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b64      	cmp	r3, #100	; 0x64
 800090c:	d801      	bhi.n	8000912 <get_note_from_frequency+0x12>
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <get_note_from_frequency+0xac>)
 8000910:	e046      	b.n	80009a0 <get_note_from_frequency+0xa0>
      if (frequency >= 261 && frequency <= 277) return "C";
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000918:	d905      	bls.n	8000926 <get_note_from_frequency+0x26>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8000920:	d201      	bcs.n	8000926 <get_note_from_frequency+0x26>
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <get_note_from_frequency+0xb0>)
 8000924:	e03c      	b.n	80009a0 <get_note_from_frequency+0xa0>

      if (frequency >= 294 && frequency <= 311) return "D";
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800092c:	d305      	bcc.n	800093a <get_note_from_frequency+0x3a>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000934:	d201      	bcs.n	800093a <get_note_from_frequency+0x3a>
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <get_note_from_frequency+0xb4>)
 8000938:	e032      	b.n	80009a0 <get_note_from_frequency+0xa0>

      if (frequency >= 330 && frequency <= 349) return "E";
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8000940:	d305      	bcc.n	800094e <get_note_from_frequency+0x4e>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000948:	d201      	bcs.n	800094e <get_note_from_frequency+0x4e>
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <get_note_from_frequency+0xb8>)
 800094c:	e028      	b.n	80009a0 <get_note_from_frequency+0xa0>
      if (frequency >= 350 && frequency <= 369) return "F";
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000954:	d305      	bcc.n	8000962 <get_note_from_frequency+0x62>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800095c:	d201      	bcs.n	8000962 <get_note_from_frequency+0x62>
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <get_note_from_frequency+0xbc>)
 8000960:	e01e      	b.n	80009a0 <get_note_from_frequency+0xa0>

      if (frequency >= 393 && frequency <= 415) return "G";
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 8000968:	d905      	bls.n	8000976 <get_note_from_frequency+0x76>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8000970:	d201      	bcs.n	8000976 <get_note_from_frequency+0x76>
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <get_note_from_frequency+0xc0>)
 8000974:	e014      	b.n	80009a0 <get_note_from_frequency+0xa0>

      if (frequency >= 441 && frequency <= 466) return "A";
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 800097c:	d905      	bls.n	800098a <get_note_from_frequency+0x8a>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f5b3 7fe9 	cmp.w	r3, #466	; 0x1d2
 8000984:	d801      	bhi.n	800098a <get_note_from_frequency+0x8a>
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <get_note_from_frequency+0xc4>)
 8000988:	e00a      	b.n	80009a0 <get_note_from_frequency+0xa0>

      if (frequency >= 494 && frequency <= 523) return "B";
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8000990:	d305      	bcc.n	800099e <get_note_from_frequency+0x9e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000998:	d201      	bcs.n	800099e <get_note_from_frequency+0x9e>
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <get_note_from_frequency+0xc8>)
 800099c:	e000      	b.n	80009a0 <get_note_from_frequency+0xa0>
      return "Unknown";
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <get_note_from_frequency+0xcc>)
  }
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	08007ae8 	.word	0x08007ae8
 80009b0:	08007af4 	.word	0x08007af4
 80009b4:	08007af8 	.word	0x08007af8
 80009b8:	08007afc 	.word	0x08007afc
 80009bc:	08007b00 	.word	0x08007b00
 80009c0:	08007b04 	.word	0x08007b04
 80009c4:	08007b08 	.word	0x08007b08
 80009c8:	08007b0c 	.word	0x08007b0c
 80009cc:	08007b10 	.word	0x08007b10

080009d0 <calculate_fft_and_find_frequency>:
  uint32_t calculate_fft_and_find_frequency(uint16_t *buffer, uint32_t buffer_size) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
      arm_rfft_fast_instance_f32 S;
      float32_t maxValue;
      uint32_t maxIndex;

      // Inicialización de la FFT
      arm_rfft_fast_init_f32(&S, FFT_SIZE);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fa9e 	bl	8005f24 <arm_rfft_fast_init_f32>

      // Copiar las muestras del ADC (convertirlas de enteros a flotantes)
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009ec:	e015      	b.n	8000a1a <calculate_fft_and_find_frequency+0x4a>
//          input_signal[i] = (float32_t)(buffer[i] - 2048);  // Centramos la señal ADC en 0
    	  input_signal[i] = (float32_t)buffer[i]-1500;
 80009ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	ee07 3a90 	vmov	s15, r3
 80009fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a00:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000a64 <calculate_fft_and_find_frequency+0x94>
 8000a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <calculate_fft_and_find_frequency+0x98>)
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	3301      	adds	r3, #1
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a20:	d3e5      	bcc.n	80009ee <calculate_fft_and_find_frequency+0x1e>
//          16.0f, 17.0f, 18.0f, 19.0f, 20.0f, 21.0f, 22.0f, 23.0f,
//          24.0f, 25.0f, 26.0f, 27.0f, 28.0f, 29.0f, 30.0f, 31.0f
//      };

      // Realizar la FFT
      arm_rfft_fast_f32(&S, input_signal, fft_output, 0);
 8000a22:	f107 0010 	add.w	r0, r7, #16
 8000a26:	2300      	movs	r3, #0
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <calculate_fft_and_find_frequency+0x9c>)
 8000a2a:	490f      	ldr	r1, [pc, #60]	; (8000a68 <calculate_fft_and_find_frequency+0x98>)
 8000a2c:	f005 fb5e 	bl	80060ec <arm_rfft_fast_f32>

      // Calcular la magnitud (sólo necesitamos la parte real)
      arm_cmplx_mag_f32(fft_output, fft_output, FFT_SIZE / 2);
 8000a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a34:	490d      	ldr	r1, [pc, #52]	; (8000a6c <calculate_fft_and_find_frequency+0x9c>)
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <calculate_fft_and_find_frequency+0x9c>)
 8000a38:	f005 ff36 	bl	80068a8 <arm_cmplx_mag_f32>

      // Encontrar el índice con el valor más alto en el espectro de la FFT
      arm_max_f32(fft_output, FFT_SIZE / 2, &maxValue, &maxIndex);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <calculate_fft_and_find_frequency+0x9c>)
 8000a4a:	f005 f937 	bl	8005cbc <arm_max_f32>

      // Calcular la frecuencia dominante
      uint32_t frequency = (maxIndex * SAMPLE_RATE) / FFT_SIZE;
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <calculate_fft_and_find_frequency+0xa0>)
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	0b1b      	lsrs	r3, r3, #12
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28

      return frequency;
 8000a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3730      	adds	r7, #48	; 0x30
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	44bb8000 	.word	0x44bb8000
 8000a68:	20002424 	.word	0x20002424
 8000a6c:	20006424 	.word	0x20006424
 8000a70:	003d0900 	.word	0x003d0900

08000a74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	 SSD1306_Init();
 8000a7c:	f000 f85e 	bl	8000b3c <SSD1306_Init>
  /* Infinite loop */
	uint32_t frequency;

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, FFT_SIZE);
 8000a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a84:	491c      	ldr	r1, [pc, #112]	; (8000af8 <StartDefaultTask+0x84>)
 8000a86:	481d      	ldr	r0, [pc, #116]	; (8000afc <StartDefaultTask+0x88>)
 8000a88:	f000 fed0 	bl	800182c <HAL_ADC_Start_DMA>

		// Calcular la frecuencia utilizando la FFT
		frequency = calculate_fft_and_find_frequency(buffer, FFT_SIZE);
 8000a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a90:	4819      	ldr	r0, [pc, #100]	; (8000af8 <StartDefaultTask+0x84>)
 8000a92:	f7ff ff9d 	bl	80009d0 <calculate_fft_and_find_frequency>
 8000a96:	6278      	str	r0, [r7, #36]	; 0x24

		// Mapear la frecuencia a una nota musical
		char* note = get_note_from_frequency(frequency);
 8000a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a9a:	f7ff ff31 	bl	8000900 <get_note_from_frequency>
 8000a9e:	6238      	str	r0, [r7, #32]

		SSD1306_GotoXY (0,0);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f9b4 	bl	8000e10 <SSD1306_GotoXY>
		SSD1306_Puts ("Frecuencia: ", &Font_11x18, 1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4915      	ldr	r1, [pc, #84]	; (8000b00 <StartDefaultTask+0x8c>)
 8000aac:	4815      	ldr	r0, [pc, #84]	; (8000b04 <StartDefaultTask+0x90>)
 8000aae:	f000 fa45 	bl	8000f3c <SSD1306_Puts>

		SSD1306_GotoXY (0, 30);
 8000ab2:	211e      	movs	r1, #30
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f9ab 	bl	8000e10 <SSD1306_GotoXY>
		char output[20] = "";
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
		 // Convertir float a char* con 2 decimales de precisión
		sprintf(output, "%.2i", (int)frequency);
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <StartDefaultTask+0x94>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f006 facb 	bl	8007070 <siprintf>

		SSD1306_Puts(output, &Font_11x18, 1);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <StartDefaultTask+0x8c>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fa2a 	bl	8000f3c <SSD1306_Puts>
//		SSD1306_Puts (note, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 8000ae8:	f000 f8ec 	bl	8000cc4 <SSD1306_UpdateScreen>
		osDelay (1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af0:	f003 fed3 	bl	800489a <osDelay>
	{
 8000af4:	e7c4      	b.n	8000a80 <StartDefaultTask+0xc>
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20002324 	.word	0x20002324
 8000b00:	20000000 	.word	0x20000000
 8000b04:	08007b18 	.word	0x08007b18
 8000b08:	08007b28 	.word	0x08007b28

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f000 fce1 	bl	80014e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010000 	.word	0x40010000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b42:	f000 fa21 	bl	8000f88 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b46:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2178      	movs	r1, #120	; 0x78
 8000b4e:	485b      	ldr	r0, [pc, #364]	; (8000cbc <SSD1306_Init+0x180>)
 8000b50:	f002 fbf6 	bl	8003340 <HAL_I2C_IsDeviceReady>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e0a9      	b.n	8000cb2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000b5e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b62:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b64:	e002      	b.n	8000b6c <SSD1306_Init+0x30>
		p--;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f9      	bne.n	8000b66 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000b72:	22ae      	movs	r2, #174	; 0xae
 8000b74:	2100      	movs	r1, #0
 8000b76:	2078      	movs	r0, #120	; 0x78
 8000b78:	f000 fa82 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2078      	movs	r0, #120	; 0x78
 8000b82:	f000 fa7d 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b86:	2210      	movs	r2, #16
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2078      	movs	r0, #120	; 0x78
 8000b8c:	f000 fa78 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b90:	22b0      	movs	r2, #176	; 0xb0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2078      	movs	r0, #120	; 0x78
 8000b96:	f000 fa73 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b9a:	22c8      	movs	r2, #200	; 0xc8
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2078      	movs	r0, #120	; 0x78
 8000ba0:	f000 fa6e 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2078      	movs	r0, #120	; 0x78
 8000baa:	f000 fa69 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000bae:	2210      	movs	r2, #16
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2078      	movs	r0, #120	; 0x78
 8000bb4:	f000 fa64 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000bb8:	2240      	movs	r2, #64	; 0x40
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2078      	movs	r0, #120	; 0x78
 8000bbe:	f000 fa5f 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000bc2:	2281      	movs	r2, #129	; 0x81
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 fa5a 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000bcc:	22ff      	movs	r2, #255	; 0xff
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 fa55 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000bd6:	22a1      	movs	r2, #161	; 0xa1
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 fa50 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000be0:	22a6      	movs	r2, #166	; 0xa6
 8000be2:	2100      	movs	r1, #0
 8000be4:	2078      	movs	r0, #120	; 0x78
 8000be6:	f000 fa4b 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000bea:	22a8      	movs	r2, #168	; 0xa8
 8000bec:	2100      	movs	r1, #0
 8000bee:	2078      	movs	r0, #120	; 0x78
 8000bf0:	f000 fa46 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000bf4:	223f      	movs	r2, #63	; 0x3f
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2078      	movs	r0, #120	; 0x78
 8000bfa:	f000 fa41 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bfe:	22a4      	movs	r2, #164	; 0xa4
 8000c00:	2100      	movs	r1, #0
 8000c02:	2078      	movs	r0, #120	; 0x78
 8000c04:	f000 fa3c 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c08:	22d3      	movs	r2, #211	; 0xd3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2078      	movs	r0, #120	; 0x78
 8000c0e:	f000 fa37 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2078      	movs	r0, #120	; 0x78
 8000c18:	f000 fa32 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c1c:	22d5      	movs	r2, #213	; 0xd5
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2078      	movs	r0, #120	; 0x78
 8000c22:	f000 fa2d 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c26:	22f0      	movs	r2, #240	; 0xf0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2078      	movs	r0, #120	; 0x78
 8000c2c:	f000 fa28 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c30:	22d9      	movs	r2, #217	; 0xd9
 8000c32:	2100      	movs	r1, #0
 8000c34:	2078      	movs	r0, #120	; 0x78
 8000c36:	f000 fa23 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c3a:	2222      	movs	r2, #34	; 0x22
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2078      	movs	r0, #120	; 0x78
 8000c40:	f000 fa1e 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c44:	22da      	movs	r2, #218	; 0xda
 8000c46:	2100      	movs	r1, #0
 8000c48:	2078      	movs	r0, #120	; 0x78
 8000c4a:	f000 fa19 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c4e:	2212      	movs	r2, #18
 8000c50:	2100      	movs	r1, #0
 8000c52:	2078      	movs	r0, #120	; 0x78
 8000c54:	f000 fa14 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c58:	22db      	movs	r2, #219	; 0xdb
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f000 fa0f 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c62:	2220      	movs	r2, #32
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	; 0x78
 8000c68:	f000 fa0a 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c6c:	228d      	movs	r2, #141	; 0x8d
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2078      	movs	r0, #120	; 0x78
 8000c72:	f000 fa05 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000c76:	2214      	movs	r2, #20
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	; 0x78
 8000c7c:	f000 fa00 	bl	8001080 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c80:	22af      	movs	r2, #175	; 0xaf
 8000c82:	2100      	movs	r1, #0
 8000c84:	2078      	movs	r0, #120	; 0x78
 8000c86:	f000 f9fb 	bl	8001080 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c8a:	222e      	movs	r2, #46	; 0x2e
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2078      	movs	r0, #120	; 0x78
 8000c90:	f000 f9f6 	bl	8001080 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f843 	bl	8000d20 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000c9a:	f000 f813 	bl	8000cc4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <SSD1306_Init+0x184>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SSD1306_Init+0x184>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SSD1306_Init+0x184>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200023cc 	.word	0x200023cc
 8000cc0:	2000a824 	.word	0x2000a824

08000cc4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	e01d      	b.n	8000d0c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	3b50      	subs	r3, #80	; 0x50
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	; 0x78
 8000cdc:	f000 f9d0 	bl	8001080 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	; 0x78
 8000ce6:	f000 f9cb 	bl	8001080 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000cea:	2210      	movs	r2, #16
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	; 0x78
 8000cf0:	f000 f9c6 	bl	8001080 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	01db      	lsls	r3, r3, #7
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <SSD1306_UpdateScreen+0x58>)
 8000cfa:	441a      	add	r2, r3
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	2078      	movs	r0, #120	; 0x78
 8000d02:	f000 f957 	bl	8000fb4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	d9de      	bls.n	8000cd0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000a424 	.word	0x2000a424

08000d20 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <SSD1306_Fill+0x14>
 8000d30:	2300      	movs	r3, #0
 8000d32:	e000      	b.n	8000d36 <SSD1306_Fill+0x16>
 8000d34:	23ff      	movs	r3, #255	; 0xff
 8000d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <SSD1306_Fill+0x2c>)
 8000d3e:	f006 f9b7 	bl	80070b0 <memset>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000a424 	.word	0x2000a424

08000d50 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	80bb      	strh	r3, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	70fb      	strb	r3, [r7, #3]
	if (
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b7f      	cmp	r3, #127	; 0x7f
 8000d66:	d848      	bhi.n	8000dfa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d68:	88bb      	ldrh	r3, [r7, #4]
 8000d6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d6c:	d845      	bhi.n	8000dfa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <SSD1306_DrawPixel+0xb8>)
 8000d70:	791b      	ldrb	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11a      	bne.n	8000dc0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d8a:	88fa      	ldrh	r2, [r7, #6]
 8000d8c:	88bb      	ldrh	r3, [r7, #4]
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	b298      	uxth	r0, r3
 8000d92:	4603      	mov	r3, r0
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	4413      	add	r3, r2
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <SSD1306_DrawPixel+0xbc>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	b25a      	sxtb	r2, r3
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	2101      	movs	r1, #1
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b259      	sxtb	r1, r3
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	4603      	mov	r3, r0
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	4413      	add	r3, r2
 8000db8:	b2c9      	uxtb	r1, r1
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <SSD1306_DrawPixel+0xbc>)
 8000dbc:	54d1      	strb	r1, [r2, r3]
 8000dbe:	e01d      	b.n	8000dfc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dc0:	88fa      	ldrh	r2, [r7, #6]
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	b298      	uxth	r0, r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	01db      	lsls	r3, r3, #7
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <SSD1306_DrawPixel+0xbc>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	2101      	movs	r1, #1
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	b259      	sxtb	r1, r3
 8000dea:	88fa      	ldrh	r2, [r7, #6]
 8000dec:	4603      	mov	r3, r0
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	4413      	add	r3, r2
 8000df2:	b2c9      	uxtb	r1, r1
 8000df4:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SSD1306_DrawPixel+0xbc>)
 8000df6:	54d1      	strb	r1, [r2, r3]
 8000df8:	e000      	b.n	8000dfc <SSD1306_DrawPixel+0xac>
		return;
 8000dfa:	bf00      	nop
	}
}
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	2000a824 	.word	0x2000a824
 8000e0c:	2000a424 	.word	0x2000a424

08000e10 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e20:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <SSD1306_GotoXY+0x28>)
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <SSD1306_GotoXY+0x28>)
 8000e28:	88bb      	ldrh	r3, [r7, #4]
 8000e2a:	8053      	strh	r3, [r2, #2]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	2000a824 	.word	0x2000a824

08000e3c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
	if (
 8000e58:	2b7f      	cmp	r3, #127	; 0x7f
 8000e5a:	dc07      	bgt.n	8000e6c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000e5e:	885b      	ldrh	r3, [r3, #2]
 8000e60:	461a      	mov	r2, r3
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e68:	2b3f      	cmp	r3, #63	; 0x3f
 8000e6a:	dd01      	ble.n	8000e70 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e05e      	b.n	8000f2e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e04b      	b.n	8000f0e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	3b20      	subs	r3, #32
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	7849      	ldrb	r1, [r1, #1]
 8000e82:	fb01 f303 	mul.w	r3, r1, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	440b      	add	r3, r1
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e030      	b.n	8000efc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d010      	beq.n	8000ecc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000eac:	881a      	ldrh	r2, [r3, #0]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b298      	uxth	r0, r3
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000eb8:	885a      	ldrh	r2, [r3, #2]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	79ba      	ldrb	r2, [r7, #6]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff ff43 	bl	8000d50 <SSD1306_DrawPixel>
 8000eca:	e014      	b.n	8000ef6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000ece:	881a      	ldrh	r2, [r3, #0]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b298      	uxth	r0, r3
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000eda:	885a      	ldrh	r2, [r3, #2]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b299      	uxth	r1, r3
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f7ff ff2d 	bl	8000d50 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d3c8      	bcc.n	8000e9a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	461a      	mov	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d3ad      	bcc.n	8000e76 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000f1c:	881a      	ldrh	r2, [r3, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	4413      	add	r3, r2
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <SSD1306_Putc+0xfc>)
 8000f2a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000a824 	.word	0x2000a824

08000f3c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	4613      	mov	r3, r2
 8000f48:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f4a:	e012      	b.n	8000f72 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff71 	bl	8000e3c <SSD1306_Putc>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d002      	beq.n	8000f6c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	e008      	b.n	8000f7e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e8      	bne.n	8000f4c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <ssd1306_I2C_Init+0x28>)
 8000f90:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f92:	e002      	b.n	8000f9a <ssd1306_I2C_Init+0x12>
		p--;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f9      	bne.n	8000f94 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	0003d090 	.word	0x0003d090

08000fb4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b0c7      	sub	sp, #284	; 0x11c
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000fc2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000fc6:	600a      	str	r2, [r1, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fda:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fde:	4602      	mov	r2, r0
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fe6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fea:	460a      	mov	r2, r1
 8000fec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ff6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ffa:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001008:	e015      	b.n	8001036 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800100a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800100e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001012:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	441a      	add	r2, r3
 800101a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800101e:	3301      	adds	r3, #1
 8001020:	7811      	ldrb	r1, [r2, #0]
 8001022:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001026:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800102a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800102c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001030:	3301      	adds	r3, #1
 8001032:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001036:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800103a:	b29b      	uxth	r3, r3
 800103c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001040:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001044:	8812      	ldrh	r2, [r2, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d8df      	bhi.n	800100a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800104a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800104e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b299      	uxth	r1, r3
 8001056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800105a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	200a      	movs	r0, #10
 800106a:	9000      	str	r0, [sp, #0]
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <ssd1306_I2C_WriteMulti+0xc8>)
 800106e:	f002 f869 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 8001072:	bf00      	nop
 8001074:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	200023cc 	.word	0x200023cc

08001080 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
 800108a:	460b      	mov	r3, r1
 800108c:	71bb      	strb	r3, [r7, #6]
 800108e:	4613      	mov	r3, r2
 8001090:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	b299      	uxth	r1, r3
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	230a      	movs	r3, #10
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <ssd1306_I2C_Write+0x38>)
 80010aa:	f002 f84b 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200023cc 	.word	0x200023cc

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_MspInit+0x54>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <HAL_MspInit+0x54>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_MspInit+0x54>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_MspInit+0x54>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_MspInit+0x54>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_MspInit+0x54>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	f06f 0001 	mvn.w	r0, #1
 8001102:	f001 f9a3 	bl	800244c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a33      	ldr	r2, [pc, #204]	; (8001200 <HAL_ADC_MspInit+0xec>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d160      	bne.n	80011f8 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_ADC_MspInit+0xf0>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a31      	ldr	r2, [pc, #196]	; (8001204 <HAL_ADC_MspInit+0xf0>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <HAL_ADC_MspInit+0xf0>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_ADC_MspInit+0xf0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <HAL_ADC_MspInit+0xf0>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_ADC_MspInit+0xf0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116e:	2301      	movs	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4821      	ldr	r0, [pc, #132]	; (8001208 <HAL_ADC_MspInit+0xf4>)
 8001182:	f001 fcfd 	bl	8002b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_ADC_MspInit+0xf8>)
 8001188:	4a21      	ldr	r2, [pc, #132]	; (8001210 <HAL_ADC_MspInit+0xfc>)
 800118a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_ADC_MspInit+0xf8>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_ADC_MspInit+0xf8>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_ADC_MspInit+0xf8>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011ce:	f001 f967 	bl	80024a0 <HAL_DMA_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80011d8:	f7ff fcaa 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_ADC_MspInit+0xf8>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2105      	movs	r1, #5
 80011ec:	2012      	movs	r0, #18
 80011ee:	f001 f92d 	bl	800244c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011f2:	2012      	movs	r0, #18
 80011f4:	f001 f946 	bl	8002484 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	2000236c 	.word	0x2000236c
 8001210:	40026410 	.word	0x40026410

08001214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_I2C_MspInit+0x84>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12b      	bne.n	800128e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_I2C_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_I2C_MspInit+0x88>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_I2C_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001252:	23c0      	movs	r3, #192	; 0xc0
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001256:	2312      	movs	r3, #18
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125a:	2301      	movs	r3, #1
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001262:	2304      	movs	r3, #4
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <HAL_I2C_MspInit+0x8c>)
 800126e:	f001 fc87 	bl	8002b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_I2C_MspInit+0x88>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_I2C_MspInit+0x88>)
 800127c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_I2C_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40005400 	.word	0x40005400
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020400 	.word	0x40020400

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	2019      	movs	r0, #25
 80012ba:	f001 f8c7 	bl	800244c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012be:	2019      	movs	r0, #25
 80012c0:	f001 f8e0 	bl	8002484 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_InitTick+0xa0>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_InitTick+0xa0>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6453      	str	r3, [r2, #68]	; 0x44
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_InitTick+0xa0>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e0:	f107 0210 	add.w	r2, r7, #16
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 ffb8 	bl	8004260 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012f0:	f002 ffa2 	bl	8004238 <HAL_RCC_GetPCLK2Freq>
 80012f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_InitTick+0xa4>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0c9b      	lsrs	r3, r3, #18
 8001300:	3b01      	subs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_InitTick+0xa8>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_InitTick+0xac>)
 8001308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_InitTick+0xa8>)
 800130c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001310:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_InitTick+0xa8>)
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_InitTick+0xa8>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_InitTick+0xa8>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001324:	4809      	ldr	r0, [pc, #36]	; (800134c <HAL_InitTick+0xa8>)
 8001326:	f002 ffcd 	bl	80042c4 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d104      	bne.n	800133a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <HAL_InitTick+0xa8>)
 8001332:	f003 f821 	bl	8004378 <HAL_TIM_Base_Start_IT>
 8001336:	4603      	mov	r3, r0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	431bde83 	.word	0x431bde83
 800134c:	2000a82c 	.word	0x2000a82c
 8001350:	40010000 	.word	0x40010000

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <ADC_IRQHandler+0x10>)
 8001386:	f000 f910 	bl	80015aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20002324 	.word	0x20002324

08001394 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800139a:	f003 f84f 	bl	800443c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000a82c 	.word	0x2000a82c

080013a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <DMA2_Stream0_IRQHandler+0x10>)
 80013ae:	f001 f97d 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000236c 	.word	0x2000236c

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f005 febe 	bl	800716c <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20018000 	.word	0x20018000
 800141c:	00000400 	.word	0x00000400
 8001420:	2000a874 	.word	0x2000a874
 8001424:	2000e718 	.word	0x2000e718

08001428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SystemInit+0x20>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <SystemInit+0x20>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001452:	490e      	ldr	r1, [pc, #56]	; (800148c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001468:	4c0b      	ldr	r4, [pc, #44]	; (8001498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001476:	f7ff ffd7 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f005 fe7d 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff f897 	bl	80005b0 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001484:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20002068 	.word	0x20002068
  ldr r2, =_sidata
 8001490:	0801b8e0 	.word	0x0801b8e0
  ldr r2, =_sbss
 8001494:	20002068 	.word	0x20002068
  ldr r4, =_ebss
 8001498:	2000e718 	.word	0x2000e718

0800149c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <DMA1_Stream0_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_Init+0x40>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_Init+0x40>)
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x40>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 ffb4 	bl	8002436 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff fee8 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fdf2 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20002010 	.word	0x20002010
 8001508:	2000a878 	.word	0x2000a878

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000a878 	.word	0x2000a878

08001524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e033      	b.n	80015a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fde6 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800156a:	f023 0302 	bic.w	r3, r3, #2
 800156e:	f043 0202 	orr.w	r2, r3, #2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fb92 	bl	8001ca0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
 8001592:	e001      	b.n	8001598 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	2b20      	cmp	r3, #32
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d049      	beq.n	8001680 <HAL_ADC_IRQHandler+0xd6>
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d046      	beq.n	8001680 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d12b      	bne.n	8001670 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800161c:	2b00      	cmp	r3, #0
 800161e:	d127      	bne.n	8001670 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001638:	2b00      	cmp	r3, #0
 800163a:	d119      	bne.n	8001670 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0220 	bic.w	r2, r2, #32
 800164a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f9cb 	bl	8001a0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f06f 0212 	mvn.w	r2, #18
 800167e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a0:	2b80      	cmp	r3, #128	; 0x80
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d057      	beq.n	8001762 <HAL_ADC_IRQHandler+0x1b8>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d054      	beq.n	8001762 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d139      	bne.n	8001752 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d12b      	bne.n	8001752 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001704:	2b00      	cmp	r3, #0
 8001706:	d124      	bne.n	8001752 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11d      	bne.n	8001752 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800172c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d105      	bne.n	8001752 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fc22 	bl	8001f9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 020c 	mvn.w	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d017      	beq.n	80017c4 <HAL_ADC_IRQHandler+0x21a>
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d014      	beq.n	80017c4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d10d      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f93d 	bl	8001a34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f06f 0201 	mvn.w	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	bf0c      	ite	eq
 80017d2:	2301      	moveq	r3, #1
 80017d4:	2300      	movne	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_ADC_IRQHandler+0x27a>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d012      	beq.n	8001824 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f043 0202 	orr.w	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f06f 0220 	mvn.w	r2, #32
 8001812:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f917 	bl	8001a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f06f 0220 	mvn.w	r2, #32
 8001822:	601a      	str	r2, [r3, #0]
  }
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_ADC_Start_DMA+0x1e>
 8001846:	2302      	movs	r3, #2
 8001848:	e0ce      	b.n	80019e8 <HAL_ADC_Start_DMA+0x1bc>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b01      	cmp	r3, #1
 800185e:	d018      	beq.n	8001892 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001870:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_ADC_Start_DMA+0x1c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a5f      	ldr	r2, [pc, #380]	; (80019f4 <HAL_ADC_Start_DMA+0x1c8>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9a      	lsrs	r2, r3, #18
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001884:	e002      	b.n	800188c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	3b01      	subs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f9      	bne.n	8001886 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a0:	d107      	bne.n	80018b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	f040 8086 	bne.w	80019ce <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001900:	d106      	bne.n	8001910 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f023 0206 	bic.w	r2, r3, #6
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
 800190e:	e002      	b.n	8001916 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_ADC_Start_DMA+0x1cc>)
 8001920:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	4a35      	ldr	r2, [pc, #212]	; (80019fc <HAL_ADC_Start_DMA+0x1d0>)
 8001928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <HAL_ADC_Start_DMA+0x1d4>)
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	4a33      	ldr	r2, [pc, #204]	; (8001a04 <HAL_ADC_Start_DMA+0x1d8>)
 8001938:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001942:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001952:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001962:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	334c      	adds	r3, #76	; 0x4c
 800196e:	4619      	mov	r1, r3
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f000 fe42 	bl	80025fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10f      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d129      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	e020      	b.n	80019e6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_ADC_Start_DMA+0x1dc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d11b      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x1ba>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d114      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	e00b      	b.n	80019e6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f043 0210 	orr.w	r2, r3, #16
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20002008 	.word	0x20002008
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	40012300 	.word	0x40012300
 80019fc:	08001e99 	.word	0x08001e99
 8001a00:	08001f53 	.word	0x08001f53
 8001a04:	08001f6f 	.word	0x08001f6f
 8001a08:	40012000 	.word	0x40012000

08001a0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1c>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e105      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x228>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	d925      	bls.n	8001ad4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68d9      	ldr	r1, [r3, #12]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b1e      	subs	r3, #30
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68d9      	ldr	r1, [r3, #12]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4403      	add	r3, r0
 8001ac6:	3b1e      	subs	r3, #30
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	e022      	b.n	8001b1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6919      	ldr	r1, [r3, #16]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2207      	movs	r2, #7
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	400a      	ands	r2, r1
 8001af6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4403      	add	r3, r0
 8001b10:	409a      	lsls	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d824      	bhi.n	8001b6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	3b05      	subs	r3, #5
 8001b34:	221f      	movs	r2, #31
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	400a      	ands	r2, r1
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b05      	subs	r3, #5
 8001b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34
 8001b6a:	e04c      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d824      	bhi.n	8001bbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b23      	subs	r3, #35	; 0x23
 8001b86:	221f      	movs	r2, #31
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	400a      	ands	r2, r1
 8001b94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b23      	subs	r3, #35	; 0x23
 8001bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
 8001bbc:	e023      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b41      	subs	r3, #65	; 0x41
 8001bd0:	221f      	movs	r2, #31
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	400a      	ands	r2, r1
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b41      	subs	r3, #65	; 0x41
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_ADC_ConfigChannel+0x234>)
 8001c08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <HAL_ADC_ConfigChannel+0x238>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d109      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1cc>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b12      	cmp	r3, #18
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_ADC_ConfigChannel+0x238>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d123      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x21e>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_ConfigChannel+0x1e6>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b11      	cmp	r3, #17
 8001c40:	d11b      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d111      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_ADC_ConfigChannel+0x23c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_ADC_ConfigChannel+0x240>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	0c9a      	lsrs	r2, r3, #18
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40012300 	.word	0x40012300
 8001c94:	40012000 	.word	0x40012000
 8001c98:	20002008 	.word	0x20002008
 8001c9c:	431bde83 	.word	0x431bde83

08001ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca8:	4b79      	ldr	r3, [pc, #484]	; (8001e90 <ADC_Init+0x1f0>)
 8001caa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6859      	ldr	r1, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	021a      	lsls	r2, r3, #8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6899      	ldr	r1, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <ADC_Init+0x1f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d022      	beq.n	8001d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6899      	ldr	r1, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e00f      	b.n	8001d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0202 	bic.w	r2, r2, #2
 8001dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7e1b      	ldrb	r3, [r3, #24]
 8001db8:	005a      	lsls	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01b      	beq.n	8001e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	3b01      	subs	r3, #1
 8001df8:	035a      	lsls	r2, r3, #13
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	e007      	b.n	8001e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	051a      	lsls	r2, r3, #20
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e56:	025a      	lsls	r2, r3, #9
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6899      	ldr	r1, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	029a      	lsls	r2, r3, #10
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40012300 	.word	0x40012300
 8001e94:	0f000001 	.word	0x0f000001

08001e98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d13c      	bne.n	8001f2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d12b      	bne.n	8001f24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d127      	bne.n	8001f24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d119      	bne.n	8001f24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0220 	bic.w	r2, r2, #32
 8001efe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff fd71 	bl	8001a0c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f2a:	e00e      	b.n	8001f4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff fd85 	bl	8001a48 <HAL_ADC_ErrorCallback>
}
 8001f3e:	e004      	b.n	8001f4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7ff fd5d 	bl	8001a20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f043 0204 	orr.w	r2, r3, #4
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff fd5a 	bl	8001a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e17d      	b.n	80022c4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d925      	bls.n	8002024 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68d9      	ldr	r1, [r3, #12]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	3b1e      	subs	r3, #30
 8001fee:	2207      	movs	r2, #7
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43da      	mvns	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68d9      	ldr	r1, [r3, #12]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	4603      	mov	r3, r0
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4403      	add	r3, r0
 8002016:	3b1e      	subs	r3, #30
 8002018:	409a      	lsls	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	e022      	b.n	800206a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6919      	ldr	r1, [r3, #16]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	2207      	movs	r2, #7
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	400a      	ands	r2, r1
 8002046:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6919      	ldr	r1, [r3, #16]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	4603      	mov	r3, r0
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4403      	add	r3, r0
 8002060:	409a      	lsls	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	3b01      	subs	r3, #1
 8002086:	051a      	lsls	r2, r3, #20
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3303      	adds	r3, #3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	221f      	movs	r2, #31
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43da      	mvns	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	400a      	ands	r2, r1
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3303      	adds	r3, #3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	fa00 f203 	lsl.w	r2, r0, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a74      	ldr	r2, [pc, #464]	; (80022d0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d022      	beq.n	8002148 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6899      	ldr	r1, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	e00f      	b.n	8002168 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002156:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002166:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	7d5b      	ldrb	r3, [r3, #21]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	e007      	b.n	8002192 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002190:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7d1b      	ldrb	r3, [r3, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	e007      	b.n	80021bc <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ba:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d02e      	beq.n	8002222 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d840      	bhi.n	800224a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d002      	beq.n	80021d2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d014      	beq.n	80021fa <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80021d0:	e03b      	b.n	800224a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021e0:	f023 030f 	bic.w	r3, r3, #15
 80021e4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6959      	ldr	r1, [r3, #20]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	615a      	str	r2, [r3, #20]
      break;
 80021f8:	e03b      	b.n	8002272 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002208:	f023 030f 	bic.w	r3, r3, #15
 800220c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6999      	ldr	r1, [r3, #24]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	619a      	str	r2, [r3, #24]
      break;
 8002220:	e027      	b.n	8002272 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002230:	f023 030f 	bic.w	r3, r3, #15
 8002234:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	61da      	str	r2, [r3, #28]
      break;
 8002248:	e013      	b.n	8002272 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002258:	f023 030f 	bic.w	r3, r3, #15
 800225c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a19      	ldr	r1, [r3, #32]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	621a      	str	r2, [r3, #32]
      break;
 8002270:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002274:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d109      	bne.n	8002294 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b12      	cmp	r3, #18
 8002286:	d105      	bne.n	8002294 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d10d      	bne.n	80022ba <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d003      	beq.n	80022ae <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b11      	cmp	r3, #17
 80022ac:	d105      	bne.n	80022ba <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	000f0001 	.word	0x000f0001
 80022d4:	40012300 	.word	0x40012300
 80022d8:	40012000 	.word	0x40012000

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4907      	ldr	r1, [pc, #28]	; (8002378 <__NVIC_EnableIRQ+0x38>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000e100 	.word	0xe000e100

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	; (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	; (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff4c 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245e:	f7ff ff61 	bl	8002324 <__NVIC_GetPriorityGrouping>
 8002462:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	6978      	ldr	r0, [r7, #20]
 800246a:	f7ff ffb1 	bl	80023d0 <NVIC_EncodePriority>
 800246e:	4602      	mov	r2, r0
 8002470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff80 	bl	800237c <__NVIC_SetPriority>
}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff54 	bl	8002340 <__NVIC_EnableIRQ>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff f82e 	bl	800150c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e099      	b.n	80025f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024dc:	e00f      	b.n	80024fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024de:	f7ff f815 	bl	800150c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d908      	bls.n	80024fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2203      	movs	r2, #3
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e078      	b.n	80025f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e8      	bne.n	80024de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <HAL_DMA_Init+0x158>)
 8002518:	4013      	ands	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2b04      	cmp	r3, #4
 8002556:	d107      	bne.n	8002568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	4313      	orrs	r3, r2
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f023 0307 	bic.w	r3, r3, #7
 800257e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b04      	cmp	r3, #4
 8002590:	d117      	bne.n	80025c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00e      	beq.n	80025c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa6f 	bl	8002a88 <DMA_CheckFifoParam>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025be:	2301      	movs	r3, #1
 80025c0:	e016      	b.n	80025f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fa26 	bl	8002a1c <DMA_CalcBaseAndBitshift>
 80025d0:	4603      	mov	r3, r0
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	223f      	movs	r2, #63	; 0x3f
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	f010803f 	.word	0xf010803f

080025fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_DMA_Start_IT+0x26>
 800261e:	2302      	movs	r3, #2
 8002620:	e040      	b.n	80026a4 <HAL_DMA_Start_IT+0xa8>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d12f      	bne.n	8002696 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f9b8 	bl	80029c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	223f      	movs	r2, #63	; 0x3f
 8002656:	409a      	lsls	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0216 	orr.w	r2, r2, #22
 800266a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e005      	b.n	80026a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b8:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_DMA_IRQHandler+0x248>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a8e      	ldr	r2, [pc, #568]	; (80028f8 <HAL_DMA_IRQHandler+0x24c>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2208      	movs	r2, #8
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01a      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2208      	movs	r2, #8
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2201      	movs	r2, #1
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2204      	movs	r2, #4
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2204      	movs	r2, #4
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f043 0204 	orr.w	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2210      	movs	r2, #16
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d043      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03c      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2210      	movs	r2, #16
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d018      	beq.n	80027ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d024      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	e01f      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e016      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0208 	bic.w	r2, r2, #8
 800280a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2220      	movs	r2, #32
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 808f 	beq.w	800294c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8087 	beq.w	800294c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	2220      	movs	r2, #32
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b05      	cmp	r3, #5
 8002854:	d136      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0216 	bic.w	r2, r2, #22
 8002864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_DMA_IRQHandler+0x1da>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07e      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
        }
        return;
 80028c2:	e079      	b.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01d      	beq.n	800290e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d031      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
 80028f0:	e02c      	b.n	800294c <HAL_DMA_IRQHandler+0x2a0>
 80028f2:	bf00      	nop
 80028f4:	20002008 	.word	0x20002008
 80028f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
 800290c:	e01e      	b.n	800294c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10f      	bne.n	800293c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0210 	bic.w	r2, r2, #16
 800292a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	2b00      	cmp	r3, #0
 8002952:	d032      	beq.n	80029ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2205      	movs	r2, #5
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3301      	adds	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d307      	bcc.n	8002994 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f2      	bne.n	8002978 <HAL_DMA_IRQHandler+0x2cc>
 8002992:	e000      	b.n	8002996 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002994:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
 80029b6:	e000      	b.n	80029ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80029b8:	bf00      	nop
    }
  }
}
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d108      	bne.n	8002a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029fe:	e007      	b.n	8002a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3b10      	subs	r3, #16
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <DMA_CalcBaseAndBitshift+0x64>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <DMA_CalcBaseAndBitshift+0x68>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d909      	bls.n	8002a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a5c:	e007      	b.n	8002a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	aaaaaaab 	.word	0xaaaaaaab
 8002a84:	080088ac 	.word	0x080088ac

08002a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d856      	bhi.n	8002b56 <DMA_CheckFifoParam+0xce>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <DMA_CheckFifoParam+0x28>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002ad3 	.word	0x08002ad3
 8002ab8:	08002ac1 	.word	0x08002ac1
 8002abc:	08002b57 	.word	0x08002b57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d046      	beq.n	8002b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad0:	e043      	b.n	8002b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ada:	d140      	bne.n	8002b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e03d      	b.n	8002b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	d121      	bne.n	8002b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d837      	bhi.n	8002b62 <DMA_CheckFifoParam+0xda>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <DMA_CheckFifoParam+0x70>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b0f 	.word	0x08002b0f
 8002b00:	08002b09 	.word	0x08002b09
 8002b04:	08002b21 	.word	0x08002b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e030      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d025      	beq.n	8002b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1e:	e022      	b.n	8002b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b28:	d11f      	bne.n	8002b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b2e:	e01c      	b.n	8002b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d903      	bls.n	8002b3e <DMA_CheckFifoParam+0xb6>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d003      	beq.n	8002b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b3c:	e018      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      break;
 8002b42:	e015      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e00b      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b56:	bf00      	nop
 8002b58:	e00a      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e008      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e006      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e004      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e159      	b.n	8002e50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f040 8148 	bne.w	8002e4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d005      	beq.n	8002bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d017      	beq.n	8002c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80a2 	beq.w	8002e4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b57      	ldr	r3, [pc, #348]	; (8002e68 <HAL_GPIO_Init+0x2e8>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a56      	ldr	r2, [pc, #344]	; (8002e68 <HAL_GPIO_Init+0x2e8>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b54      	ldr	r3, [pc, #336]	; (8002e68 <HAL_GPIO_Init+0x2e8>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d22:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_GPIO_Init+0x2ec>)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a49      	ldr	r2, [pc, #292]	; (8002e70 <HAL_GPIO_Init+0x2f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d019      	beq.n	8002d82 <HAL_GPIO_Init+0x202>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a48      	ldr	r2, [pc, #288]	; (8002e74 <HAL_GPIO_Init+0x2f4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x1fe>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a47      	ldr	r2, [pc, #284]	; (8002e78 <HAL_GPIO_Init+0x2f8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x1fa>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a46      	ldr	r2, [pc, #280]	; (8002e7c <HAL_GPIO_Init+0x2fc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x1f6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a45      	ldr	r2, [pc, #276]	; (8002e80 <HAL_GPIO_Init+0x300>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x1f2>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e008      	b.n	8002d84 <HAL_GPIO_Init+0x204>
 8002d72:	2307      	movs	r3, #7
 8002d74:	e006      	b.n	8002d84 <HAL_GPIO_Init+0x204>
 8002d76:	2303      	movs	r3, #3
 8002d78:	e004      	b.n	8002d84 <HAL_GPIO_Init+0x204>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_Init+0x204>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x204>
 8002d82:	2300      	movs	r3, #0
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	f002 0203 	and.w	r2, r2, #3
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	4093      	lsls	r3, r2
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d94:	4935      	ldr	r1, [pc, #212]	; (8002e6c <HAL_GPIO_Init+0x2ec>)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc6:	4a2f      	ldr	r2, [pc, #188]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df0:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <HAL_GPIO_Init+0x304>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b0f      	cmp	r3, #15
 8002e54:	f67f aea2 	bls.w	8002b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	40020400 	.word	0x40020400
 8002e78:	40020800 	.word	0x40020800
 8002e7c:	40020c00 	.word	0x40020c00
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e12b      	b.n	8003126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe f996 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f20:	f001 f976 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 8002f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a81      	ldr	r2, [pc, #516]	; (8003130 <HAL_I2C_Init+0x274>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d807      	bhi.n	8002f40 <HAL_I2C_Init+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a80      	ldr	r2, [pc, #512]	; (8003134 <HAL_I2C_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e006      	b.n	8002f4e <HAL_I2C_Init+0x92>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a7d      	ldr	r2, [pc, #500]	; (8003138 <HAL_I2C_Init+0x27c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e7      	b.n	8003126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a78      	ldr	r2, [pc, #480]	; (800313c <HAL_I2C_Init+0x280>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9b      	lsrs	r3, r3, #18
 8002f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	; (8003130 <HAL_I2C_Init+0x274>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d802      	bhi.n	8002f90 <HAL_I2C_Init+0xd4>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e009      	b.n	8002fa4 <HAL_I2C_Init+0xe8>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a69      	ldr	r2, [pc, #420]	; (8003140 <HAL_I2C_Init+0x284>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	495c      	ldr	r1, [pc, #368]	; (8003130 <HAL_I2C_Init+0x274>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d819      	bhi.n	8002ff8 <HAL_I2C_Init+0x13c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e59      	subs	r1, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fd8:	400b      	ands	r3, r1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_I2C_Init+0x138>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e59      	subs	r1, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	e051      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e04f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d111      	bne.n	8003024 <HAL_I2C_Init+0x168>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e012      	b.n	800304a <HAL_I2C_Init+0x18e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x196>
 800304e:	2301      	movs	r3, #1
 8003050:	e022      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10e      	bne.n	8003078 <HAL_I2C_Init+0x1bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e58      	subs	r0, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	440b      	add	r3, r1
 8003068:	fbb0 f3f3 	udiv	r3, r0, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	6809      	ldr	r1, [r1, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6911      	ldr	r1, [r2, #16]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	000186a0 	.word	0x000186a0
 8003134:	001e847f 	.word	0x001e847f
 8003138:	003d08ff 	.word	0x003d08ff
 800313c:	431bde83 	.word	0x431bde83
 8003140:	10624dd3 	.word	0x10624dd3

08003144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
 8003154:	4613      	mov	r3, r2
 8003156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7fe f9d8 	bl	800150c <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 80e0 	bne.w	800332c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	4970      	ldr	r1, [pc, #448]	; (8003338 <HAL_I2C_Master_Transmit+0x1f4>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa92 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	e0d3      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2C_Master_Transmit+0x50>
 8003190:	2302      	movs	r3, #2
 8003192:	e0cc      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d007      	beq.n	80031ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2221      	movs	r2, #33	; 0x21
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2210      	movs	r2, #16
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	893a      	ldrh	r2, [r7, #8]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_I2C_Master_Transmit+0x1f8>)
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031fc:	8979      	ldrh	r1, [r7, #10]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f9ca 	bl	800359c <I2C_MasterRequestWrite>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e08d      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003228:	e066      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	6a39      	ldr	r1, [r7, #32]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fb0c 	bl	800384c <I2C_WaitOnTXEFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2b04      	cmp	r3, #4
 8003240:	d107      	bne.n	8003252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e06b      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b04      	cmp	r3, #4
 8003292:	d11b      	bne.n	80032cc <HAL_I2C_Master_Transmit+0x188>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	2b00      	cmp	r3, #0
 800329a:	d017      	beq.n	80032cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	6a39      	ldr	r1, [r7, #32]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fafc 	bl	80038ce <I2C_WaitOnBTFFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d107      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e01a      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d194      	bne.n	800322a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	00100002 	.word	0x00100002
 800333c:	ffff0000 	.word	0xffff0000

08003340 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7fe f8dc 	bl	800150c <HAL_GetTick>
 8003354:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003356:	2301      	movs	r3, #1
 8003358:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	f040 8111 	bne.w	800358a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2319      	movs	r3, #25
 800336e:	2201      	movs	r2, #1
 8003370:	4988      	ldr	r1, [pc, #544]	; (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f994 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	e104      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_I2C_IsDeviceReady+0x50>
 800338c:	2302      	movs	r3, #2
 800338e:	e0fd      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d007      	beq.n	80033b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2224      	movs	r2, #36	; 0x24
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a70      	ldr	r2, [pc, #448]	; (8003598 <HAL_I2C_IsDeviceReady+0x258>)
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f952 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d103      	bne.n	800341a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0b6      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800342c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800342e:	f7fe f86d 	bl	800150c <HAL_GetTick>
 8003432:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003462:	e025      	b.n	80034b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe f852 	bl	800150c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <HAL_I2C_IsDeviceReady+0x13a>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22a0      	movs	r2, #160	; 0xa0
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2ba0      	cmp	r3, #160	; 0xa0
 80034ba:	d005      	beq.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_I2C_IsDeviceReady+0x188>
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0cd      	beq.n	8003464 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d129      	bne.n	8003532 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2319      	movs	r3, #25
 800350a:	2201      	movs	r2, #1
 800350c:	4921      	ldr	r1, [pc, #132]	; (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f8c6 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e036      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e02c      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003540:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800354a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	490f      	ldr	r1, [pc, #60]	; (8003594 <HAL_I2C_IsDeviceReady+0x254>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8a2 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e012      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	f4ff af32 	bcc.w	80033da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00100002 	.word	0x00100002
 8003598:	ffff0000 	.word	0xffff0000

0800359c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	460b      	mov	r3, r1
 80035aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d006      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d003      	beq.n	80035c6 <I2C_MasterRequestWrite+0x2a>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035c4:	d108      	bne.n	80035d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e00b      	b.n	80035f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	2b12      	cmp	r3, #18
 80035de:	d107      	bne.n	80035f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f84f 	bl	80036a0 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d103      	bne.n	8003620 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e035      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362c:	d108      	bne.n	8003640 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	e01b      	b.n	8003678 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	11db      	asrs	r3, r3, #7
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0306 	and.w	r3, r3, #6
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f063 030f 	orn	r3, r3, #15
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	490e      	ldr	r1, [pc, #56]	; (8003698 <I2C_MasterRequestWrite+0xfc>)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f875 	bl	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e010      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4907      	ldr	r1, [pc, #28]	; (800369c <I2C_MasterRequestWrite+0x100>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f865 	bl	800374e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00010008 	.word	0x00010008
 800369c:	00010002 	.word	0x00010002

080036a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	e025      	b.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b8:	d021      	beq.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fd ff27 	bl	800150c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d116      	bne.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e023      	b.n	8003746 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	0c1b      	lsrs	r3, r3, #16
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10d      	bne.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	e00c      	b.n	800373e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	429a      	cmp	r2, r3
 8003742:	d0b6      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800375c:	e051      	b.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376c:	d123      	bne.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003786:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0204 	orr.w	r2, r3, #4
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e046      	b.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037bc:	d021      	beq.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7fd fea5 	bl	800150c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e020      	b.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10c      	bne.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e00b      	b.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	43da      	mvns	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4013      	ands	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d18d      	bne.n	800375e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003858:	e02d      	b.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f878 	bl	8003950 <I2C_IsAcknowledgeFailed>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e02d      	b.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003870:	d021      	beq.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fd fe4b 	bl	800150c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e007      	b.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d1ca      	bne.n	800385a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038da:	e02d      	b.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f837 	bl	8003950 <I2C_IsAcknowledgeFailed>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e02d      	b.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f2:	d021      	beq.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f4:	f7fd fe0a 	bl	800150c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d116      	bne.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d1ca      	bne.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d11b      	bne.n	80039a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003970:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f043 0204 	orr.w	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e267      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d075      	beq.n	8003aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d00c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039da:	4b85      	ldr	r3, [pc, #532]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d112      	bne.n	8003a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e6:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f2:	d10b      	bne.n	8003a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	4b7e      	ldr	r3, [pc, #504]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d05b      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x108>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d157      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e242      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_OscConfig+0x74>
 8003a16:	4b76      	ldr	r3, [pc, #472]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a75      	ldr	r2, [pc, #468]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e01d      	b.n	8003a60 <HAL_RCC_OscConfig+0xb0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x98>
 8003a2e:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6f      	ldr	r2, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6c      	ldr	r2, [pc, #432]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0xb0>
 8003a48:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a65      	ldr	r2, [pc, #404]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fd fd50 	bl	800150c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fd fd4c 	bl	800150c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e207      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0xc0>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fd3c 	bl	800150c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd fd38 	bl	800150c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1f3      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	4b51      	ldr	r3, [pc, #324]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0xe8>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d063      	beq.n	8003b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ade:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x152>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1c7      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4937      	ldr	r1, [pc, #220]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	e03a      	b.n	8003b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b20:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <HAL_RCC_OscConfig+0x244>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fd fcf1 	bl	800150c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fd fced 	bl	800150c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1a8      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4925      	ldr	r1, [pc, #148]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	e015      	b.n	8003b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_OscConfig+0x244>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fd fcd0 	bl	800150c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b70:	f7fd fccc 	bl	800150c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e187      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d036      	beq.n	8003c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_RCC_OscConfig+0x248>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fcb0 	bl	800150c <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fd fcac 	bl	800150c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e167      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x200>
 8003bce:	e01b      	b.n	8003c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCC_OscConfig+0x248>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fc99 	bl	800150c <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bde:	f7fd fc95 	bl	800150c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d907      	bls.n	8003bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e150      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470000 	.word	0x42470000
 8003bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ea      	bne.n	8003bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8097 	beq.w	8003d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1a:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	4b7d      	ldr	r3, [pc, #500]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6413      	str	r3, [r2, #64]	; 0x40
 8003c36:	4b7a      	ldr	r3, [pc, #488]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b77      	ldr	r3, [pc, #476]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d118      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c52:	4b74      	ldr	r3, [pc, #464]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a73      	ldr	r2, [pc, #460]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5e:	f7fd fc55 	bl	800150c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c66:	f7fd fc51 	bl	800150c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e10c      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_OscConfig+0x474>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCC_OscConfig+0x2ea>
 8003c8c:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a63      	ldr	r2, [pc, #396]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	e01c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x324>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x30c>
 8003ca2:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a5e      	ldr	r2, [pc, #376]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
 8003cae:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a5b      	ldr	r2, [pc, #364]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x324>
 8003cbc:	4b58      	ldr	r3, [pc, #352]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a57      	ldr	r2, [pc, #348]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc8:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	4a54      	ldr	r2, [pc, #336]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cce:	f023 0304 	bic.w	r3, r3, #4
 8003cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd fc16 	bl	800150c <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fc12 	bl	800150c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0cb      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfa:	4b49      	ldr	r3, [pc, #292]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ee      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x334>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7fd fc00 	bl	800150c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fd fbfc 	bl	800150c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0b5      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ee      	bne.n	8003d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d38:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a1 	beq.w	8003e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4e:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d05c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d141      	bne.n	8003de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_RCC_OscConfig+0x478>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd fbd0 	bl	800150c <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd fbcc 	bl	800150c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e087      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	3b01      	subs	r3, #1
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	491b      	ldr	r1, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x478>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fba5 	bl	800150c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fd fba1 	bl	800150c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e05c      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x416>
 8003de4:	e054      	b.n	8003e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_RCC_OscConfig+0x478>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fd fb8e 	bl	800150c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd fb8a 	bl	800150c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e045      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCC_OscConfig+0x470>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x444>
 8003e12:	e03d      	b.n	8003e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e038      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40007000 	.word	0x40007000
 8003e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x4ec>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d028      	beq.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d121      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d11a      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d111      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	3b01      	subs	r3, #1
 8003e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800

08003ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0cc      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b68      	ldr	r3, [pc, #416]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d90c      	bls.n	8003edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b65      	ldr	r3, [pc, #404]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b63      	ldr	r3, [pc, #396]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0b8      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f0c:	4b53      	ldr	r3, [pc, #332]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a52      	ldr	r2, [pc, #328]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b50      	ldr	r3, [pc, #320]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	494d      	ldr	r1, [pc, #308]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d044      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d119      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e07f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b3f      	ldr	r3, [pc, #252]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e067      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f90:	f7fd fabc 	bl	800150c <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fd fab8 	bl	800150c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e04f      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 020c 	and.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1eb      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d20c      	bcs.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e032      	b.n	800404e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4916      	ldr	r1, [pc, #88]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004012:	4b12      	ldr	r3, [pc, #72]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	490e      	ldr	r1, [pc, #56]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004026:	f000 f821 	bl	800406c <HAL_RCC_GetSysClockFreq>
 800402a:	4602      	mov	r2, r0
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	490a      	ldr	r1, [pc, #40]	; (8004060 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004042:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd f92c 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023c00 	.word	0x40023c00
 800405c:	40023800 	.word	0x40023800
 8004060:	08008894 	.word	0x08008894
 8004064:	20002008 	.word	0x20002008
 8004068:	2000200c 	.word	0x2000200c

0800406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800406c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004070:	b090      	sub	sp, #64	; 0x40
 8004072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	637b      	str	r3, [r7, #52]	; 0x34
 8004078:	2300      	movs	r3, #0
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407c:	2300      	movs	r3, #0
 800407e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004084:	4b59      	ldr	r3, [pc, #356]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d00d      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x40>
 8004090:	2b08      	cmp	r3, #8
 8004092:	f200 80a1 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x34>
 800409a:	2b04      	cmp	r3, #4
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800409e:	e09b      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80040a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040a4:	e09b      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a6:	4b53      	ldr	r3, [pc, #332]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040aa:	e098      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ac:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b6:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d028      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	2200      	movs	r2, #0
 80040ca:	623b      	str	r3, [r7, #32]
 80040cc:	627a      	str	r2, [r7, #36]	; 0x24
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040d4:	2100      	movs	r1, #0
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040d8:	fb03 f201 	mul.w	r2, r3, r1
 80040dc:	2300      	movs	r3, #0
 80040de:	fb00 f303 	mul.w	r3, r0, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	4a43      	ldr	r2, [pc, #268]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040e6:	fba0 1202 	umull	r1, r2, r0, r2
 80040ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ec:	460a      	mov	r2, r1
 80040ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80040f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f2:	4413      	add	r3, r2
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	2200      	movs	r2, #0
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	61fa      	str	r2, [r7, #28]
 80040fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004102:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004106:	f7fc f8bb 	bl	8000280 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4613      	mov	r3, r2
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004112:	e053      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004114:	4b35      	ldr	r3, [pc, #212]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	2200      	movs	r2, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	617a      	str	r2, [r7, #20]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004126:	f04f 0b00 	mov.w	fp, #0
 800412a:	4652      	mov	r2, sl
 800412c:	465b      	mov	r3, fp
 800412e:	f04f 0000 	mov.w	r0, #0
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	0159      	lsls	r1, r3, #5
 8004138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800413c:	0150      	lsls	r0, r2, #5
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	ebb2 080a 	subs.w	r8, r2, sl
 8004146:	eb63 090b 	sbc.w	r9, r3, fp
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004156:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800415a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800415e:	ebb2 0408 	subs.w	r4, r2, r8
 8004162:	eb63 0509 	sbc.w	r5, r3, r9
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	00eb      	lsls	r3, r5, #3
 8004170:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004174:	00e2      	lsls	r2, r4, #3
 8004176:	4614      	mov	r4, r2
 8004178:	461d      	mov	r5, r3
 800417a:	eb14 030a 	adds.w	r3, r4, sl
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	eb45 030b 	adc.w	r3, r5, fp
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004192:	4629      	mov	r1, r5
 8004194:	028b      	lsls	r3, r1, #10
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800419c:	4621      	mov	r1, r4
 800419e:	028a      	lsls	r2, r1, #10
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	2200      	movs	r2, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	60fa      	str	r2, [r7, #12]
 80041ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b0:	f7fc f866 	bl	8000280 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_GetSysClockFreq+0x180>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3740      	adds	r7, #64	; 0x40
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	017d7840 	.word	0x017d7840

080041f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_RCC_GetHCLKFreq+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20002008 	.word	0x20002008

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004214:	f7ff fff0 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	080088a4 	.word	0x080088a4

08004238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800423c:	f7ff ffdc 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0b5b      	lsrs	r3, r3, #13
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <HAL_RCC_GetPCLK2Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	080088a4 	.word	0x080088a4

08004260 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	220f      	movs	r2, #15
 800426e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0203 	and.w	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <HAL_RCC_GetClockConfig+0x60>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0207 	and.w	r2, r3, #7
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40023c00 	.word	0x40023c00

080042c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e041      	b.n	800435a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f839 	bl	8004362 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f000 f9ca 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e044      	b.n	800441a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_TIM_Base_Start_IT+0xb0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d013      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_TIM_Base_Start_IT+0xb4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_TIM_Base_Start_IT+0xb8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_TIM_Base_Start_IT+0xbc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_TIM_Base_Start_IT+0xc0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d111      	bne.n	8004408 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d010      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	e007      	b.n	8004418 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40014000 	.word	0x40014000

0800443c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d122      	bne.n	8004498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d11b      	bne.n	8004498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0202 	mvn.w	r2, #2
 8004468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8ee 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8e0 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8f1 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0204 	mvn.w	r2, #4
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8c4 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8b6 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8c7 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0208 	mvn.w	r2, #8
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2204      	movs	r2, #4
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f89a 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f88c 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f89d 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b10      	cmp	r3, #16
 800454c:	d122      	bne.n	8004594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d11b      	bne.n	8004594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0210 	mvn.w	r2, #16
 8004564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2208      	movs	r2, #8
 800456a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f870 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f862 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f873 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10e      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d107      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0201 	mvn.w	r2, #1
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc faa6 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d10e      	bne.n	80045ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d107      	bne.n	80045ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8e2 	bl	80047b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f838 	bl	8004688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b20      	cmp	r3, #32
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0220 	mvn.w	r2, #32
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8ac 	bl	800479c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a34      	ldr	r2, [pc, #208]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00f      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d00b      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a31      	ldr	r2, [pc, #196]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a30      	ldr	r2, [pc, #192]	; (8004788 <TIM_Base_SetConfig+0xec>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2f      	ldr	r2, [pc, #188]	; (800478c <TIM_Base_SetConfig+0xf0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a25      	ldr	r2, [pc, #148]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <TIM_Base_SetConfig+0xec>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <TIM_Base_SetConfig+0xf0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <TIM_Base_SetConfig+0xf4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <TIM_Base_SetConfig+0xf8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <TIM_Base_SetConfig+0xfc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	615a      	str	r2, [r3, #20]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047d6:	2b84      	cmp	r3, #132	; 0x84
 80047d8:	d005      	beq.n	80047e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	3303      	adds	r3, #3
 80047e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047f8:	f000 faf6 	bl	8004de8 <vTaskStartScheduler>
  
  return osOK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	bd80      	pop	{r7, pc}

08004802 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004804:	b089      	sub	sp, #36	; 0x24
 8004806:	af04      	add	r7, sp, #16
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <osThreadCreate+0x54>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01c      	beq.n	8004856 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685c      	ldr	r4, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691e      	ldr	r6, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff ffc8 	bl	80047c4 <makeFreeRtosPriority>
 8004834:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800483e:	9202      	str	r2, [sp, #8]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	9100      	str	r1, [sp, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	4632      	mov	r2, r6
 8004848:	4629      	mov	r1, r5
 800484a:	4620      	mov	r0, r4
 800484c:	f000 f8ed 	bl	8004a2a <xTaskCreateStatic>
 8004850:	4603      	mov	r3, r0
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e01c      	b.n	8004890 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685c      	ldr	r4, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004862:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff ffaa 	bl	80047c4 <makeFreeRtosPriority>
 8004870:	4602      	mov	r2, r0
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	9200      	str	r2, [sp, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4632      	mov	r2, r6
 800487e:	4629      	mov	r1, r5
 8004880:	4620      	mov	r0, r4
 8004882:	f000 f92f 	bl	8004ae4 <xTaskCreate>
 8004886:	4603      	mov	r3, r0
 8004888:	2b01      	cmp	r3, #1
 800488a:	d001      	beq.n	8004890 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	e000      	b.n	8004892 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004890:	68fb      	ldr	r3, [r7, #12]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800489a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <osDelay+0x16>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	e000      	b.n	80048b2 <osDelay+0x18>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fa64 	bl	8004d80 <vTaskDelay>
  
  return osOK;
 80048b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f103 0208 	add.w	r2, r3, #8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f103 0208 	add.w	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f103 0208 	add.w	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800497a:	d103      	bne.n	8004984 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e00c      	b.n	800499e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3308      	adds	r3, #8
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e002      	b.n	8004992 <vListInsert+0x2e>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d2f6      	bcs.n	800498c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6892      	ldr	r2, [r2, #8]
 80049ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6852      	ldr	r2, [r2, #4]
 80049f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d103      	bne.n	8004a0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b08e      	sub	sp, #56	; 0x38
 8004a2e:	af04      	add	r7, sp, #16
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	61fb      	str	r3, [r7, #28]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a70:	23a0      	movs	r3, #160	; 0xa0
 8004a72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2ba0      	cmp	r3, #160	; 0xa0
 8004a78:	d00a      	beq.n	8004a90 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61bb      	str	r3, [r7, #24]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01e      	beq.n	8004ad6 <xTaskCreateStatic+0xac>
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01b      	beq.n	8004ad6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9303      	str	r3, [sp, #12]
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	9302      	str	r3, [sp, #8]
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f851 	bl	8004b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ad0:	f000 f8ec 	bl	8004cac <prvAddNewTaskToReadyList>
 8004ad4:	e001      	b.n	8004ada <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ada:	697b      	ldr	r3, [r7, #20]
	}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3728      	adds	r7, #40	; 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	; 0x30
 8004ae8:	af04      	add	r7, sp, #16
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fef5 	bl	80058e8 <pvPortMalloc>
 8004afe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00e      	beq.n	8004b24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b06:	20a0      	movs	r0, #160	; 0xa0
 8004b08:	f000 feee 	bl	80058e8 <pvPortMalloc>
 8004b0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
 8004b1a:	e005      	b.n	8004b28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b1c:	6978      	ldr	r0, [r7, #20]
 8004b1e:	f000 ffaf 	bl	8005a80 <vPortFree>
 8004b22:	e001      	b.n	8004b28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d017      	beq.n	8004b5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9303      	str	r3, [sp, #12]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	9302      	str	r3, [sp, #8]
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f80f 	bl	8004b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b52:	69f8      	ldr	r0, [r7, #28]
 8004b54:	f000 f8aa 	bl	8004cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e002      	b.n	8004b64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b64:	69bb      	ldr	r3, [r7, #24]
	}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f023 0307 	bic.w	r3, r3, #7
 8004b96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	617b      	str	r3, [r7, #20]
}
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01f      	beq.n	8004bfe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	e012      	b.n	8004bea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	7819      	ldrb	r1, [r3, #0]
 8004bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3334      	adds	r3, #52	; 0x34
 8004bd4:	460a      	mov	r2, r1
 8004bd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2b0f      	cmp	r3, #15
 8004bee:	d9e9      	bls.n	8004bc4 <prvInitialiseNewTask+0x54>
 8004bf0:	e000      	b.n	8004bf4 <prvInitialiseNewTask+0x84>
			{
				break;
 8004bf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bfc:	e003      	b.n	8004c06 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	2b06      	cmp	r3, #6
 8004c0a:	d901      	bls.n	8004c10 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c0c:	2306      	movs	r3, #6
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	2200      	movs	r2, #0
 8004c20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	3304      	adds	r3, #4
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fe6b 	bl	8004902 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	3318      	adds	r3, #24
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fe66 	bl	8004902 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	f1c3 0207 	rsb	r2, r3, #7
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	334c      	adds	r3, #76	; 0x4c
 8004c60:	224c      	movs	r2, #76	; 0x4c
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f002 fa23 	bl	80070b0 <memset>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <prvInitialiseNewTask+0x130>)
 8004c6e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <prvInitialiseNewTask+0x134>)
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <prvInitialiseNewTask+0x138>)
 8004c7a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	69b8      	ldr	r0, [r7, #24]
 8004c82:	f000 fc1f 	bl	80054c4 <pxPortInitialiseStack>
 8004c86:	4602      	mov	r2, r0
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c98:	bf00      	nop
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	2000e5d0 	.word	0x2000e5d0
 8004ca4:	2000e638 	.word	0x2000e638
 8004ca8:	2000e6a0 	.word	0x2000e6a0

08004cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cb4:	f000 fd36 	bl	8005724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cb8:	4b2a      	ldr	r3, [pc, #168]	; (8004d64 <prvAddNewTaskToReadyList+0xb8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <prvAddNewTaskToReadyList+0xb8>)
 8004cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cc2:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <prvAddNewTaskToReadyList+0xbc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cca:	4a27      	ldr	r2, [pc, #156]	; (8004d68 <prvAddNewTaskToReadyList+0xbc>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cd0:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <prvAddNewTaskToReadyList+0xb8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d110      	bne.n	8004cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cd8:	f000 facc 	bl	8005274 <prvInitialiseTaskLists>
 8004cdc:	e00d      	b.n	8004cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cde:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <prvAddNewTaskToReadyList+0xc0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <prvAddNewTaskToReadyList+0xbc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d802      	bhi.n	8004cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	; (8004d68 <prvAddNewTaskToReadyList+0xbc>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <prvAddNewTaskToReadyList+0xc4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <prvAddNewTaskToReadyList+0xc4>)
 8004d02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	2201      	movs	r2, #1
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <prvAddNewTaskToReadyList+0xc8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <prvAddNewTaskToReadyList+0xc8>)
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <prvAddNewTaskToReadyList+0xcc>)
 8004d24:	441a      	add	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f7ff fdf5 	bl	800491c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d32:	f000 fd27 	bl	8005784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <prvAddNewTaskToReadyList+0xc0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00e      	beq.n	8004d5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <prvAddNewTaskToReadyList+0xbc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d207      	bcs.n	8004d5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <prvAddNewTaskToReadyList+0xd0>)
 8004d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	2000a97c 	.word	0x2000a97c
 8004d68:	2000a87c 	.word	0x2000a87c
 8004d6c:	2000a988 	.word	0x2000a988
 8004d70:	2000a998 	.word	0x2000a998
 8004d74:	2000a984 	.word	0x2000a984
 8004d78:	2000a880 	.word	0x2000a880
 8004d7c:	e000ed04 	.word	0xe000ed04

08004d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <vTaskDelay+0x60>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <vTaskDelay+0x30>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60bb      	str	r3, [r7, #8]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004db0:	f000 f884 	bl	8004ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004db4:	2100      	movs	r1, #0
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fb1e 	bl	80053f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dbc:	f000 f88c 	bl	8004ed8 <xTaskResumeAll>
 8004dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <vTaskDelay+0x64>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	2000a9a4 	.word	0x2000a9a4
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004df6:	463a      	mov	r2, r7
 8004df8:	1d39      	adds	r1, r7, #4
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb fbbc 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	9202      	str	r2, [sp, #8]
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2300      	movs	r3, #0
 8004e14:	460a      	mov	r2, r1
 8004e16:	4921      	ldr	r1, [pc, #132]	; (8004e9c <vTaskStartScheduler+0xb4>)
 8004e18:	4821      	ldr	r0, [pc, #132]	; (8004ea0 <vTaskStartScheduler+0xb8>)
 8004e1a:	f7ff fe06 	bl	8004a2a <xTaskCreateStatic>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4a20      	ldr	r2, [pc, #128]	; (8004ea4 <vTaskStartScheduler+0xbc>)
 8004e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e24:	4b1f      	ldr	r3, [pc, #124]	; (8004ea4 <vTaskStartScheduler+0xbc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e001      	b.n	8004e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d11b      	bne.n	8004e74 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	613b      	str	r3, [r7, #16]
}
 8004e4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e50:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <vTaskStartScheduler+0xc0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	334c      	adds	r3, #76	; 0x4c
 8004e56:	4a15      	ldr	r2, [pc, #84]	; (8004eac <vTaskStartScheduler+0xc4>)
 8004e58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <vTaskStartScheduler+0xc8>)
 8004e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <vTaskStartScheduler+0xcc>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <vTaskStartScheduler+0xd0>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e6e:	f000 fbb7 	bl	80055e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e72:	e00e      	b.n	8004e92 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e7a:	d10a      	bne.n	8004e92 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60fb      	str	r3, [r7, #12]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <vTaskStartScheduler+0xa8>
}
 8004e92:	bf00      	nop
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	08007b30 	.word	0x08007b30
 8004ea0:	08005245 	.word	0x08005245
 8004ea4:	2000a9a0 	.word	0x2000a9a0
 8004ea8:	2000a87c 	.word	0x2000a87c
 8004eac:	20002064 	.word	0x20002064
 8004eb0:	2000a99c 	.word	0x2000a99c
 8004eb4:	2000a988 	.word	0x2000a988
 8004eb8:	2000a980 	.word	0x2000a980

08004ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <vTaskSuspendAll+0x18>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	4a03      	ldr	r2, [pc, #12]	; (8004ed4 <vTaskSuspendAll+0x18>)
 8004ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	2000a9a4 	.word	0x2000a9a4

08004ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ee6:	4b41      	ldr	r3, [pc, #260]	; (8004fec <xTaskResumeAll+0x114>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	603b      	str	r3, [r7, #0]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f04:	f000 fc0e 	bl	8005724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f08:	4b38      	ldr	r3, [pc, #224]	; (8004fec <xTaskResumeAll+0x114>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	4a37      	ldr	r2, [pc, #220]	; (8004fec <xTaskResumeAll+0x114>)
 8004f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f12:	4b36      	ldr	r3, [pc, #216]	; (8004fec <xTaskResumeAll+0x114>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d161      	bne.n	8004fde <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f1a:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <xTaskResumeAll+0x118>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d05d      	beq.n	8004fde <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f22:	e02e      	b.n	8004f82 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	4b33      	ldr	r3, [pc, #204]	; (8004ff4 <xTaskResumeAll+0x11c>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3318      	adds	r3, #24
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff fd50 	bl	80049d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fd4b 	bl	80049d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	2201      	movs	r2, #1
 8004f46:	409a      	lsls	r2, r3
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <xTaskResumeAll+0x120>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	4a2a      	ldr	r2, [pc, #168]	; (8004ff8 <xTaskResumeAll+0x120>)
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <xTaskResumeAll+0x124>)
 8004f60:	441a      	add	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7ff fcd7 	bl	800491c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f72:	4b23      	ldr	r3, [pc, #140]	; (8005000 <xTaskResumeAll+0x128>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d302      	bcc.n	8004f82 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f7c:	4b21      	ldr	r3, [pc, #132]	; (8005004 <xTaskResumeAll+0x12c>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <xTaskResumeAll+0x11c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1cc      	bne.n	8004f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f90:	f000 fa12 	bl	80053b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f94:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <xTaskResumeAll+0x130>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d010      	beq.n	8004fc2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fa0:	f000 f836 	bl	8005010 <xTaskIncrementTick>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004faa:	4b16      	ldr	r3, [pc, #88]	; (8005004 <xTaskResumeAll+0x12c>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f1      	bne.n	8004fa0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004fbc:	4b12      	ldr	r3, [pc, #72]	; (8005008 <xTaskResumeAll+0x130>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <xTaskResumeAll+0x12c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <xTaskResumeAll+0x134>)
 8004fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fde:	f000 fbd1 	bl	8005784 <vPortExitCritical>

	return xAlreadyYielded;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	2000a9a4 	.word	0x2000a9a4
 8004ff0:	2000a97c 	.word	0x2000a97c
 8004ff4:	2000a93c 	.word	0x2000a93c
 8004ff8:	2000a984 	.word	0x2000a984
 8004ffc:	2000a880 	.word	0x2000a880
 8005000:	2000a87c 	.word	0x2000a87c
 8005004:	2000a990 	.word	0x2000a990
 8005008:	2000a98c 	.word	0x2000a98c
 800500c:	e000ed04 	.word	0xe000ed04

08005010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800501a:	4b4e      	ldr	r3, [pc, #312]	; (8005154 <xTaskIncrementTick+0x144>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f040 808e 	bne.w	8005140 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005024:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <xTaskIncrementTick+0x148>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800502c:	4a4a      	ldr	r2, [pc, #296]	; (8005158 <xTaskIncrementTick+0x148>)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d120      	bne.n	800507a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005038:	4b48      	ldr	r3, [pc, #288]	; (800515c <xTaskIncrementTick+0x14c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <xTaskIncrementTick+0x48>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	603b      	str	r3, [r7, #0]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <xTaskIncrementTick+0x46>
 8005058:	4b40      	ldr	r3, [pc, #256]	; (800515c <xTaskIncrementTick+0x14c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	4b40      	ldr	r3, [pc, #256]	; (8005160 <xTaskIncrementTick+0x150>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a3e      	ldr	r2, [pc, #248]	; (800515c <xTaskIncrementTick+0x14c>)
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	4a3e      	ldr	r2, [pc, #248]	; (8005160 <xTaskIncrementTick+0x150>)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <xTaskIncrementTick+0x154>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <xTaskIncrementTick+0x154>)
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	f000 f99f 	bl	80053b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <xTaskIncrementTick+0x158>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	429a      	cmp	r2, r3
 8005082:	d348      	bcc.n	8005116 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005084:	4b35      	ldr	r3, [pc, #212]	; (800515c <xTaskIncrementTick+0x14c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508e:	4b36      	ldr	r3, [pc, #216]	; (8005168 <xTaskIncrementTick+0x158>)
 8005090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005094:	601a      	str	r2, [r3, #0]
					break;
 8005096:	e03e      	b.n	8005116 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005098:	4b30      	ldr	r3, [pc, #192]	; (800515c <xTaskIncrementTick+0x14c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d203      	bcs.n	80050b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050b0:	4a2d      	ldr	r2, [pc, #180]	; (8005168 <xTaskIncrementTick+0x158>)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050b6:	e02e      	b.n	8005116 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fc8a 	bl	80049d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3318      	adds	r3, #24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fc81 	bl	80049d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	2201      	movs	r2, #1
 80050da:	409a      	lsls	r2, r3
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <xTaskIncrementTick+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	4a22      	ldr	r2, [pc, #136]	; (800516c <xTaskIncrementTick+0x15c>)
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <xTaskIncrementTick+0x160>)
 80050f4:	441a      	add	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7ff fc0d 	bl	800491c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <xTaskIncrementTick+0x164>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	429a      	cmp	r2, r3
 800510e:	d3b9      	bcc.n	8005084 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005114:	e7b6      	b.n	8005084 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <xTaskIncrementTick+0x164>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4914      	ldr	r1, [pc, #80]	; (8005170 <xTaskIncrementTick+0x160>)
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d901      	bls.n	8005132 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005132:	4b11      	ldr	r3, [pc, #68]	; (8005178 <xTaskIncrementTick+0x168>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800513a:	2301      	movs	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e004      	b.n	800514a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <xTaskIncrementTick+0x16c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	4a0d      	ldr	r2, [pc, #52]	; (800517c <xTaskIncrementTick+0x16c>)
 8005148:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800514a:	697b      	ldr	r3, [r7, #20]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2000a9a4 	.word	0x2000a9a4
 8005158:	2000a980 	.word	0x2000a980
 800515c:	2000a934 	.word	0x2000a934
 8005160:	2000a938 	.word	0x2000a938
 8005164:	2000a994 	.word	0x2000a994
 8005168:	2000a99c 	.word	0x2000a99c
 800516c:	2000a984 	.word	0x2000a984
 8005170:	2000a880 	.word	0x2000a880
 8005174:	2000a87c 	.word	0x2000a87c
 8005178:	2000a990 	.word	0x2000a990
 800517c:	2000a98c 	.word	0x2000a98c

08005180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005186:	4b29      	ldr	r3, [pc, #164]	; (800522c <vTaskSwitchContext+0xac>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800518e:	4b28      	ldr	r3, [pc, #160]	; (8005230 <vTaskSwitchContext+0xb0>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005194:	e044      	b.n	8005220 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005196:	4b26      	ldr	r3, [pc, #152]	; (8005230 <vTaskSwitchContext+0xb0>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519c:	4b25      	ldr	r3, [pc, #148]	; (8005234 <vTaskSwitchContext+0xb4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	fab3 f383 	clz	r3, r3
 80051a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	f1c3 031f 	rsb	r3, r3, #31
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	4921      	ldr	r1, [pc, #132]	; (8005238 <vTaskSwitchContext+0xb8>)
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <vTaskSwitchContext+0x5c>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	607b      	str	r3, [r7, #4]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <vTaskSwitchContext+0x5a>
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <vTaskSwitchContext+0xb8>)
 80051e8:	4413      	add	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3308      	adds	r3, #8
 80051fe:	429a      	cmp	r2, r3
 8005200:	d104      	bne.n	800520c <vTaskSwitchContext+0x8c>
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	605a      	str	r2, [r3, #4]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <vTaskSwitchContext+0xbc>)
 8005214:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <vTaskSwitchContext+0xbc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	334c      	adds	r3, #76	; 0x4c
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <vTaskSwitchContext+0xc0>)
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	bf00      	nop
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	2000a9a4 	.word	0x2000a9a4
 8005230:	2000a990 	.word	0x2000a990
 8005234:	2000a984 	.word	0x2000a984
 8005238:	2000a880 	.word	0x2000a880
 800523c:	2000a87c 	.word	0x2000a87c
 8005240:	20002064 	.word	0x20002064

08005244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800524c:	f000 f852 	bl	80052f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <prvIdleTask+0x28>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d9f9      	bls.n	800524c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <prvIdleTask+0x2c>)
 800525a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005268:	e7f0      	b.n	800524c <prvIdleTask+0x8>
 800526a:	bf00      	nop
 800526c:	2000a880 	.word	0x2000a880
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]
 800527e:	e00c      	b.n	800529a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <prvInitialiseTaskLists+0x60>)
 800528c:	4413      	add	r3, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fb17 	bl	80048c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b06      	cmp	r3, #6
 800529e:	d9ef      	bls.n	8005280 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052a0:	480d      	ldr	r0, [pc, #52]	; (80052d8 <prvInitialiseTaskLists+0x64>)
 80052a2:	f7ff fb0e 	bl	80048c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052a6:	480d      	ldr	r0, [pc, #52]	; (80052dc <prvInitialiseTaskLists+0x68>)
 80052a8:	f7ff fb0b 	bl	80048c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052ac:	480c      	ldr	r0, [pc, #48]	; (80052e0 <prvInitialiseTaskLists+0x6c>)
 80052ae:	f7ff fb08 	bl	80048c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052b2:	480c      	ldr	r0, [pc, #48]	; (80052e4 <prvInitialiseTaskLists+0x70>)
 80052b4:	f7ff fb05 	bl	80048c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052b8:	480b      	ldr	r0, [pc, #44]	; (80052e8 <prvInitialiseTaskLists+0x74>)
 80052ba:	f7ff fb02 	bl	80048c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <prvInitialiseTaskLists+0x78>)
 80052c0:	4a05      	ldr	r2, [pc, #20]	; (80052d8 <prvInitialiseTaskLists+0x64>)
 80052c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <prvInitialiseTaskLists+0x7c>)
 80052c6:	4a05      	ldr	r2, [pc, #20]	; (80052dc <prvInitialiseTaskLists+0x68>)
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	2000a880 	.word	0x2000a880
 80052d8:	2000a90c 	.word	0x2000a90c
 80052dc:	2000a920 	.word	0x2000a920
 80052e0:	2000a93c 	.word	0x2000a93c
 80052e4:	2000a950 	.word	0x2000a950
 80052e8:	2000a968 	.word	0x2000a968
 80052ec:	2000a934 	.word	0x2000a934
 80052f0:	2000a938 	.word	0x2000a938

080052f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052fa:	e019      	b.n	8005330 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052fc:	f000 fa12 	bl	8005724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005300:	4b10      	ldr	r3, [pc, #64]	; (8005344 <prvCheckTasksWaitingTermination+0x50>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3304      	adds	r3, #4
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fb62 	bl	80049d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005312:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <prvCheckTasksWaitingTermination+0x54>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	4a0b      	ldr	r2, [pc, #44]	; (8005348 <prvCheckTasksWaitingTermination+0x54>)
 800531a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <prvCheckTasksWaitingTermination+0x58>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3b01      	subs	r3, #1
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <prvCheckTasksWaitingTermination+0x58>)
 8005324:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005326:	f000 fa2d 	bl	8005784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f810 	bl	8005350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <prvCheckTasksWaitingTermination+0x58>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e1      	bne.n	80052fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	2000a950 	.word	0x2000a950
 8005348:	2000a97c 	.word	0x2000a97c
 800534c:	2000a964 	.word	0x2000a964

08005350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	334c      	adds	r3, #76	; 0x4c
 800535c:	4618      	mov	r0, r3
 800535e:	f001 feaf 	bl	80070c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fb85 	bl	8005a80 <vPortFree>
				vPortFree( pxTCB );
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb82 	bl	8005a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800537c:	e018      	b.n	80053b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005384:	2b01      	cmp	r3, #1
 8005386:	d103      	bne.n	8005390 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fb79 	bl	8005a80 <vPortFree>
	}
 800538e:	e00f      	b.n	80053b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005396:	2b02      	cmp	r3, #2
 8005398:	d00a      	beq.n	80053b0 <prvDeleteTCB+0x60>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60fb      	str	r3, [r7, #12]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <prvDeleteTCB+0x5e>
	}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <prvResetNextTaskUnblockTime+0x38>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d104      	bne.n	80053d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <prvResetNextTaskUnblockTime+0x3c>)
 80053ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053d0:	e008      	b.n	80053e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <prvResetNextTaskUnblockTime+0x38>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <prvResetNextTaskUnblockTime+0x3c>)
 80053e2:	6013      	str	r3, [r2, #0]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	2000a934 	.word	0x2000a934
 80053f4:	2000a99c 	.word	0x2000a99c

080053f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005402:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005408:	4b28      	ldr	r3, [pc, #160]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3304      	adds	r3, #4
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fae1 	bl	80049d6 <uxListRemove>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	2201      	movs	r2, #1
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43da      	mvns	r2, r3
 8005428:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4013      	ands	r3, r2
 800542e:	4a20      	ldr	r2, [pc, #128]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005438:	d10a      	bne.n	8005450 <prvAddCurrentTaskToDelayedList+0x58>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005440:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	481a      	ldr	r0, [pc, #104]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800544a:	f7ff fa67 	bl	800491c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800544e:	e026      	b.n	800549e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	429a      	cmp	r2, r3
 8005466:	d209      	bcs.n	800547c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005468:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3304      	adds	r3, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7ff fa75 	bl	8004964 <vListInsert>
}
 800547a:	e010      	b.n	800549e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7ff fa6b 	bl	8004964 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	d202      	bcs.n	800549e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005498:	4a09      	ldr	r2, [pc, #36]	; (80054c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	6013      	str	r3, [r2, #0]
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2000a980 	.word	0x2000a980
 80054ac:	2000a87c 	.word	0x2000a87c
 80054b0:	2000a984 	.word	0x2000a984
 80054b4:	2000a968 	.word	0x2000a968
 80054b8:	2000a938 	.word	0x2000a938
 80054bc:	2000a934 	.word	0x2000a934
 80054c0:	2000a99c 	.word	0x2000a99c

080054c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3b04      	subs	r3, #4
 80054d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b04      	subs	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b04      	subs	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054f4:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <pxPortInitialiseStack+0x64>)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b14      	subs	r3, #20
 80054fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3b04      	subs	r3, #4
 800550a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f06f 0202 	mvn.w	r2, #2
 8005512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b20      	subs	r3, #32
 8005518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	0800552d 	.word	0x0800552d

0800552c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <prvTaskExitError+0x54>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553e:	d00a      	beq.n	8005556 <prvTaskExitError+0x2a>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	60fb      	str	r3, [r7, #12]
}
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <prvTaskExitError+0x28>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	60bb      	str	r3, [r7, #8]
}
 8005568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800556a:	bf00      	nop
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0fc      	beq.n	800556c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20002014 	.word	0x20002014
	...

08005590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <pxCurrentTCBConst2>)
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f380 8809 	msr	PSP, r0
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f04f 0000 	mov.w	r0, #0
 80055a6:	f380 8811 	msr	BASEPRI, r0
 80055aa:	4770      	bx	lr
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst2>:
 80055b0:	2000a87c 	.word	0x2000a87c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055b8:	4808      	ldr	r0, [pc, #32]	; (80055dc <prvPortStartFirstTask+0x24>)
 80055ba:	6800      	ldr	r0, [r0, #0]
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f380 8808 	msr	MSP, r0
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f380 8814 	msr	CONTROL, r0
 80055ca:	b662      	cpsie	i
 80055cc:	b661      	cpsie	f
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	df00      	svc	0
 80055d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055da:	bf00      	nop
 80055dc:	e000ed08 	.word	0xe000ed08

080055e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055e6:	4b46      	ldr	r3, [pc, #280]	; (8005700 <xPortStartScheduler+0x120>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a46      	ldr	r2, [pc, #280]	; (8005704 <xPortStartScheduler+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10a      	bne.n	8005606 <xPortStartScheduler+0x26>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005606:	4b3e      	ldr	r3, [pc, #248]	; (8005700 <xPortStartScheduler+0x120>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3f      	ldr	r2, [pc, #252]	; (8005708 <xPortStartScheduler+0x128>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d10a      	bne.n	8005626 <xPortStartScheduler+0x46>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005626:	4b39      	ldr	r3, [pc, #228]	; (800570c <xPortStartScheduler+0x12c>)
 8005628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4b31      	ldr	r3, [pc, #196]	; (8005710 <xPortStartScheduler+0x130>)
 800564c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800564e:	4b31      	ldr	r3, [pc, #196]	; (8005714 <xPortStartScheduler+0x134>)
 8005650:	2207      	movs	r2, #7
 8005652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005654:	e009      	b.n	800566a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005656:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <xPortStartScheduler+0x134>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	4a2d      	ldr	r2, [pc, #180]	; (8005714 <xPortStartScheduler+0x134>)
 800565e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	b2db      	uxtb	r3, r3
 8005668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d0ef      	beq.n	8005656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <xPortStartScheduler+0x134>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1c3 0307 	rsb	r3, r3, #7
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00a      	beq.n	8005698 <xPortStartScheduler+0xb8>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005698:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <xPortStartScheduler+0x134>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <xPortStartScheduler+0x134>)
 80056a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056a2:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <xPortStartScheduler+0x134>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056aa:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <xPortStartScheduler+0x134>)
 80056ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056b6:	4b18      	ldr	r3, [pc, #96]	; (8005718 <xPortStartScheduler+0x138>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <xPortStartScheduler+0x138>)
 80056bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <xPortStartScheduler+0x138>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a14      	ldr	r2, [pc, #80]	; (8005718 <xPortStartScheduler+0x138>)
 80056c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056ce:	f000 f8dd 	bl	800588c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <xPortStartScheduler+0x13c>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056d8:	f000 f8fc 	bl	80058d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <xPortStartScheduler+0x140>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <xPortStartScheduler+0x140>)
 80056e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80056e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056e8:	f7ff ff66 	bl	80055b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056ec:	f7ff fd48 	bl	8005180 <vTaskSwitchContext>
	prvTaskExitError();
 80056f0:	f7ff ff1c 	bl	800552c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	e000ed00 	.word	0xe000ed00
 8005704:	410fc271 	.word	0x410fc271
 8005708:	410fc270 	.word	0x410fc270
 800570c:	e000e400 	.word	0xe000e400
 8005710:	2000a9a8 	.word	0x2000a9a8
 8005714:	2000a9ac 	.word	0x2000a9ac
 8005718:	e000ed20 	.word	0xe000ed20
 800571c:	20002014 	.word	0x20002014
 8005720:	e000ef34 	.word	0xe000ef34

08005724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	607b      	str	r3, [r7, #4]
}
 800573c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <vPortEnterCritical+0x58>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a0d      	ldr	r2, [pc, #52]	; (800577c <vPortEnterCritical+0x58>)
 8005746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <vPortEnterCritical+0x58>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10f      	bne.n	8005770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <vPortEnterCritical+0x5c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <vPortEnterCritical+0x4c>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	603b      	str	r3, [r7, #0]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <vPortEnterCritical+0x4a>
	}
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20002014 	.word	0x20002014
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800578a:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <vPortExitCritical+0x50>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <vPortExitCritical+0x24>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	607b      	str	r3, [r7, #4]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <vPortExitCritical+0x50>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <vPortExitCritical+0x50>)
 80057b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <vPortExitCritical+0x50>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d105      	bne.n	80057c6 <vPortExitCritical+0x42>
 80057ba:	2300      	movs	r3, #0
 80057bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20002014 	.word	0x20002014
	...

080057e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057e0:	f3ef 8009 	mrs	r0, PSP
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4b15      	ldr	r3, [pc, #84]	; (8005840 <pxCurrentTCBConst>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	f01e 0f10 	tst.w	lr, #16
 80057f0:	bf08      	it	eq
 80057f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80057f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fa:	6010      	str	r0, [r2, #0]
 80057fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005800:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005804:	f380 8811 	msr	BASEPRI, r0
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f7ff fcb6 	bl	8005180 <vTaskSwitchContext>
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f380 8811 	msr	BASEPRI, r0
 800581c:	bc09      	pop	{r0, r3}
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	6808      	ldr	r0, [r1, #0]
 8005822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005826:	f01e 0f10 	tst.w	lr, #16
 800582a:	bf08      	it	eq
 800582c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005830:	f380 8809 	msr	PSP, r0
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	f3af 8000 	nop.w

08005840 <pxCurrentTCBConst>:
 8005840:	2000a87c 	.word	0x2000a87c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop

08005848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005862:	f7ff fbd5 	bl	8005010 <xTaskIncrementTick>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <SysTick_Handler+0x40>)
 800586e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f383 8811 	msr	BASEPRI, r3
}
 800587e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortSetupTimerInterrupt+0x34>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <vPortSetupTimerInterrupt+0x38>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <vPortSetupTimerInterrupt+0x3c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <vPortSetupTimerInterrupt+0x40>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	099b      	lsrs	r3, r3, #6
 80058a8:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <vPortSetupTimerInterrupt+0x44>)
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058ae:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <vPortSetupTimerInterrupt+0x34>)
 80058b0:	2207      	movs	r2, #7
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	e000e010 	.word	0xe000e010
 80058c4:	e000e018 	.word	0xe000e018
 80058c8:	20002008 	.word	0x20002008
 80058cc:	10624dd3 	.word	0x10624dd3
 80058d0:	e000e014 	.word	0xe000e014

080058d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058e4 <vPortEnableVFP+0x10>
 80058d8:	6801      	ldr	r1, [r0, #0]
 80058da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058de:	6001      	str	r1, [r0, #0]
 80058e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058e2:	bf00      	nop
 80058e4:	e000ed88 	.word	0xe000ed88

080058e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058f4:	f7ff fae2 	bl	8004ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058f8:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <pvPortMalloc+0x180>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005900:	f000 f920 	bl	8005b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <pvPortMalloc+0x184>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 8093 	bne.w	8005a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01d      	beq.n	8005954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005918:	2208      	movs	r2, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d014      	beq.n	8005954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	3308      	adds	r3, #8
 8005932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <pvPortMalloc+0x6c>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d06e      	beq.n	8005a38 <pvPortMalloc+0x150>
 800595a:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <pvPortMalloc+0x188>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d869      	bhi.n	8005a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005964:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <pvPortMalloc+0x18c>)
 8005966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005968:	4b42      	ldr	r3, [pc, #264]	; (8005a74 <pvPortMalloc+0x18c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800596e:	e004      	b.n	800597a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <pvPortMalloc+0xa4>
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f1      	bne.n	8005970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <pvPortMalloc+0x180>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005992:	429a      	cmp	r2, r3
 8005994:	d050      	beq.n	8005a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2208      	movs	r2, #8
 800599c:	4413      	add	r3, r2
 800599e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	2308      	movs	r3, #8
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d91f      	bls.n	80059f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <pvPortMalloc+0xf8>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	613b      	str	r3, [r7, #16]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059f2:	69b8      	ldr	r0, [r7, #24]
 80059f4:	f000 f908 	bl	8005c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <pvPortMalloc+0x188>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <pvPortMalloc+0x188>)
 8005a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a06:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <pvPortMalloc+0x188>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <pvPortMalloc+0x190>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d203      	bcs.n	8005a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a12:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <pvPortMalloc+0x188>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <pvPortMalloc+0x190>)
 8005a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <pvPortMalloc+0x184>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <pvPortMalloc+0x194>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <pvPortMalloc+0x194>)
 8005a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a38:	f7ff fa4e 	bl	8004ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <pvPortMalloc+0x174>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <pvPortMalloc+0x172>
	return pvReturn;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000e5b8 	.word	0x2000e5b8
 8005a6c:	2000e5cc 	.word	0x2000e5cc
 8005a70:	2000e5bc 	.word	0x2000e5bc
 8005a74:	2000e5b0 	.word	0x2000e5b0
 8005a78:	2000e5c0 	.word	0x2000e5c0
 8005a7c:	2000e5c4 	.word	0x2000e5c4

08005a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04d      	beq.n	8005b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a92:	2308      	movs	r3, #8
 8005a94:	425b      	negs	r3, r3
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <vPortFree+0xb8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <vPortFree+0x44>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <vPortFree+0x62>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60bb      	str	r3, [r7, #8]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <vPortFree+0xb8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01e      	beq.n	8005b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11a      	bne.n	8005b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <vPortFree+0xb8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b08:	f7ff f9d8 	bl	8004ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <vPortFree+0xbc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <vPortFree+0xbc>)
 8005b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b1a:	6938      	ldr	r0, [r7, #16]
 8005b1c:	f000 f874 	bl	8005c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <vPortFree+0xc0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <vPortFree+0xc0>)
 8005b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b2a:	f7ff f9d5 	bl	8004ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	2000e5cc 	.word	0x2000e5cc
 8005b3c:	2000e5bc 	.word	0x2000e5bc
 8005b40:	2000e5c8 	.word	0x2000e5c8

08005b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <prvHeapInit+0xac>)
 8005b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3307      	adds	r3, #7
 8005b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0307 	bic.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <prvHeapInit+0xac>)
 8005b74:	4413      	add	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b7c:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <prvHeapInit+0xb0>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b82:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <prvHeapInit+0xb0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b90:	2208      	movs	r2, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <prvHeapInit+0xb4>)
 8005ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <prvHeapInit+0xb4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <prvHeapInit+0xb4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <prvHeapInit+0xb4>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <prvHeapInit+0xb8>)
 8005bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <prvHeapInit+0xbc>)
 8005bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bdc:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <prvHeapInit+0xc0>)
 8005bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	2000a9b0 	.word	0x2000a9b0
 8005bf4:	2000e5b0 	.word	0x2000e5b0
 8005bf8:	2000e5b8 	.word	0x2000e5b8
 8005bfc:	2000e5c0 	.word	0x2000e5c0
 8005c00:	2000e5bc 	.word	0x2000e5bc
 8005c04:	2000e5cc 	.word	0x2000e5cc

08005c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <prvInsertBlockIntoFreeList+0xac>)
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e002      	b.n	8005c1c <prvInsertBlockIntoFreeList+0x14>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d8f7      	bhi.n	8005c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d108      	bne.n	8005c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	441a      	add	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	441a      	add	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d118      	bne.n	8005c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d00d      	beq.n	8005c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	441a      	add	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e008      	b.n	8005c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e003      	b.n	8005c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d002      	beq.n	8005ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	2000e5b0 	.word	0x2000e5b0
 8005cb8:	2000e5b8 	.word	0x2000e5b8

08005cbc <arm_max_f32>:
 8005cbc:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8005cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8005cc8:	ecf7 7a01 	vldmia	r7!, {s15}
 8005ccc:	d060      	beq.n	8005d90 <arm_max_f32+0xd4>
 8005cce:	2400      	movs	r4, #0
 8005cd0:	3014      	adds	r0, #20
 8005cd2:	4625      	mov	r5, r4
 8005cd4:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8005cd8:	ed10 7a04 	vldr	s14, [r0, #-16]
 8005cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	bf48      	it	mi
 8005ce6:	eef0 7a47 	vmovmi.f32	s15, s14
 8005cea:	ed10 7a03 	vldr	s14, [r0, #-12]
 8005cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf2:	bf48      	it	mi
 8005cf4:	1c65      	addmi	r5, r4, #1
 8005cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfa:	bf48      	it	mi
 8005cfc:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d00:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d08:	bf48      	it	mi
 8005d0a:	1ca5      	addmi	r5, r4, #2
 8005d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d10:	bf48      	it	mi
 8005d12:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d16:	ed10 7a01 	vldr	s14, [r0, #-4]
 8005d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d1e:	bf48      	it	mi
 8005d20:	1ce5      	addmi	r5, r4, #3
 8005d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d26:	f104 0404 	add.w	r4, r4, #4
 8005d2a:	bf44      	itt	mi
 8005d2c:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d30:	4625      	movmi	r5, r4
 8005d32:	42a6      	cmp	r6, r4
 8005d34:	f100 0010 	add.w	r0, r0, #16
 8005d38:	d1ce      	bne.n	8005cd8 <arm_max_f32+0x1c>
 8005d3a:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8005d3e:	f01c 0003 	ands.w	r0, ip, #3
 8005d42:	d021      	beq.n	8005d88 <arm_max_f32+0xcc>
 8005d44:	ed97 7a00 	vldr	s14, [r7]
 8005d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d50:	bfc4      	itt	gt
 8005d52:	eef0 7a47 	vmovgt.f32	s15, s14
 8005d56:	1a0d      	subgt	r5, r1, r0
 8005d58:	3801      	subs	r0, #1
 8005d5a:	d015      	beq.n	8005d88 <arm_max_f32+0xcc>
 8005d5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d68:	bf44      	itt	mi
 8005d6a:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d6e:	1a0d      	submi	r5, r1, r0
 8005d70:	2801      	cmp	r0, #1
 8005d72:	d009      	beq.n	8005d88 <arm_max_f32+0xcc>
 8005d74:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d80:	bfc4      	itt	gt
 8005d82:	eef0 7a47 	vmovgt.f32	s15, s14
 8005d86:	4665      	movgt	r5, ip
 8005d88:	edc2 7a00 	vstr	s15, [r2]
 8005d8c:	601d      	str	r5, [r3, #0]
 8005d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d90:	4675      	mov	r5, lr
 8005d92:	e7d4      	b.n	8005d3e <arm_max_f32+0x82>

08005d94 <arm_rfft_32_fast_init_f32>:
 8005d94:	b178      	cbz	r0, 8005db6 <arm_rfft_32_fast_init_f32+0x22>
 8005d96:	b430      	push	{r4, r5}
 8005d98:	4908      	ldr	r1, [pc, #32]	; (8005dbc <arm_rfft_32_fast_init_f32+0x28>)
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <arm_rfft_32_fast_init_f32+0x2c>)
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005da2:	8003      	strh	r3, [r0, #0]
 8005da4:	2520      	movs	r5, #32
 8005da6:	2414      	movs	r4, #20
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <arm_rfft_32_fast_init_f32+0x30>)
 8005daa:	8205      	strh	r5, [r0, #16]
 8005dac:	8184      	strh	r4, [r0, #12]
 8005dae:	6143      	str	r3, [r0, #20]
 8005db0:	bc30      	pop	{r4, r5}
 8005db2:	2000      	movs	r0, #0
 8005db4:	4770      	bx	lr
 8005db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dba:	4770      	bx	lr
 8005dbc:	08009864 	.word	0x08009864
 8005dc0:	0800e19c 	.word	0x0800e19c
 8005dc4:	08016f1c 	.word	0x08016f1c

08005dc8 <arm_rfft_64_fast_init_f32>:
 8005dc8:	b178      	cbz	r0, 8005dea <arm_rfft_64_fast_init_f32+0x22>
 8005dca:	b430      	push	{r4, r5}
 8005dcc:	4908      	ldr	r1, [pc, #32]	; (8005df0 <arm_rfft_64_fast_init_f32+0x28>)
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <arm_rfft_64_fast_init_f32+0x2c>)
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005dd6:	8003      	strh	r3, [r0, #0]
 8005dd8:	2540      	movs	r5, #64	; 0x40
 8005dda:	2430      	movs	r4, #48	; 0x30
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <arm_rfft_64_fast_init_f32+0x30>)
 8005dde:	8205      	strh	r5, [r0, #16]
 8005de0:	8184      	strh	r4, [r0, #12]
 8005de2:	6143      	str	r3, [r0, #20]
 8005de4:	bc30      	pop	{r4, r5}
 8005de6:	2000      	movs	r0, #0
 8005de8:	4770      	bx	lr
 8005dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dee:	4770      	bx	lr
 8005df0:	0800b9bc 	.word	0x0800b9bc
 8005df4:	08012a1c 	.word	0x08012a1c
 8005df8:	0801b79c 	.word	0x0801b79c

08005dfc <arm_rfft_256_fast_init_f32>:
 8005dfc:	b180      	cbz	r0, 8005e20 <arm_rfft_256_fast_init_f32+0x24>
 8005dfe:	b430      	push	{r4, r5}
 8005e00:	4909      	ldr	r1, [pc, #36]	; (8005e28 <arm_rfft_256_fast_init_f32+0x2c>)
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <arm_rfft_256_fast_init_f32+0x30>)
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005e0a:	8003      	strh	r3, [r0, #0]
 8005e0c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005e10:	24d0      	movs	r4, #208	; 0xd0
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <arm_rfft_256_fast_init_f32+0x34>)
 8005e14:	8205      	strh	r5, [r0, #16]
 8005e16:	8184      	strh	r4, [r0, #12]
 8005e18:	6143      	str	r3, [r0, #20]
 8005e1a:	bc30      	pop	{r4, r5}
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4770      	bx	lr
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	080096c4 	.word	0x080096c4
 8005e2c:	0800dd9c 	.word	0x0800dd9c
 8005e30:	08016b1c 	.word	0x08016b1c

08005e34 <arm_rfft_512_fast_init_f32>:
 8005e34:	b190      	cbz	r0, 8005e5c <arm_rfft_512_fast_init_f32+0x28>
 8005e36:	b430      	push	{r4, r5}
 8005e38:	490a      	ldr	r1, [pc, #40]	; (8005e64 <arm_rfft_512_fast_init_f32+0x30>)
 8005e3a:	4a0b      	ldr	r2, [pc, #44]	; (8005e68 <arm_rfft_512_fast_init_f32+0x34>)
 8005e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e40:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005e44:	8003      	strh	r3, [r0, #0]
 8005e46:	f44f 7500 	mov.w	r5, #512	; 0x200
 8005e4a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <arm_rfft_512_fast_init_f32+0x38>)
 8005e50:	8205      	strh	r5, [r0, #16]
 8005e52:	8184      	strh	r4, [r0, #12]
 8005e54:	6143      	str	r3, [r0, #20]
 8005e56:	bc30      	pop	{r4, r5}
 8005e58:	2000      	movs	r0, #0
 8005e5a:	4770      	bx	lr
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	0800b64c 	.word	0x0800b64c
 8005e68:	0801221c 	.word	0x0801221c
 8005e6c:	0801af9c 	.word	0x0801af9c

08005e70 <arm_rfft_1024_fast_init_f32>:
 8005e70:	b190      	cbz	r0, 8005e98 <arm_rfft_1024_fast_init_f32+0x28>
 8005e72:	b430      	push	{r4, r5}
 8005e74:	490a      	ldr	r1, [pc, #40]	; (8005ea0 <arm_rfft_1024_fast_init_f32+0x30>)
 8005e76:	4a0b      	ldr	r2, [pc, #44]	; (8005ea4 <arm_rfft_1024_fast_init_f32+0x34>)
 8005e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005e80:	8003      	strh	r3, [r0, #0]
 8005e82:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8005e86:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005e8a:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <arm_rfft_1024_fast_init_f32+0x38>)
 8005e8c:	8205      	strh	r5, [r0, #16]
 8005e8e:	8184      	strh	r4, [r0, #12]
 8005e90:	6143      	str	r3, [r0, #20]
 8005e92:	bc30      	pop	{r4, r5}
 8005e94:	2000      	movs	r0, #0
 8005e96:	4770      	bx	lr
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	0800ba1c 	.word	0x0800ba1c
 8005ea4:	08012b1c 	.word	0x08012b1c
 8005ea8:	08013b1c 	.word	0x08013b1c

08005eac <arm_rfft_2048_fast_init_f32>:
 8005eac:	b190      	cbz	r0, 8005ed4 <arm_rfft_2048_fast_init_f32+0x28>
 8005eae:	b430      	push	{r4, r5}
 8005eb0:	490a      	ldr	r1, [pc, #40]	; (8005edc <arm_rfft_2048_fast_init_f32+0x30>)
 8005eb2:	4a0b      	ldr	r2, [pc, #44]	; (8005ee0 <arm_rfft_2048_fast_init_f32+0x34>)
 8005eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005ebc:	8003      	strh	r3, [r0, #0]
 8005ebe:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005ec2:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <arm_rfft_2048_fast_init_f32+0x38>)
 8005ec8:	8205      	strh	r5, [r0, #16]
 8005eca:	8184      	strh	r4, [r0, #12]
 8005ecc:	6143      	str	r3, [r0, #20]
 8005ece:	bc30      	pop	{r4, r5}
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	4770      	bx	lr
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	080088b4 	.word	0x080088b4
 8005ee0:	0800bd9c 	.word	0x0800bd9c
 8005ee4:	08014b1c 	.word	0x08014b1c

08005ee8 <arm_rfft_4096_fast_init_f32>:
 8005ee8:	b190      	cbz	r0, 8005f10 <arm_rfft_4096_fast_init_f32+0x28>
 8005eea:	b430      	push	{r4, r5}
 8005eec:	490a      	ldr	r1, [pc, #40]	; (8005f18 <arm_rfft_4096_fast_init_f32+0x30>)
 8005eee:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <arm_rfft_4096_fast_init_f32+0x34>)
 8005ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ef4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005ef8:	8003      	strh	r3, [r0, #0]
 8005efa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8005efe:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005f02:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <arm_rfft_4096_fast_init_f32+0x38>)
 8005f04:	8205      	strh	r5, [r0, #16]
 8005f06:	8184      	strh	r4, [r0, #12]
 8005f08:	6143      	str	r3, [r0, #20]
 8005f0a:	bc30      	pop	{r4, r5}
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4770      	bx	lr
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	0800988c 	.word	0x0800988c
 8005f1c:	0800e21c 	.word	0x0800e21c
 8005f20:	08016f9c 	.word	0x08016f9c

08005f24 <arm_rfft_fast_init_f32>:
 8005f24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005f28:	d01f      	beq.n	8005f6a <arm_rfft_fast_init_f32+0x46>
 8005f2a:	d90b      	bls.n	8005f44 <arm_rfft_fast_init_f32+0x20>
 8005f2c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005f30:	d019      	beq.n	8005f66 <arm_rfft_fast_init_f32+0x42>
 8005f32:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005f36:	d012      	beq.n	8005f5e <arm_rfft_fast_init_f32+0x3a>
 8005f38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f3c:	d00d      	beq.n	8005f5a <arm_rfft_fast_init_f32+0x36>
 8005f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f42:	4770      	bx	lr
 8005f44:	2940      	cmp	r1, #64	; 0x40
 8005f46:	d00c      	beq.n	8005f62 <arm_rfft_fast_init_f32+0x3e>
 8005f48:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005f4c:	d003      	beq.n	8005f56 <arm_rfft_fast_init_f32+0x32>
 8005f4e:	2920      	cmp	r1, #32
 8005f50:	d1f5      	bne.n	8005f3e <arm_rfft_fast_init_f32+0x1a>
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <arm_rfft_fast_init_f32+0x4c>)
 8005f54:	4718      	bx	r3
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <arm_rfft_fast_init_f32+0x50>)
 8005f58:	4718      	bx	r3
 8005f5a:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <arm_rfft_fast_init_f32+0x54>)
 8005f5c:	4718      	bx	r3
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <arm_rfft_fast_init_f32+0x58>)
 8005f60:	4718      	bx	r3
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <arm_rfft_fast_init_f32+0x5c>)
 8005f64:	e7f6      	b.n	8005f54 <arm_rfft_fast_init_f32+0x30>
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <arm_rfft_fast_init_f32+0x60>)
 8005f68:	e7f4      	b.n	8005f54 <arm_rfft_fast_init_f32+0x30>
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <arm_rfft_fast_init_f32+0x64>)
 8005f6c:	e7f2      	b.n	8005f54 <arm_rfft_fast_init_f32+0x30>
 8005f6e:	bf00      	nop
 8005f70:	08005d95 	.word	0x08005d95
 8005f74:	08005dfd 	.word	0x08005dfd
 8005f78:	08005e71 	.word	0x08005e71
 8005f7c:	08005ee9 	.word	0x08005ee9
 8005f80:	08005dc9 	.word	0x08005dc9
 8005f84:	08005ead 	.word	0x08005ead
 8005f88:	08005e35 	.word	0x08005e35

08005f8c <stage_rfft_f32>:
 8005f8c:	b410      	push	{r4}
 8005f8e:	edd1 7a00 	vldr	s15, [r1]
 8005f92:	ed91 7a01 	vldr	s14, [r1, #4]
 8005f96:	8804      	ldrh	r4, [r0, #0]
 8005f98:	6940      	ldr	r0, [r0, #20]
 8005f9a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005f9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fa2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8005fa6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fae:	3c01      	subs	r4, #1
 8005fb0:	ee26 7a84 	vmul.f32	s14, s13, s8
 8005fb4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8005fb8:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8005fbc:	ed82 7a00 	vstr	s14, [r2]
 8005fc0:	edc2 7a01 	vstr	s15, [r2, #4]
 8005fc4:	3010      	adds	r0, #16
 8005fc6:	3210      	adds	r2, #16
 8005fc8:	3b08      	subs	r3, #8
 8005fca:	3110      	adds	r1, #16
 8005fcc:	ed11 5a02 	vldr	s10, [r1, #-8]
 8005fd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8005fd4:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005fd8:	edd3 4a03 	vldr	s9, [r3, #12]
 8005fdc:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005fe0:	ed10 6a01 	vldr	s12, [r0, #-4]
 8005fe4:	ee77 5a45 	vsub.f32	s11, s14, s10
 8005fe8:	ee37 7a05 	vadd.f32	s14, s14, s10
 8005fec:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8005ff0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8005ff4:	ee66 5a25 	vmul.f32	s11, s12, s11
 8005ff8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005ffc:	ee37 7a23 	vadd.f32	s14, s14, s7
 8006000:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006004:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006008:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800600c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006010:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006014:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006018:	ee67 7a84 	vmul.f32	s15, s15, s8
 800601c:	3c01      	subs	r4, #1
 800601e:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006022:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006026:	f1a3 0308 	sub.w	r3, r3, #8
 800602a:	f101 0108 	add.w	r1, r1, #8
 800602e:	f100 0008 	add.w	r0, r0, #8
 8006032:	f102 0208 	add.w	r2, r2, #8
 8006036:	d1c9      	bne.n	8005fcc <stage_rfft_f32+0x40>
 8006038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop

08006040 <merge_rfft_f32>:
 8006040:	b410      	push	{r4}
 8006042:	edd1 7a00 	vldr	s15, [r1]
 8006046:	edd1 6a01 	vldr	s13, [r1, #4]
 800604a:	8804      	ldrh	r4, [r0, #0]
 800604c:	6940      	ldr	r0, [r0, #20]
 800604e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006052:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006056:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800605a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800605e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006062:	3c01      	subs	r4, #1
 8006064:	ed82 7a00 	vstr	s14, [r2]
 8006068:	edc2 7a01 	vstr	s15, [r2, #4]
 800606c:	b3dc      	cbz	r4, 80060e6 <merge_rfft_f32+0xa6>
 800606e:	00e3      	lsls	r3, r4, #3
 8006070:	3b08      	subs	r3, #8
 8006072:	440b      	add	r3, r1
 8006074:	3010      	adds	r0, #16
 8006076:	3210      	adds	r2, #16
 8006078:	3110      	adds	r1, #16
 800607a:	ed11 5a02 	vldr	s10, [r1, #-8]
 800607e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006082:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006086:	edd3 4a03 	vldr	s9, [r3, #12]
 800608a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800608e:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006092:	ee75 5a47 	vsub.f32	s11, s10, s14
 8006096:	ee37 7a05 	vadd.f32	s14, s14, s10
 800609a:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800609e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80060a2:	ee66 5a25 	vmul.f32	s11, s12, s11
 80060a6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80060aa:	ee37 7a63 	vsub.f32	s14, s14, s7
 80060ae:	ee66 6a85 	vmul.f32	s13, s13, s10
 80060b2:	ee26 6a05 	vmul.f32	s12, s12, s10
 80060b6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80060ba:	ee37 7a46 	vsub.f32	s14, s14, s12
 80060be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80060c6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80060ca:	3c01      	subs	r4, #1
 80060cc:	ed02 7a02 	vstr	s14, [r2, #-8]
 80060d0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80060d4:	f1a3 0308 	sub.w	r3, r3, #8
 80060d8:	f101 0108 	add.w	r1, r1, #8
 80060dc:	f100 0008 	add.w	r0, r0, #8
 80060e0:	f102 0208 	add.w	r2, r2, #8
 80060e4:	d1c9      	bne.n	800607a <merge_rfft_f32+0x3a>
 80060e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <arm_rfft_fast_f32>:
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	8a05      	ldrh	r5, [r0, #16]
 80060f2:	086d      	lsrs	r5, r5, #1
 80060f4:	8005      	strh	r5, [r0, #0]
 80060f6:	4604      	mov	r4, r0
 80060f8:	4616      	mov	r6, r2
 80060fa:	461d      	mov	r5, r3
 80060fc:	b14b      	cbz	r3, 8006112 <arm_rfft_fast_f32+0x26>
 80060fe:	f7ff ff9f 	bl	8006040 <merge_rfft_f32>
 8006102:	462a      	mov	r2, r5
 8006104:	4631      	mov	r1, r6
 8006106:	4620      	mov	r0, r4
 8006108:	2301      	movs	r3, #1
 800610a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610e:	f000 bb33 	b.w	8006778 <arm_cfft_f32>
 8006112:	460f      	mov	r7, r1
 8006114:	461a      	mov	r2, r3
 8006116:	2301      	movs	r3, #1
 8006118:	f000 fb2e 	bl	8006778 <arm_cfft_f32>
 800611c:	4632      	mov	r2, r6
 800611e:	4639      	mov	r1, r7
 8006120:	4620      	mov	r0, r4
 8006122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006126:	f7ff bf31 	b.w	8005f8c <stage_rfft_f32>
 800612a:	bf00      	nop

0800612c <arm_cfft_radix8by2_f32>:
 800612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	ed2d 8b08 	vpush	{d8-d11}
 8006134:	4607      	mov	r7, r0
 8006136:	4608      	mov	r0, r1
 8006138:	f8b7 c000 	ldrh.w	ip, [r7]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8006142:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006146:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800614a:	f000 80b0 	beq.w	80062ae <arm_cfft_radix8by2_f32+0x182>
 800614e:	008c      	lsls	r4, r1, #2
 8006150:	3410      	adds	r4, #16
 8006152:	f100 0310 	add.w	r3, r0, #16
 8006156:	1906      	adds	r6, r0, r4
 8006158:	3210      	adds	r2, #16
 800615a:	4444      	add	r4, r8
 800615c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006160:	f108 0510 	add.w	r5, r8, #16
 8006164:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006168:	ed55 2a03 	vldr	s5, [r5, #-12]
 800616c:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006170:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006174:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006178:	ed54 5a01 	vldr	s11, [r4, #-4]
 800617c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006180:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006184:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006188:	ed56 6a04 	vldr	s13, [r6, #-16]
 800618c:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006190:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006194:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006198:	ed53 7a01 	vldr	s15, [r3, #-4]
 800619c:	ed16 1a02 	vldr	s2, [r6, #-8]
 80061a0:	ed56 1a01 	vldr	s3, [r6, #-4]
 80061a4:	ee73 ba82 	vadd.f32	s23, s7, s4
 80061a8:	ee37 ba22 	vadd.f32	s22, s14, s5
 80061ac:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80061b0:	ee33 9a04 	vadd.f32	s18, s6, s8
 80061b4:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80061b8:	ee75 aa00 	vadd.f32	s21, s10, s0
 80061bc:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80061c0:	ee71 8a06 	vadd.f32	s17, s2, s12
 80061c4:	ed43 ba04 	vstr	s23, [r3, #-16]
 80061c8:	ed03 ba03 	vstr	s22, [r3, #-12]
 80061cc:	ed43 aa02 	vstr	s21, [r3, #-8]
 80061d0:	ed03 aa01 	vstr	s20, [r3, #-4]
 80061d4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80061d8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80061dc:	ed06 9a03 	vstr	s18, [r6, #-12]
 80061e0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80061e4:	ee37 7a62 	vsub.f32	s14, s14, s5
 80061e8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80061ec:	ee34 4a43 	vsub.f32	s8, s8, s6
 80061f0:	ed52 6a03 	vldr	s13, [r2, #-12]
 80061f4:	ed12 3a04 	vldr	s6, [r2, #-16]
 80061f8:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80061fc:	ee27 8a26 	vmul.f32	s16, s14, s13
 8006200:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006204:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006208:	ee64 4a83 	vmul.f32	s9, s9, s6
 800620c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006210:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006214:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006218:	ee24 4a03 	vmul.f32	s8, s8, s6
 800621c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006220:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006224:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006228:	ee32 3a08 	vadd.f32	s6, s4, s16
 800622c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006230:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006234:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006238:	ed44 6a03 	vstr	s13, [r4, #-12]
 800623c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006240:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006244:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006248:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800624c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006250:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006254:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006258:	ee66 4a87 	vmul.f32	s9, s13, s14
 800625c:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006260:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006264:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006268:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800626c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006270:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006274:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006278:	ee74 5a23 	vadd.f32	s11, s8, s7
 800627c:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006280:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006284:	3310      	adds	r3, #16
 8006286:	4563      	cmp	r3, ip
 8006288:	ed45 5a02 	vstr	s11, [r5, #-8]
 800628c:	f106 0610 	add.w	r6, r6, #16
 8006290:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006294:	f102 0210 	add.w	r2, r2, #16
 8006298:	ed04 6a02 	vstr	s12, [r4, #-8]
 800629c:	ed04 7a01 	vstr	s14, [r4, #-4]
 80062a0:	f105 0510 	add.w	r5, r5, #16
 80062a4:	f104 0410 	add.w	r4, r4, #16
 80062a8:	f47f af5c 	bne.w	8006164 <arm_cfft_radix8by2_f32+0x38>
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	b28c      	uxth	r4, r1
 80062b0:	4621      	mov	r1, r4
 80062b2:	2302      	movs	r3, #2
 80062b4:	f000 fc1c 	bl	8006af0 <arm_radix8_butterfly_f32>
 80062b8:	ecbd 8b08 	vpop	{d8-d11}
 80062bc:	4621      	mov	r1, r4
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	4640      	mov	r0, r8
 80062c2:	2302      	movs	r3, #2
 80062c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062c8:	f000 bc12 	b.w	8006af0 <arm_radix8_butterfly_f32>

080062cc <arm_cfft_radix8by4_f32>:
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	ed2d 8b0a 	vpush	{d8-d12}
 80062d4:	b08d      	sub	sp, #52	; 0x34
 80062d6:	460d      	mov	r5, r1
 80062d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80062da:	8801      	ldrh	r1, [r0, #0]
 80062dc:	6842      	ldr	r2, [r0, #4]
 80062de:	900a      	str	r0, [sp, #40]	; 0x28
 80062e0:	0849      	lsrs	r1, r1, #1
 80062e2:	008b      	lsls	r3, r1, #2
 80062e4:	18ee      	adds	r6, r5, r3
 80062e6:	18f0      	adds	r0, r6, r3
 80062e8:	edd0 5a00 	vldr	s11, [r0]
 80062ec:	edd5 7a00 	vldr	s15, [r5]
 80062f0:	ed96 7a00 	vldr	s14, [r6]
 80062f4:	edd0 3a01 	vldr	s7, [r0, #4]
 80062f8:	ed96 4a01 	vldr	s8, [r6, #4]
 80062fc:	ed95 5a01 	vldr	s10, [r5, #4]
 8006300:	9008      	str	r0, [sp, #32]
 8006302:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006306:	18c7      	adds	r7, r0, r3
 8006308:	edd7 4a00 	vldr	s9, [r7]
 800630c:	ed97 3a01 	vldr	s6, [r7, #4]
 8006310:	9701      	str	r7, [sp, #4]
 8006312:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006316:	462c      	mov	r4, r5
 8006318:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800631c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006320:	ee16 ca90 	vmov	ip, s13
 8006324:	f844 cb08 	str.w	ip, [r4], #8
 8006328:	ee75 6a23 	vadd.f32	s13, s10, s7
 800632c:	edd6 5a01 	vldr	s11, [r6, #4]
 8006330:	edd7 2a01 	vldr	s5, [r7, #4]
 8006334:	9404      	str	r4, [sp, #16]
 8006336:	ee35 5a63 	vsub.f32	s10, s10, s7
 800633a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800633e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006342:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006346:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800634a:	0849      	lsrs	r1, r1, #1
 800634c:	f102 0e08 	add.w	lr, r2, #8
 8006350:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006354:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006358:	9109      	str	r1, [sp, #36]	; 0x24
 800635a:	ee35 4a47 	vsub.f32	s8, s10, s14
 800635e:	f1a1 0902 	sub.w	r9, r1, #2
 8006362:	f8cd e00c 	str.w	lr, [sp, #12]
 8006366:	4631      	mov	r1, r6
 8006368:	ee13 ea90 	vmov	lr, s7
 800636c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006370:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006374:	4604      	mov	r4, r0
 8006376:	edc5 5a01 	vstr	s11, [r5, #4]
 800637a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800637e:	f841 eb08 	str.w	lr, [r1], #8
 8006382:	ee34 5a24 	vadd.f32	s10, s8, s9
 8006386:	ee16 ea10 	vmov	lr, s12
 800638a:	ed86 5a01 	vstr	s10, [r6, #4]
 800638e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006392:	f844 eb08 	str.w	lr, [r4], #8
 8006396:	ee77 7a83 	vadd.f32	s15, s15, s6
 800639a:	edc0 6a01 	vstr	s13, [r0, #4]
 800639e:	9405      	str	r4, [sp, #20]
 80063a0:	4604      	mov	r4, r0
 80063a2:	ee17 0a90 	vmov	r0, s15
 80063a6:	9106      	str	r1, [sp, #24]
 80063a8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80063ac:	f102 0110 	add.w	r1, r2, #16
 80063b0:	46bc      	mov	ip, r7
 80063b2:	9100      	str	r1, [sp, #0]
 80063b4:	f847 0b08 	str.w	r0, [r7], #8
 80063b8:	f102 0118 	add.w	r1, r2, #24
 80063bc:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80063c0:	9102      	str	r1, [sp, #8]
 80063c2:	ed8c 7a01 	vstr	s14, [ip, #4]
 80063c6:	9007      	str	r0, [sp, #28]
 80063c8:	f000 8134 	beq.w	8006634 <arm_cfft_radix8by4_f32+0x368>
 80063cc:	f102 0920 	add.w	r9, r2, #32
 80063d0:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80063d4:	9a01      	ldr	r2, [sp, #4]
 80063d6:	f8dd a000 	ldr.w	sl, [sp]
 80063da:	3b0c      	subs	r3, #12
 80063dc:	4683      	mov	fp, r0
 80063de:	4463      	add	r3, ip
 80063e0:	f105 0e10 	add.w	lr, r5, #16
 80063e4:	f1a4 010c 	sub.w	r1, r4, #12
 80063e8:	f104 0510 	add.w	r5, r4, #16
 80063ec:	f1a6 0c0c 	sub.w	ip, r6, #12
 80063f0:	f1a2 040c 	sub.w	r4, r2, #12
 80063f4:	f106 0010 	add.w	r0, r6, #16
 80063f8:	3210      	adds	r2, #16
 80063fa:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80063fe:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006402:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006406:	ed52 1a02 	vldr	s3, [r2, #-8]
 800640a:	ed55 6a01 	vldr	s13, [r5, #-4]
 800640e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8006412:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006416:	ed10 8a01 	vldr	s16, [r0, #-4]
 800641a:	ee35 4a25 	vadd.f32	s8, s10, s11
 800641e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8006422:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006426:	ee30 0a66 	vsub.f32	s0, s0, s13
 800642a:	ee37 7a21 	vadd.f32	s14, s14, s3
 800642e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006432:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006436:	ed10 7a01 	vldr	s14, [r0, #-4]
 800643a:	ed52 6a01 	vldr	s13, [r2, #-4]
 800643e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8006442:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006446:	ee37 7a26 	vadd.f32	s14, s14, s13
 800644a:	ee70 3a67 	vsub.f32	s7, s0, s15
 800644e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006452:	ed94 7a02 	vldr	s14, [r4, #8]
 8006456:	ed9c 2a02 	vldr	s4, [ip, #8]
 800645a:	ed91 ba02 	vldr	s22, [r1, #8]
 800645e:	edd3 9a02 	vldr	s19, [r3, #8]
 8006462:	edd4 2a01 	vldr	s5, [r4, #4]
 8006466:	ed9c 9a01 	vldr	s18, [ip, #4]
 800646a:	ed93 5a01 	vldr	s10, [r3, #4]
 800646e:	edd1 0a01 	vldr	s1, [r1, #4]
 8006472:	ee72 6a07 	vadd.f32	s13, s4, s14
 8006476:	ee32 2a47 	vsub.f32	s4, s4, s14
 800647a:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800647e:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006482:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8006486:	ee79 2a62 	vsub.f32	s5, s18, s5
 800648a:	ed8c 7a02 	vstr	s14, [ip, #8]
 800648e:	ed91 7a01 	vldr	s14, [r1, #4]
 8006492:	edd3 8a01 	vldr	s17, [r3, #4]
 8006496:	ee34 7a87 	vadd.f32	s14, s9, s14
 800649a:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800649e:	ee37 7a28 	vadd.f32	s14, s14, s17
 80064a2:	ee32 9a60 	vsub.f32	s18, s4, s1
 80064a6:	ed8c 7a01 	vstr	s14, [ip, #4]
 80064aa:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80064ae:	ed1a aa02 	vldr	s20, [sl, #-8]
 80064b2:	ee73 8a22 	vadd.f32	s17, s6, s5
 80064b6:	ee39 9a05 	vadd.f32	s18, s18, s10
 80064ba:	ee7a aac1 	vsub.f32	s21, s21, s2
 80064be:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80064c2:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80064c6:	ee69 ba07 	vmul.f32	s23, s18, s14
 80064ca:	ee6a aa87 	vmul.f32	s21, s21, s14
 80064ce:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80064d2:	ee63 ca87 	vmul.f32	s25, s7, s14
 80064d6:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80064da:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80064de:	ee68 8a87 	vmul.f32	s17, s17, s14
 80064e2:	ee73 3aea 	vsub.f32	s7, s7, s21
 80064e6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80064ea:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80064ee:	ee3b aaca 	vsub.f32	s20, s23, s20
 80064f2:	ee34 4a67 	vsub.f32	s8, s8, s15
 80064f6:	ee76 6acb 	vsub.f32	s13, s13, s22
 80064fa:	ee36 6a48 	vsub.f32	s12, s12, s16
 80064fe:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8006502:	ed00 7a02 	vstr	s14, [r0, #-8]
 8006506:	ed40 3a01 	vstr	s7, [r0, #-4]
 800650a:	edc1 8a01 	vstr	s17, [r1, #4]
 800650e:	ed81 aa02 	vstr	s20, [r1, #8]
 8006512:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006516:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800651a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800651e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006522:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006526:	ee36 6a41 	vsub.f32	s12, s12, s2
 800652a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800652e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8006532:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006536:	ee26 6a23 	vmul.f32	s12, s12, s7
 800653a:	ee24 4a26 	vmul.f32	s8, s8, s13
 800653e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006542:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006546:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800654a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800654e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006552:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006556:	ee79 3a29 	vadd.f32	s7, s18, s19
 800655a:	ee75 6a60 	vsub.f32	s13, s10, s1
 800655e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006562:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006566:	ed45 3a02 	vstr	s7, [r5, #-8]
 800656a:	ed05 6a01 	vstr	s12, [r5, #-4]
 800656e:	ed84 7a01 	vstr	s14, [r4, #4]
 8006572:	ed84 4a02 	vstr	s8, [r4, #8]
 8006576:	ee35 6a81 	vadd.f32	s12, s11, s2
 800657a:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800657e:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8006582:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8006586:	ee33 3a62 	vsub.f32	s6, s6, s5
 800658a:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800658e:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006592:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006596:	ee26 5a25 	vmul.f32	s10, s12, s11
 800659a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800659e:	ee26 6a26 	vmul.f32	s12, s12, s13
 80065a2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80065a6:	ee63 6a26 	vmul.f32	s13, s6, s13
 80065aa:	ee23 3a25 	vmul.f32	s6, s6, s11
 80065ae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80065b2:	ee75 5a24 	vadd.f32	s11, s10, s9
 80065b6:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80065ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 80065be:	f1bb 0b01 	subs.w	fp, fp, #1
 80065c2:	ed42 5a02 	vstr	s11, [r2, #-8]
 80065c6:	ed42 7a01 	vstr	s15, [r2, #-4]
 80065ca:	f10e 0e08 	add.w	lr, lr, #8
 80065ce:	ed83 3a02 	vstr	s6, [r3, #8]
 80065d2:	ed83 7a01 	vstr	s14, [r3, #4]
 80065d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80065da:	f10a 0a08 	add.w	sl, sl, #8
 80065de:	f100 0008 	add.w	r0, r0, #8
 80065e2:	f1a1 0108 	sub.w	r1, r1, #8
 80065e6:	f109 0910 	add.w	r9, r9, #16
 80065ea:	f105 0508 	add.w	r5, r5, #8
 80065ee:	f1a4 0408 	sub.w	r4, r4, #8
 80065f2:	f108 0818 	add.w	r8, r8, #24
 80065f6:	f102 0208 	add.w	r2, r2, #8
 80065fa:	f1a3 0308 	sub.w	r3, r3, #8
 80065fe:	f47f aefc 	bne.w	80063fa <arm_cfft_radix8by4_f32+0x12e>
 8006602:	9907      	ldr	r1, [sp, #28]
 8006604:	9800      	ldr	r0, [sp, #0]
 8006606:	00cb      	lsls	r3, r1, #3
 8006608:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800660c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006610:	9100      	str	r1, [sp, #0]
 8006612:	9904      	ldr	r1, [sp, #16]
 8006614:	4419      	add	r1, r3
 8006616:	9104      	str	r1, [sp, #16]
 8006618:	9903      	ldr	r1, [sp, #12]
 800661a:	4419      	add	r1, r3
 800661c:	9103      	str	r1, [sp, #12]
 800661e:	9906      	ldr	r1, [sp, #24]
 8006620:	4419      	add	r1, r3
 8006622:	9106      	str	r1, [sp, #24]
 8006624:	9905      	ldr	r1, [sp, #20]
 8006626:	441f      	add	r7, r3
 8006628:	4419      	add	r1, r3
 800662a:	9b02      	ldr	r3, [sp, #8]
 800662c:	9105      	str	r1, [sp, #20]
 800662e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006632:	9302      	str	r3, [sp, #8]
 8006634:	9904      	ldr	r1, [sp, #16]
 8006636:	9805      	ldr	r0, [sp, #20]
 8006638:	ed91 4a00 	vldr	s8, [r1]
 800663c:	edd0 6a00 	vldr	s13, [r0]
 8006640:	9b06      	ldr	r3, [sp, #24]
 8006642:	ed97 3a00 	vldr	s6, [r7]
 8006646:	edd3 7a00 	vldr	s15, [r3]
 800664a:	edd0 4a01 	vldr	s9, [r0, #4]
 800664e:	edd1 3a01 	vldr	s7, [r1, #4]
 8006652:	ed97 2a01 	vldr	s4, [r7, #4]
 8006656:	ed93 7a01 	vldr	s14, [r3, #4]
 800665a:	9a03      	ldr	r2, [sp, #12]
 800665c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8006660:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006664:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006668:	ee37 5a86 	vadd.f32	s10, s15, s12
 800666c:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006670:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006674:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006678:	ed81 5a00 	vstr	s10, [r1]
 800667c:	ed93 5a01 	vldr	s10, [r3, #4]
 8006680:	edd7 4a01 	vldr	s9, [r7, #4]
 8006684:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006688:	ee37 4a26 	vadd.f32	s8, s14, s13
 800668c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006690:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006694:	ed81 5a01 	vstr	s10, [r1, #4]
 8006698:	edd2 1a00 	vldr	s3, [r2]
 800669c:	edd2 2a01 	vldr	s5, [r2, #4]
 80066a0:	ee34 5a83 	vadd.f32	s10, s9, s6
 80066a4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80066a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80066ac:	ee64 4a21 	vmul.f32	s9, s8, s3
 80066b0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80066b4:	ee65 2a22 	vmul.f32	s5, s10, s5
 80066b8:	ee25 5a21 	vmul.f32	s10, s10, s3
 80066bc:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80066c0:	ee35 5a44 	vsub.f32	s10, s10, s8
 80066c4:	edc3 2a00 	vstr	s5, [r3]
 80066c8:	ed83 5a01 	vstr	s10, [r3, #4]
 80066cc:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80066d0:	9b00      	ldr	r3, [sp, #0]
 80066d2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80066d6:	ed93 4a01 	vldr	s8, [r3, #4]
 80066da:	ed93 5a00 	vldr	s10, [r3]
 80066de:	9b02      	ldr	r3, [sp, #8]
 80066e0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80066e4:	ee66 4a05 	vmul.f32	s9, s12, s10
 80066e8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80066ec:	ee26 6a04 	vmul.f32	s12, s12, s8
 80066f0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80066f4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80066f8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80066fc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006700:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006704:	ed80 6a01 	vstr	s12, [r0, #4]
 8006708:	edc0 5a00 	vstr	s11, [r0]
 800670c:	edd3 5a01 	vldr	s11, [r3, #4]
 8006710:	edd3 6a00 	vldr	s13, [r3]
 8006714:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006718:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800671c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006720:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006724:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006728:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800672c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006730:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006734:	ed87 7a01 	vstr	s14, [r7, #4]
 8006738:	edc7 7a00 	vstr	s15, [r7]
 800673c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8006740:	4621      	mov	r1, r4
 8006742:	686a      	ldr	r2, [r5, #4]
 8006744:	2304      	movs	r3, #4
 8006746:	f000 f9d3 	bl	8006af0 <arm_radix8_butterfly_f32>
 800674a:	4630      	mov	r0, r6
 800674c:	4621      	mov	r1, r4
 800674e:	686a      	ldr	r2, [r5, #4]
 8006750:	2304      	movs	r3, #4
 8006752:	f000 f9cd 	bl	8006af0 <arm_radix8_butterfly_f32>
 8006756:	9808      	ldr	r0, [sp, #32]
 8006758:	686a      	ldr	r2, [r5, #4]
 800675a:	4621      	mov	r1, r4
 800675c:	2304      	movs	r3, #4
 800675e:	f000 f9c7 	bl	8006af0 <arm_radix8_butterfly_f32>
 8006762:	686a      	ldr	r2, [r5, #4]
 8006764:	9801      	ldr	r0, [sp, #4]
 8006766:	4621      	mov	r1, r4
 8006768:	2304      	movs	r3, #4
 800676a:	b00d      	add	sp, #52	; 0x34
 800676c:	ecbd 8b0a 	vpop	{d8-d12}
 8006770:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	f000 b9bc 	b.w	8006af0 <arm_radix8_butterfly_f32>

08006778 <arm_cfft_f32>:
 8006778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677c:	2a01      	cmp	r2, #1
 800677e:	4606      	mov	r6, r0
 8006780:	4617      	mov	r7, r2
 8006782:	460c      	mov	r4, r1
 8006784:	4698      	mov	r8, r3
 8006786:	8805      	ldrh	r5, [r0, #0]
 8006788:	d056      	beq.n	8006838 <arm_cfft_f32+0xc0>
 800678a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800678e:	d063      	beq.n	8006858 <arm_cfft_f32+0xe0>
 8006790:	d916      	bls.n	80067c0 <arm_cfft_f32+0x48>
 8006792:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006796:	d01a      	beq.n	80067ce <arm_cfft_f32+0x56>
 8006798:	d947      	bls.n	800682a <arm_cfft_f32+0xb2>
 800679a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800679e:	d05b      	beq.n	8006858 <arm_cfft_f32+0xe0>
 80067a0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80067a4:	d105      	bne.n	80067b2 <arm_cfft_f32+0x3a>
 80067a6:	2301      	movs	r3, #1
 80067a8:	6872      	ldr	r2, [r6, #4]
 80067aa:	4629      	mov	r1, r5
 80067ac:	4620      	mov	r0, r4
 80067ae:	f000 f99f 	bl	8006af0 <arm_radix8_butterfly_f32>
 80067b2:	f1b8 0f00 	cmp.w	r8, #0
 80067b6:	d111      	bne.n	80067dc <arm_cfft_f32+0x64>
 80067b8:	2f01      	cmp	r7, #1
 80067ba:	d016      	beq.n	80067ea <arm_cfft_f32+0x72>
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	2d20      	cmp	r5, #32
 80067c2:	d049      	beq.n	8006858 <arm_cfft_f32+0xe0>
 80067c4:	d935      	bls.n	8006832 <arm_cfft_f32+0xba>
 80067c6:	2d40      	cmp	r5, #64	; 0x40
 80067c8:	d0ed      	beq.n	80067a6 <arm_cfft_f32+0x2e>
 80067ca:	2d80      	cmp	r5, #128	; 0x80
 80067cc:	d1f1      	bne.n	80067b2 <arm_cfft_f32+0x3a>
 80067ce:	4621      	mov	r1, r4
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff fcab 	bl	800612c <arm_cfft_radix8by2_f32>
 80067d6:	f1b8 0f00 	cmp.w	r8, #0
 80067da:	d0ed      	beq.n	80067b8 <arm_cfft_f32+0x40>
 80067dc:	68b2      	ldr	r2, [r6, #8]
 80067de:	89b1      	ldrh	r1, [r6, #12]
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 f841 	bl	8006868 <arm_bitreversal_32>
 80067e6:	2f01      	cmp	r7, #1
 80067e8:	d1e8      	bne.n	80067bc <arm_cfft_f32+0x44>
 80067ea:	ee07 5a90 	vmov	s15, r5
 80067ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	d0de      	beq.n	80067bc <arm_cfft_f32+0x44>
 80067fe:	f104 0108 	add.w	r1, r4, #8
 8006802:	2300      	movs	r3, #0
 8006804:	3301      	adds	r3, #1
 8006806:	429d      	cmp	r5, r3
 8006808:	f101 0108 	add.w	r1, r1, #8
 800680c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006810:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006814:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006818:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800681c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006820:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006824:	d1ee      	bne.n	8006804 <arm_cfft_f32+0x8c>
 8006826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800682a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800682e:	d0ba      	beq.n	80067a6 <arm_cfft_f32+0x2e>
 8006830:	e7bf      	b.n	80067b2 <arm_cfft_f32+0x3a>
 8006832:	2d10      	cmp	r5, #16
 8006834:	d0cb      	beq.n	80067ce <arm_cfft_f32+0x56>
 8006836:	e7bc      	b.n	80067b2 <arm_cfft_f32+0x3a>
 8006838:	b19d      	cbz	r5, 8006862 <arm_cfft_f32+0xea>
 800683a:	f101 030c 	add.w	r3, r1, #12
 800683e:	2200      	movs	r2, #0
 8006840:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006844:	3201      	adds	r2, #1
 8006846:	eef1 7a67 	vneg.f32	s15, s15
 800684a:	4295      	cmp	r5, r2
 800684c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006850:	f103 0308 	add.w	r3, r3, #8
 8006854:	d1f4      	bne.n	8006840 <arm_cfft_f32+0xc8>
 8006856:	e798      	b.n	800678a <arm_cfft_f32+0x12>
 8006858:	4621      	mov	r1, r4
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff fd36 	bl	80062cc <arm_cfft_radix8by4_f32>
 8006860:	e7a7      	b.n	80067b2 <arm_cfft_f32+0x3a>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0aa      	beq.n	80067bc <arm_cfft_f32+0x44>
 8006866:	e7b9      	b.n	80067dc <arm_cfft_f32+0x64>

08006868 <arm_bitreversal_32>:
 8006868:	b1e9      	cbz	r1, 80068a6 <arm_bitreversal_32+0x3e>
 800686a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686c:	2500      	movs	r5, #0
 800686e:	f102 0e02 	add.w	lr, r2, #2
 8006872:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006876:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800687a:	08a4      	lsrs	r4, r4, #2
 800687c:	089b      	lsrs	r3, r3, #2
 800687e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006882:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006886:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800688a:	00a6      	lsls	r6, r4, #2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006892:	3304      	adds	r3, #4
 8006894:	1d34      	adds	r4, r6, #4
 8006896:	3502      	adds	r5, #2
 8006898:	58c6      	ldr	r6, [r0, r3]
 800689a:	5907      	ldr	r7, [r0, r4]
 800689c:	50c7      	str	r7, [r0, r3]
 800689e:	428d      	cmp	r5, r1
 80068a0:	5106      	str	r6, [r0, r4]
 80068a2:	d3e6      	bcc.n	8006872 <arm_bitreversal_32+0xa>
 80068a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a6:	4770      	bx	lr

080068a8 <arm_cmplx_mag_f32>:
 80068a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ac:	ed2d 8b02 	vpush	{d8}
 80068b0:	0897      	lsrs	r7, r2, #2
 80068b2:	b084      	sub	sp, #16
 80068b4:	d077      	beq.n	80069a6 <arm_cmplx_mag_f32+0xfe>
 80068b6:	f04f 0800 	mov.w	r8, #0
 80068ba:	f100 0420 	add.w	r4, r0, #32
 80068be:	f101 0510 	add.w	r5, r1, #16
 80068c2:	463e      	mov	r6, r7
 80068c4:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80068c8:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80068cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80068d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80068d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80068dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e0:	f2c0 80c5 	blt.w	8006a6e <arm_cmplx_mag_f32+0x1c6>
 80068e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80068e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80068f0:	f100 80cb 	bmi.w	8006a8a <arm_cmplx_mag_f32+0x1e2>
 80068f4:	ed05 8a04 	vstr	s16, [r5, #-16]
 80068f8:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80068fc:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006900:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006904:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006908:	ee30 0a27 	vadd.f32	s0, s0, s15
 800690c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006914:	f2c0 80a8 	blt.w	8006a68 <arm_cmplx_mag_f32+0x1c0>
 8006918:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800691c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006920:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006924:	f100 80a8 	bmi.w	8006a78 <arm_cmplx_mag_f32+0x1d0>
 8006928:	ed05 8a03 	vstr	s16, [r5, #-12]
 800692c:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006930:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006934:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006938:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800693c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006940:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006948:	f2c0 808b 	blt.w	8006a62 <arm_cmplx_mag_f32+0x1ba>
 800694c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006954:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006958:	f100 80a9 	bmi.w	8006aae <arm_cmplx_mag_f32+0x206>
 800695c:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006960:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006964:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006968:	ee20 0a00 	vmul.f32	s0, s0, s0
 800696c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006970:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006974:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697c:	db6e      	blt.n	8006a5c <arm_cmplx_mag_f32+0x1b4>
 800697e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006986:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800698a:	f100 8087 	bmi.w	8006a9c <arm_cmplx_mag_f32+0x1f4>
 800698e:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006992:	3e01      	subs	r6, #1
 8006994:	f104 0420 	add.w	r4, r4, #32
 8006998:	f105 0510 	add.w	r5, r5, #16
 800699c:	d192      	bne.n	80068c4 <arm_cmplx_mag_f32+0x1c>
 800699e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80069a2:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80069a6:	f012 0203 	ands.w	r2, r2, #3
 80069aa:	d052      	beq.n	8006a52 <arm_cmplx_mag_f32+0x1aa>
 80069ac:	ed90 0a00 	vldr	s0, [r0]
 80069b0:	edd0 7a01 	vldr	s15, [r0, #4]
 80069b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80069b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069bc:	2300      	movs	r3, #0
 80069be:	ee37 0a80 	vadd.f32	s0, s15, s0
 80069c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ca:	bfb8      	it	lt
 80069cc:	600b      	strlt	r3, [r1, #0]
 80069ce:	db08      	blt.n	80069e2 <arm_cmplx_mag_f32+0x13a>
 80069d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80069d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80069dc:	d479      	bmi.n	8006ad2 <arm_cmplx_mag_f32+0x22a>
 80069de:	ed81 8a00 	vstr	s16, [r1]
 80069e2:	3a01      	subs	r2, #1
 80069e4:	d035      	beq.n	8006a52 <arm_cmplx_mag_f32+0x1aa>
 80069e6:	ed90 0a02 	vldr	s0, [r0, #8]
 80069ea:	edd0 7a03 	vldr	s15, [r0, #12]
 80069ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 80069f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069f6:	2300      	movs	r3, #0
 80069f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80069fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a04:	bfb8      	it	lt
 8006a06:	604b      	strlt	r3, [r1, #4]
 8006a08:	db08      	blt.n	8006a1c <arm_cmplx_mag_f32+0x174>
 8006a0a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a12:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006a16:	d453      	bmi.n	8006ac0 <arm_cmplx_mag_f32+0x218>
 8006a18:	ed81 8a01 	vstr	s16, [r1, #4]
 8006a1c:	2a01      	cmp	r2, #1
 8006a1e:	d018      	beq.n	8006a52 <arm_cmplx_mag_f32+0x1aa>
 8006a20:	ed90 0a04 	vldr	s0, [r0, #16]
 8006a24:	edd0 7a05 	vldr	s15, [r0, #20]
 8006a28:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006a2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a30:	2300      	movs	r3, #0
 8006a32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3e:	db19      	blt.n	8006a74 <arm_cmplx_mag_f32+0x1cc>
 8006a40:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006a4c:	d44a      	bmi.n	8006ae4 <arm_cmplx_mag_f32+0x23c>
 8006a4e:	ed81 8a02 	vstr	s16, [r1, #8]
 8006a52:	b004      	add	sp, #16
 8006a54:	ecbd 8b02 	vpop	{d8}
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	f845 8c04 	str.w	r8, [r5, #-4]
 8006a60:	e797      	b.n	8006992 <arm_cmplx_mag_f32+0xea>
 8006a62:	f845 8c08 	str.w	r8, [r5, #-8]
 8006a66:	e77b      	b.n	8006960 <arm_cmplx_mag_f32+0xb8>
 8006a68:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006a6c:	e75e      	b.n	800692c <arm_cmplx_mag_f32+0x84>
 8006a6e:	f845 8c10 	str.w	r8, [r5, #-16]
 8006a72:	e741      	b.n	80068f8 <arm_cmplx_mag_f32+0x50>
 8006a74:	608b      	str	r3, [r1, #8]
 8006a76:	e7ec      	b.n	8006a52 <arm_cmplx_mag_f32+0x1aa>
 8006a78:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006a7c:	9001      	str	r0, [sp, #4]
 8006a7e:	f000 fff1 	bl	8007a64 <sqrtf>
 8006a82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006a86:	9801      	ldr	r0, [sp, #4]
 8006a88:	e74e      	b.n	8006928 <arm_cmplx_mag_f32+0x80>
 8006a8a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006a8e:	9001      	str	r0, [sp, #4]
 8006a90:	f000 ffe8 	bl	8007a64 <sqrtf>
 8006a94:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006a98:	9801      	ldr	r0, [sp, #4]
 8006a9a:	e72b      	b.n	80068f4 <arm_cmplx_mag_f32+0x4c>
 8006a9c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006aa0:	9001      	str	r0, [sp, #4]
 8006aa2:	f000 ffdf 	bl	8007a64 <sqrtf>
 8006aa6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006aaa:	9801      	ldr	r0, [sp, #4]
 8006aac:	e76f      	b.n	800698e <arm_cmplx_mag_f32+0xe6>
 8006aae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006ab2:	9001      	str	r0, [sp, #4]
 8006ab4:	f000 ffd6 	bl	8007a64 <sqrtf>
 8006ab8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006abc:	9801      	ldr	r0, [sp, #4]
 8006abe:	e74d      	b.n	800695c <arm_cmplx_mag_f32+0xb4>
 8006ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac4:	9201      	str	r2, [sp, #4]
 8006ac6:	f000 ffcd 	bl	8007a64 <sqrtf>
 8006aca:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006ace:	9903      	ldr	r1, [sp, #12]
 8006ad0:	e7a2      	b.n	8006a18 <arm_cmplx_mag_f32+0x170>
 8006ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad6:	9201      	str	r2, [sp, #4]
 8006ad8:	f000 ffc4 	bl	8007a64 <sqrtf>
 8006adc:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006ae0:	9903      	ldr	r1, [sp, #12]
 8006ae2:	e77c      	b.n	80069de <arm_cmplx_mag_f32+0x136>
 8006ae4:	9101      	str	r1, [sp, #4]
 8006ae6:	f000 ffbd 	bl	8007a64 <sqrtf>
 8006aea:	9901      	ldr	r1, [sp, #4]
 8006aec:	e7af      	b.n	8006a4e <arm_cmplx_mag_f32+0x1a6>
 8006aee:	bf00      	nop

08006af0 <arm_radix8_butterfly_f32>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	ed2d 8b10 	vpush	{d8-d15}
 8006af8:	b095      	sub	sp, #84	; 0x54
 8006afa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8006afe:	4603      	mov	r3, r0
 8006b00:	3304      	adds	r3, #4
 8006b02:	ed9f bab9 	vldr	s22, [pc, #740]	; 8006de8 <arm_radix8_butterfly_f32+0x2f8>
 8006b06:	9012      	str	r0, [sp, #72]	; 0x48
 8006b08:	468b      	mov	fp, r1
 8006b0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b14:	960f      	str	r6, [sp, #60]	; 0x3c
 8006b16:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006b1a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006b1e:	eb03 0508 	add.w	r5, r3, r8
 8006b22:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006b26:	eb05 040e 	add.w	r4, r5, lr
 8006b2a:	0137      	lsls	r7, r6, #4
 8006b2c:	eba6 030a 	sub.w	r3, r6, sl
 8006b30:	eb04 000e 	add.w	r0, r4, lr
 8006b34:	44b2      	add	sl, r6
 8006b36:	1d3a      	adds	r2, r7, #4
 8006b38:	9702      	str	r7, [sp, #8]
 8006b3a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006b3e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006b42:	ebae 0c06 	sub.w	ip, lr, r6
 8006b46:	9703      	str	r7, [sp, #12]
 8006b48:	eb03 0708 	add.w	r7, r3, r8
 8006b4c:	9701      	str	r7, [sp, #4]
 8006b4e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006b52:	9706      	str	r7, [sp, #24]
 8006b54:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006b56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006b5a:	f10e 0104 	add.w	r1, lr, #4
 8006b5e:	4439      	add	r1, r7
 8006b60:	443a      	add	r2, r7
 8006b62:	0137      	lsls	r7, r6, #4
 8006b64:	00f6      	lsls	r6, r6, #3
 8006b66:	9704      	str	r7, [sp, #16]
 8006b68:	9605      	str	r6, [sp, #20]
 8006b6a:	9f01      	ldr	r7, [sp, #4]
 8006b6c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006b6e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006b72:	f04f 0c00 	mov.w	ip, #0
 8006b76:	edd4 6a00 	vldr	s13, [r4]
 8006b7a:	edd7 1a00 	vldr	s3, [r7]
 8006b7e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006b82:	edd5 5a00 	vldr	s11, [r5]
 8006b86:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006b8a:	ed90 6a00 	vldr	s12, [r0]
 8006b8e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006b92:	ed93 3a00 	vldr	s6, [r3]
 8006b96:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006b9a:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006b9e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006ba2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006ba6:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006baa:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006bae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bb2:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006bb6:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006bba:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006bbe:	ed85 4a00 	vstr	s8, [r5]
 8006bc2:	edd1 6a00 	vldr	s13, [r1]
 8006bc6:	ed94 9a01 	vldr	s18, [r4, #4]
 8006bca:	edd3 2a01 	vldr	s5, [r3, #4]
 8006bce:	edd7 8a01 	vldr	s17, [r7, #4]
 8006bd2:	edd6 0a00 	vldr	s1, [r6]
 8006bd6:	edd5 3a01 	vldr	s7, [r5, #4]
 8006bda:	ed90 8a01 	vldr	s16, [r0, #4]
 8006bde:	ed92 7a00 	vldr	s14, [r2]
 8006be2:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006be6:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8006bea:	ee72 aae8 	vsub.f32	s21, s5, s17
 8006bee:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8006bf2:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8006bf6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006bfa:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8006bfe:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8006c02:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8006c06:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8006c0a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8006c0e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8006c12:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8006c16:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006c1a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8006c1e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8006c22:	ee76 6a89 	vadd.f32	s13, s13, s18
 8006c26:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8006c2a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006c2e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8006c32:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006c36:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8006c3a:	ee33 2a20 	vadd.f32	s4, s6, s1
 8006c3e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006c42:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006c46:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8006c4a:	ee77 0a01 	vadd.f32	s1, s14, s2
 8006c4e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8006c52:	ee37 7a41 	vsub.f32	s14, s14, s2
 8006c56:	ee73 1a84 	vadd.f32	s3, s7, s8
 8006c5a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006c5e:	ee76 3a27 	vadd.f32	s7, s12, s15
 8006c62:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006c66:	ee32 8a00 	vadd.f32	s16, s4, s0
 8006c6a:	ee33 1a45 	vsub.f32	s2, s6, s10
 8006c6e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8006c72:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006c76:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8006c7a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8006c7e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006c82:	ee34 6a67 	vsub.f32	s12, s8, s15
 8006c86:	ee75 4a87 	vadd.f32	s9, s11, s14
 8006c8a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8006c8e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006c92:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006c96:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8006c9a:	44dc      	add	ip, fp
 8006c9c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006ca0:	45e1      	cmp	r9, ip
 8006ca2:	ed86 8a00 	vstr	s16, [r6]
 8006ca6:	ed85 2a01 	vstr	s4, [r5, #4]
 8006caa:	4456      	add	r6, sl
 8006cac:	ed02 0a01 	vstr	s0, [r2, #-4]
 8006cb0:	4455      	add	r5, sl
 8006cb2:	edc0 6a00 	vstr	s13, [r0]
 8006cb6:	ed82 1a00 	vstr	s2, [r2]
 8006cba:	ed80 5a01 	vstr	s10, [r0, #4]
 8006cbe:	4452      	add	r2, sl
 8006cc0:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006cc4:	4450      	add	r0, sl
 8006cc6:	edc7 2a00 	vstr	s5, [r7]
 8006cca:	edc4 4a00 	vstr	s9, [r4]
 8006cce:	ed83 7a00 	vstr	s14, [r3]
 8006cd2:	edc1 5a00 	vstr	s11, [r1]
 8006cd6:	edc7 3a01 	vstr	s7, [r7, #4]
 8006cda:	4451      	add	r1, sl
 8006cdc:	ed84 6a01 	vstr	s12, [r4, #4]
 8006ce0:	4457      	add	r7, sl
 8006ce2:	edc3 7a01 	vstr	s15, [r3, #4]
 8006ce6:	4454      	add	r4, sl
 8006ce8:	4453      	add	r3, sl
 8006cea:	f63f af44 	bhi.w	8006b76 <arm_radix8_butterfly_f32+0x86>
 8006cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cf0:	2b07      	cmp	r3, #7
 8006cf2:	f240 81b7 	bls.w	8007064 <arm_radix8_butterfly_f32+0x574>
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	9903      	ldr	r1, [sp, #12]
 8006cfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006cfc:	9e05      	ldr	r6, [sp, #20]
 8006cfe:	9a04      	ldr	r2, [sp, #16]
 8006d00:	f103 0c08 	add.w	ip, r3, #8
 8006d04:	9b02      	ldr	r3, [sp, #8]
 8006d06:	3108      	adds	r1, #8
 8006d08:	f108 0808 	add.w	r8, r8, #8
 8006d0c:	1841      	adds	r1, r0, r1
 8006d0e:	3608      	adds	r6, #8
 8006d10:	330c      	adds	r3, #12
 8006d12:	4604      	mov	r4, r0
 8006d14:	4444      	add	r4, r8
 8006d16:	18c3      	adds	r3, r0, r3
 8006d18:	9109      	str	r1, [sp, #36]	; 0x24
 8006d1a:	1981      	adds	r1, r0, r6
 8006d1c:	f10e 0e08 	add.w	lr, lr, #8
 8006d20:	3208      	adds	r2, #8
 8006d22:	940b      	str	r4, [sp, #44]	; 0x2c
 8006d24:	9107      	str	r1, [sp, #28]
 8006d26:	4604      	mov	r4, r0
 8006d28:	4601      	mov	r1, r0
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	f100 030c 	add.w	r3, r0, #12
 8006d30:	4474      	add	r4, lr
 8006d32:	f04f 0801 	mov.w	r8, #1
 8006d36:	1882      	adds	r2, r0, r2
 8006d38:	4461      	add	r1, ip
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	940a      	str	r4, [sp, #40]	; 0x28
 8006d40:	46c1      	mov	r9, r8
 8006d42:	9208      	str	r2, [sp, #32]
 8006d44:	46d8      	mov	r8, fp
 8006d46:	9106      	str	r1, [sp, #24]
 8006d48:	f04f 0e00 	mov.w	lr, #0
 8006d4c:	469b      	mov	fp, r3
 8006d4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d52:	449e      	add	lr, r3
 8006d54:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8006d58:	441a      	add	r2, r3
 8006d5a:	920e      	str	r2, [sp, #56]	; 0x38
 8006d5c:	441a      	add	r2, r3
 8006d5e:	18d4      	adds	r4, r2, r3
 8006d60:	18e5      	adds	r5, r4, r3
 8006d62:	18ee      	adds	r6, r5, r3
 8006d64:	18f7      	adds	r7, r6, r3
 8006d66:	eb07 0c03 	add.w	ip, r7, r3
 8006d6a:	920d      	str	r2, [sp, #52]	; 0x34
 8006d6c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8006d70:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8006d74:	910c      	str	r1, [sp, #48]	; 0x30
 8006d76:	4419      	add	r1, r3
 8006d78:	9103      	str	r1, [sp, #12]
 8006d7a:	4419      	add	r1, r3
 8006d7c:	18ca      	adds	r2, r1, r3
 8006d7e:	9202      	str	r2, [sp, #8]
 8006d80:	441a      	add	r2, r3
 8006d82:	18d0      	adds	r0, r2, r3
 8006d84:	ed92 ea01 	vldr	s28, [r2, #4]
 8006d88:	9a02      	ldr	r2, [sp, #8]
 8006d8a:	edd4 7a00 	vldr	s15, [r4]
 8006d8e:	edd2 da01 	vldr	s27, [r2, #4]
 8006d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d94:	ed91 da01 	vldr	s26, [r1, #4]
 8006d98:	ed92 ca01 	vldr	s24, [r2, #4]
 8006d9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d9e:	9903      	ldr	r1, [sp, #12]
 8006da0:	edcd 7a03 	vstr	s15, [sp, #12]
 8006da4:	edd2 7a00 	vldr	s15, [r2]
 8006da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006daa:	edcd 7a02 	vstr	s15, [sp, #8]
 8006dae:	edd2 7a00 	vldr	s15, [r2]
 8006db2:	edd0 ea01 	vldr	s29, [r0, #4]
 8006db6:	edd1 ca01 	vldr	s25, [r1, #4]
 8006dba:	eddc ba00 	vldr	s23, [ip]
 8006dbe:	edd7 aa00 	vldr	s21, [r7]
 8006dc2:	ed96 aa00 	vldr	s20, [r6]
 8006dc6:	edd5 9a00 	vldr	s19, [r5]
 8006dca:	edcd 7a01 	vstr	s15, [sp, #4]
 8006dce:	4403      	add	r3, r0
 8006dd0:	ed93 fa01 	vldr	s30, [r3, #4]
 8006dd4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8006dd8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8006ddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006de0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006de4:	46cc      	mov	ip, r9
 8006de6:	e001      	b.n	8006dec <arm_radix8_butterfly_f32+0x2fc>
 8006de8:	3f3504f3 	.word	0x3f3504f3
 8006dec:	ed91 6a00 	vldr	s12, [r1]
 8006df0:	ed93 5a00 	vldr	s10, [r3]
 8006df4:	edd0 fa00 	vldr	s31, [r0]
 8006df8:	edd4 7a00 	vldr	s15, [r4]
 8006dfc:	ed95 7a00 	vldr	s14, [r5]
 8006e00:	ed56 3a01 	vldr	s7, [r6, #-4]
 8006e04:	ed17 3a01 	vldr	s6, [r7, #-4]
 8006e08:	ed92 2a00 	vldr	s4, [r2]
 8006e0c:	ed96 0a00 	vldr	s0, [r6]
 8006e10:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006e14:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006e18:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8006e1c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006e20:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006e24:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006e28:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006e2c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006e30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e34:	ed06 6a01 	vstr	s12, [r6, #-4]
 8006e38:	edd4 8a01 	vldr	s17, [r4, #4]
 8006e3c:	ed92 9a01 	vldr	s18, [r2, #4]
 8006e40:	edd7 0a00 	vldr	s1, [r7]
 8006e44:	edd1 2a01 	vldr	s5, [r1, #4]
 8006e48:	ed95 7a01 	vldr	s14, [r5, #4]
 8006e4c:	ed93 6a01 	vldr	s12, [r3, #4]
 8006e50:	edd0 5a01 	vldr	s11, [r0, #4]
 8006e54:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006e58:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8006e5c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006e60:	ee78 fac7 	vsub.f32	s31, s17, s14
 8006e64:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006e68:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006e6c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006e70:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006e74:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006e78:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006e7c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006e80:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8006e84:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006e88:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8006e8c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8006e90:	ee72 fa87 	vadd.f32	s31, s5, s14
 8006e94:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006e98:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006e9c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006ea0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006ea4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006ea8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006eac:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8006eb0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8006eb4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006eb8:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006ebc:	ee74 0a22 	vadd.f32	s1, s8, s5
 8006ec0:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006ec4:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006ec8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006ecc:	ee32 4a64 	vsub.f32	s8, s4, s9
 8006ed0:	ee73 8a09 	vadd.f32	s17, s6, s18
 8006ed4:	ee74 4a82 	vadd.f32	s9, s9, s4
 8006ed8:	ee33 9a49 	vsub.f32	s18, s6, s18
 8006edc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8006ee0:	ee35 3a85 	vadd.f32	s6, s11, s10
 8006ee4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006ee8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8006eec:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006ef0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8006ef4:	ee30 7a68 	vsub.f32	s14, s0, s17
 8006ef8:	ee35 8a03 	vadd.f32	s16, s10, s6
 8006efc:	ee38 0a80 	vadd.f32	s0, s17, s0
 8006f00:	ee73 3a82 	vadd.f32	s7, s7, s4
 8006f04:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8006f08:	ed9d 2a01 	vldr	s4, [sp, #4]
 8006f0c:	eddd 1a02 	vldr	s3, [sp, #8]
 8006f10:	ee35 5a43 	vsub.f32	s10, s10, s6
 8006f14:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8006f18:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8006f1c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8006f20:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006f24:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8006f28:	ee76 5a49 	vsub.f32	s11, s12, s18
 8006f2c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8006f30:	ee39 6a06 	vadd.f32	s12, s18, s12
 8006f34:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8006f38:	ee21 4a84 	vmul.f32	s8, s3, s8
 8006f3c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8006f40:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006f44:	ee22 2a08 	vmul.f32	s4, s4, s16
 8006f48:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006f4c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8006f50:	ee31 1a09 	vadd.f32	s2, s2, s18
 8006f54:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8006f58:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8006f5c:	ee74 0a60 	vsub.f32	s1, s8, s1
 8006f60:	ee37 7a48 	vsub.f32	s14, s14, s16
 8006f64:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8006f68:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8006f6c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8006f70:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8006f74:	ee38 2a89 	vadd.f32	s4, s17, s18
 8006f78:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8006f7c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8006f80:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8006f84:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8006f88:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8006f8c:	eddd 5a03 	vldr	s11, [sp, #12]
 8006f90:	edc6 fa00 	vstr	s31, [r6]
 8006f94:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8006f98:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006f9c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8006fa0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8006fa4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8006fa8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8006fac:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8006fb0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8006fb4:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006fb8:	ee74 4a89 	vadd.f32	s9, s9, s18
 8006fbc:	ee34 3a43 	vsub.f32	s6, s8, s6
 8006fc0:	ee78 8a85 	vadd.f32	s17, s17, s10
 8006fc4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006fc8:	44c4      	add	ip, r8
 8006fca:	45e3      	cmp	fp, ip
 8006fcc:	edc3 3a00 	vstr	s7, [r3]
 8006fd0:	edc3 6a01 	vstr	s13, [r3, #4]
 8006fd4:	4456      	add	r6, sl
 8006fd6:	ed07 1a01 	vstr	s2, [r7, #-4]
 8006fda:	edc7 0a00 	vstr	s1, [r7]
 8006fde:	4453      	add	r3, sl
 8006fe0:	ed80 2a00 	vstr	s4, [r0]
 8006fe4:	edc0 2a01 	vstr	s5, [r0, #4]
 8006fe8:	4457      	add	r7, sl
 8006fea:	edc2 1a00 	vstr	s3, [r2]
 8006fee:	ed82 7a01 	vstr	s14, [r2, #4]
 8006ff2:	4450      	add	r0, sl
 8006ff4:	ed85 8a00 	vstr	s16, [r5]
 8006ff8:	ed85 0a01 	vstr	s0, [r5, #4]
 8006ffc:	4452      	add	r2, sl
 8006ffe:	edc1 4a00 	vstr	s9, [r1]
 8007002:	4455      	add	r5, sl
 8007004:	ed81 3a01 	vstr	s6, [r1, #4]
 8007008:	edc4 8a00 	vstr	s17, [r4]
 800700c:	ed84 6a01 	vstr	s12, [r4, #4]
 8007010:	4451      	add	r1, sl
 8007012:	4454      	add	r4, sl
 8007014:	f63f aeea 	bhi.w	8006dec <arm_radix8_butterfly_f32+0x2fc>
 8007018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701a:	3308      	adds	r3, #8
 800701c:	930b      	str	r3, [sp, #44]	; 0x2c
 800701e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007020:	3308      	adds	r3, #8
 8007022:	930a      	str	r3, [sp, #40]	; 0x28
 8007024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007026:	3308      	adds	r3, #8
 8007028:	9309      	str	r3, [sp, #36]	; 0x24
 800702a:	9b08      	ldr	r3, [sp, #32]
 800702c:	3308      	adds	r3, #8
 800702e:	9308      	str	r3, [sp, #32]
 8007030:	9b07      	ldr	r3, [sp, #28]
 8007032:	3308      	adds	r3, #8
 8007034:	9307      	str	r3, [sp, #28]
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	3308      	adds	r3, #8
 800703a:	9306      	str	r3, [sp, #24]
 800703c:	9b05      	ldr	r3, [sp, #20]
 800703e:	3308      	adds	r3, #8
 8007040:	9305      	str	r3, [sp, #20]
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	3308      	adds	r3, #8
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800704a:	f109 0901 	add.w	r9, r9, #1
 800704e:	454b      	cmp	r3, r9
 8007050:	f47f ae7d 	bne.w	8006d4e <arm_radix8_butterfly_f32+0x25e>
 8007054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	b29b      	uxth	r3, r3
 800705a:	46d9      	mov	r9, fp
 800705c:	9310      	str	r3, [sp, #64]	; 0x40
 800705e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8007062:	e554      	b.n	8006b0e <arm_radix8_butterfly_f32+0x1e>
 8007064:	b015      	add	sp, #84	; 0x54
 8007066:	ecbd 8b10 	vpop	{d8-d15}
 800706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706e:	bf00      	nop

08007070 <siprintf>:
 8007070:	b40e      	push	{r1, r2, r3}
 8007072:	b500      	push	{lr}
 8007074:	b09c      	sub	sp, #112	; 0x70
 8007076:	ab1d      	add	r3, sp, #116	; 0x74
 8007078:	9002      	str	r0, [sp, #8]
 800707a:	9006      	str	r0, [sp, #24]
 800707c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007080:	4809      	ldr	r0, [pc, #36]	; (80070a8 <siprintf+0x38>)
 8007082:	9107      	str	r1, [sp, #28]
 8007084:	9104      	str	r1, [sp, #16]
 8007086:	4909      	ldr	r1, [pc, #36]	; (80070ac <siprintf+0x3c>)
 8007088:	f853 2b04 	ldr.w	r2, [r3], #4
 800708c:	9105      	str	r1, [sp, #20]
 800708e:	6800      	ldr	r0, [r0, #0]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	a902      	add	r1, sp, #8
 8007094:	f000 f9f6 	bl	8007484 <_svfiprintf_r>
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	b01c      	add	sp, #112	; 0x70
 80070a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a4:	b003      	add	sp, #12
 80070a6:	4770      	bx	lr
 80070a8:	20002064 	.word	0x20002064
 80070ac:	ffff0208 	.word	0xffff0208

080070b0 <memset>:
 80070b0:	4402      	add	r2, r0
 80070b2:	4603      	mov	r3, r0
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d100      	bne.n	80070ba <memset+0xa>
 80070b8:	4770      	bx	lr
 80070ba:	f803 1b01 	strb.w	r1, [r3], #1
 80070be:	e7f9      	b.n	80070b4 <memset+0x4>

080070c0 <_reclaim_reent>:
 80070c0:	4b29      	ldr	r3, [pc, #164]	; (8007168 <_reclaim_reent+0xa8>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4283      	cmp	r3, r0
 80070c6:	b570      	push	{r4, r5, r6, lr}
 80070c8:	4604      	mov	r4, r0
 80070ca:	d04b      	beq.n	8007164 <_reclaim_reent+0xa4>
 80070cc:	69c3      	ldr	r3, [r0, #28]
 80070ce:	b143      	cbz	r3, 80070e2 <_reclaim_reent+0x22>
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d144      	bne.n	8007160 <_reclaim_reent+0xa0>
 80070d6:	69e3      	ldr	r3, [r4, #28]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	b111      	cbz	r1, 80070e2 <_reclaim_reent+0x22>
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 f87f 	bl	80071e0 <_free_r>
 80070e2:	6961      	ldr	r1, [r4, #20]
 80070e4:	b111      	cbz	r1, 80070ec <_reclaim_reent+0x2c>
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f87a 	bl	80071e0 <_free_r>
 80070ec:	69e1      	ldr	r1, [r4, #28]
 80070ee:	b111      	cbz	r1, 80070f6 <_reclaim_reent+0x36>
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 f875 	bl	80071e0 <_free_r>
 80070f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070f8:	b111      	cbz	r1, 8007100 <_reclaim_reent+0x40>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f870 	bl	80071e0 <_free_r>
 8007100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007102:	b111      	cbz	r1, 800710a <_reclaim_reent+0x4a>
 8007104:	4620      	mov	r0, r4
 8007106:	f000 f86b 	bl	80071e0 <_free_r>
 800710a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800710c:	b111      	cbz	r1, 8007114 <_reclaim_reent+0x54>
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f866 	bl	80071e0 <_free_r>
 8007114:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007116:	b111      	cbz	r1, 800711e <_reclaim_reent+0x5e>
 8007118:	4620      	mov	r0, r4
 800711a:	f000 f861 	bl	80071e0 <_free_r>
 800711e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007120:	b111      	cbz	r1, 8007128 <_reclaim_reent+0x68>
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f85c 	bl	80071e0 <_free_r>
 8007128:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800712a:	b111      	cbz	r1, 8007132 <_reclaim_reent+0x72>
 800712c:	4620      	mov	r0, r4
 800712e:	f000 f857 	bl	80071e0 <_free_r>
 8007132:	6a23      	ldr	r3, [r4, #32]
 8007134:	b1b3      	cbz	r3, 8007164 <_reclaim_reent+0xa4>
 8007136:	4620      	mov	r0, r4
 8007138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800713c:	4718      	bx	r3
 800713e:	5949      	ldr	r1, [r1, r5]
 8007140:	b941      	cbnz	r1, 8007154 <_reclaim_reent+0x94>
 8007142:	3504      	adds	r5, #4
 8007144:	69e3      	ldr	r3, [r4, #28]
 8007146:	2d80      	cmp	r5, #128	; 0x80
 8007148:	68d9      	ldr	r1, [r3, #12]
 800714a:	d1f8      	bne.n	800713e <_reclaim_reent+0x7e>
 800714c:	4620      	mov	r0, r4
 800714e:	f000 f847 	bl	80071e0 <_free_r>
 8007152:	e7c0      	b.n	80070d6 <_reclaim_reent+0x16>
 8007154:	680e      	ldr	r6, [r1, #0]
 8007156:	4620      	mov	r0, r4
 8007158:	f000 f842 	bl	80071e0 <_free_r>
 800715c:	4631      	mov	r1, r6
 800715e:	e7ef      	b.n	8007140 <_reclaim_reent+0x80>
 8007160:	2500      	movs	r5, #0
 8007162:	e7ef      	b.n	8007144 <_reclaim_reent+0x84>
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	bf00      	nop
 8007168:	20002064 	.word	0x20002064

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20002064 	.word	0x20002064

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	; (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	; (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	; (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	; (80071bc <__libc_init_array+0x44>)
 800718c:	f000 fc8c 	bl	8007aa8 <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	0801b8d8 	.word	0x0801b8d8
 80071b4:	0801b8d8 	.word	0x0801b8d8
 80071b8:	0801b8d8 	.word	0x0801b8d8
 80071bc:	0801b8dc 	.word	0x0801b8dc

080071c0 <__retarget_lock_acquire_recursive>:
 80071c0:	4770      	bx	lr

080071c2 <__retarget_lock_release_recursive>:
 80071c2:	4770      	bx	lr

080071c4 <memcpy>:
 80071c4:	440a      	add	r2, r1
 80071c6:	4291      	cmp	r1, r2
 80071c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80071cc:	d100      	bne.n	80071d0 <memcpy+0xc>
 80071ce:	4770      	bx	lr
 80071d0:	b510      	push	{r4, lr}
 80071d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071da:	4291      	cmp	r1, r2
 80071dc:	d1f9      	bne.n	80071d2 <memcpy+0xe>
 80071de:	bd10      	pop	{r4, pc}

080071e0 <_free_r>:
 80071e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d044      	beq.n	8007270 <_free_r+0x90>
 80071e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ea:	9001      	str	r0, [sp, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f1a1 0404 	sub.w	r4, r1, #4
 80071f2:	bfb8      	it	lt
 80071f4:	18e4      	addlt	r4, r4, r3
 80071f6:	f000 f8df 	bl	80073b8 <__malloc_lock>
 80071fa:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <_free_r+0x94>)
 80071fc:	9801      	ldr	r0, [sp, #4]
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	b933      	cbnz	r3, 8007210 <_free_r+0x30>
 8007202:	6063      	str	r3, [r4, #4]
 8007204:	6014      	str	r4, [r2, #0]
 8007206:	b003      	add	sp, #12
 8007208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800720c:	f000 b8da 	b.w	80073c4 <__malloc_unlock>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d908      	bls.n	8007226 <_free_r+0x46>
 8007214:	6825      	ldr	r5, [r4, #0]
 8007216:	1961      	adds	r1, r4, r5
 8007218:	428b      	cmp	r3, r1
 800721a:	bf01      	itttt	eq
 800721c:	6819      	ldreq	r1, [r3, #0]
 800721e:	685b      	ldreq	r3, [r3, #4]
 8007220:	1949      	addeq	r1, r1, r5
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	e7ed      	b.n	8007202 <_free_r+0x22>
 8007226:	461a      	mov	r2, r3
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	b10b      	cbz	r3, 8007230 <_free_r+0x50>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d9fa      	bls.n	8007226 <_free_r+0x46>
 8007230:	6811      	ldr	r1, [r2, #0]
 8007232:	1855      	adds	r5, r2, r1
 8007234:	42a5      	cmp	r5, r4
 8007236:	d10b      	bne.n	8007250 <_free_r+0x70>
 8007238:	6824      	ldr	r4, [r4, #0]
 800723a:	4421      	add	r1, r4
 800723c:	1854      	adds	r4, r2, r1
 800723e:	42a3      	cmp	r3, r4
 8007240:	6011      	str	r1, [r2, #0]
 8007242:	d1e0      	bne.n	8007206 <_free_r+0x26>
 8007244:	681c      	ldr	r4, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	6053      	str	r3, [r2, #4]
 800724a:	440c      	add	r4, r1
 800724c:	6014      	str	r4, [r2, #0]
 800724e:	e7da      	b.n	8007206 <_free_r+0x26>
 8007250:	d902      	bls.n	8007258 <_free_r+0x78>
 8007252:	230c      	movs	r3, #12
 8007254:	6003      	str	r3, [r0, #0]
 8007256:	e7d6      	b.n	8007206 <_free_r+0x26>
 8007258:	6825      	ldr	r5, [r4, #0]
 800725a:	1961      	adds	r1, r4, r5
 800725c:	428b      	cmp	r3, r1
 800725e:	bf04      	itt	eq
 8007260:	6819      	ldreq	r1, [r3, #0]
 8007262:	685b      	ldreq	r3, [r3, #4]
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	bf04      	itt	eq
 8007268:	1949      	addeq	r1, r1, r5
 800726a:	6021      	streq	r1, [r4, #0]
 800726c:	6054      	str	r4, [r2, #4]
 800726e:	e7ca      	b.n	8007206 <_free_r+0x26>
 8007270:	b003      	add	sp, #12
 8007272:	bd30      	pop	{r4, r5, pc}
 8007274:	2000e710 	.word	0x2000e710

08007278 <sbrk_aligned>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4e0e      	ldr	r6, [pc, #56]	; (80072b4 <sbrk_aligned+0x3c>)
 800727c:	460c      	mov	r4, r1
 800727e:	6831      	ldr	r1, [r6, #0]
 8007280:	4605      	mov	r5, r0
 8007282:	b911      	cbnz	r1, 800728a <sbrk_aligned+0x12>
 8007284:	f000 fba6 	bl	80079d4 <_sbrk_r>
 8007288:	6030      	str	r0, [r6, #0]
 800728a:	4621      	mov	r1, r4
 800728c:	4628      	mov	r0, r5
 800728e:	f000 fba1 	bl	80079d4 <_sbrk_r>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	d00a      	beq.n	80072ac <sbrk_aligned+0x34>
 8007296:	1cc4      	adds	r4, r0, #3
 8007298:	f024 0403 	bic.w	r4, r4, #3
 800729c:	42a0      	cmp	r0, r4
 800729e:	d007      	beq.n	80072b0 <sbrk_aligned+0x38>
 80072a0:	1a21      	subs	r1, r4, r0
 80072a2:	4628      	mov	r0, r5
 80072a4:	f000 fb96 	bl	80079d4 <_sbrk_r>
 80072a8:	3001      	adds	r0, #1
 80072aa:	d101      	bne.n	80072b0 <sbrk_aligned+0x38>
 80072ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072b0:	4620      	mov	r0, r4
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	2000e714 	.word	0x2000e714

080072b8 <_malloc_r>:
 80072b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072bc:	1ccd      	adds	r5, r1, #3
 80072be:	f025 0503 	bic.w	r5, r5, #3
 80072c2:	3508      	adds	r5, #8
 80072c4:	2d0c      	cmp	r5, #12
 80072c6:	bf38      	it	cc
 80072c8:	250c      	movcc	r5, #12
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	4607      	mov	r7, r0
 80072ce:	db01      	blt.n	80072d4 <_malloc_r+0x1c>
 80072d0:	42a9      	cmp	r1, r5
 80072d2:	d905      	bls.n	80072e0 <_malloc_r+0x28>
 80072d4:	230c      	movs	r3, #12
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	2600      	movs	r6, #0
 80072da:	4630      	mov	r0, r6
 80072dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073b4 <_malloc_r+0xfc>
 80072e4:	f000 f868 	bl	80073b8 <__malloc_lock>
 80072e8:	f8d8 3000 	ldr.w	r3, [r8]
 80072ec:	461c      	mov	r4, r3
 80072ee:	bb5c      	cbnz	r4, 8007348 <_malloc_r+0x90>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7ff ffc0 	bl	8007278 <sbrk_aligned>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	4604      	mov	r4, r0
 80072fc:	d155      	bne.n	80073aa <_malloc_r+0xf2>
 80072fe:	f8d8 4000 	ldr.w	r4, [r8]
 8007302:	4626      	mov	r6, r4
 8007304:	2e00      	cmp	r6, #0
 8007306:	d145      	bne.n	8007394 <_malloc_r+0xdc>
 8007308:	2c00      	cmp	r4, #0
 800730a:	d048      	beq.n	800739e <_malloc_r+0xe6>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	4631      	mov	r1, r6
 8007310:	4638      	mov	r0, r7
 8007312:	eb04 0903 	add.w	r9, r4, r3
 8007316:	f000 fb5d 	bl	80079d4 <_sbrk_r>
 800731a:	4581      	cmp	r9, r0
 800731c:	d13f      	bne.n	800739e <_malloc_r+0xe6>
 800731e:	6821      	ldr	r1, [r4, #0]
 8007320:	1a6d      	subs	r5, r5, r1
 8007322:	4629      	mov	r1, r5
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff ffa7 	bl	8007278 <sbrk_aligned>
 800732a:	3001      	adds	r0, #1
 800732c:	d037      	beq.n	800739e <_malloc_r+0xe6>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	442b      	add	r3, r5
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	f8d8 3000 	ldr.w	r3, [r8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d038      	beq.n	80073ae <_malloc_r+0xf6>
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	42a2      	cmp	r2, r4
 8007340:	d12b      	bne.n	800739a <_malloc_r+0xe2>
 8007342:	2200      	movs	r2, #0
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	e00f      	b.n	8007368 <_malloc_r+0xb0>
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	1b52      	subs	r2, r2, r5
 800734c:	d41f      	bmi.n	800738e <_malloc_r+0xd6>
 800734e:	2a0b      	cmp	r2, #11
 8007350:	d917      	bls.n	8007382 <_malloc_r+0xca>
 8007352:	1961      	adds	r1, r4, r5
 8007354:	42a3      	cmp	r3, r4
 8007356:	6025      	str	r5, [r4, #0]
 8007358:	bf18      	it	ne
 800735a:	6059      	strne	r1, [r3, #4]
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	bf08      	it	eq
 8007360:	f8c8 1000 	streq.w	r1, [r8]
 8007364:	5162      	str	r2, [r4, r5]
 8007366:	604b      	str	r3, [r1, #4]
 8007368:	4638      	mov	r0, r7
 800736a:	f104 060b 	add.w	r6, r4, #11
 800736e:	f000 f829 	bl	80073c4 <__malloc_unlock>
 8007372:	f026 0607 	bic.w	r6, r6, #7
 8007376:	1d23      	adds	r3, r4, #4
 8007378:	1af2      	subs	r2, r6, r3
 800737a:	d0ae      	beq.n	80072da <_malloc_r+0x22>
 800737c:	1b9b      	subs	r3, r3, r6
 800737e:	50a3      	str	r3, [r4, r2]
 8007380:	e7ab      	b.n	80072da <_malloc_r+0x22>
 8007382:	42a3      	cmp	r3, r4
 8007384:	6862      	ldr	r2, [r4, #4]
 8007386:	d1dd      	bne.n	8007344 <_malloc_r+0x8c>
 8007388:	f8c8 2000 	str.w	r2, [r8]
 800738c:	e7ec      	b.n	8007368 <_malloc_r+0xb0>
 800738e:	4623      	mov	r3, r4
 8007390:	6864      	ldr	r4, [r4, #4]
 8007392:	e7ac      	b.n	80072ee <_malloc_r+0x36>
 8007394:	4634      	mov	r4, r6
 8007396:	6876      	ldr	r6, [r6, #4]
 8007398:	e7b4      	b.n	8007304 <_malloc_r+0x4c>
 800739a:	4613      	mov	r3, r2
 800739c:	e7cc      	b.n	8007338 <_malloc_r+0x80>
 800739e:	230c      	movs	r3, #12
 80073a0:	603b      	str	r3, [r7, #0]
 80073a2:	4638      	mov	r0, r7
 80073a4:	f000 f80e 	bl	80073c4 <__malloc_unlock>
 80073a8:	e797      	b.n	80072da <_malloc_r+0x22>
 80073aa:	6025      	str	r5, [r4, #0]
 80073ac:	e7dc      	b.n	8007368 <_malloc_r+0xb0>
 80073ae:	605b      	str	r3, [r3, #4]
 80073b0:	deff      	udf	#255	; 0xff
 80073b2:	bf00      	nop
 80073b4:	2000e710 	.word	0x2000e710

080073b8 <__malloc_lock>:
 80073b8:	4801      	ldr	r0, [pc, #4]	; (80073c0 <__malloc_lock+0x8>)
 80073ba:	f7ff bf01 	b.w	80071c0 <__retarget_lock_acquire_recursive>
 80073be:	bf00      	nop
 80073c0:	2000e70c 	.word	0x2000e70c

080073c4 <__malloc_unlock>:
 80073c4:	4801      	ldr	r0, [pc, #4]	; (80073cc <__malloc_unlock+0x8>)
 80073c6:	f7ff befc 	b.w	80071c2 <__retarget_lock_release_recursive>
 80073ca:	bf00      	nop
 80073cc:	2000e70c 	.word	0x2000e70c

080073d0 <__ssputs_r>:
 80073d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	688e      	ldr	r6, [r1, #8]
 80073d6:	461f      	mov	r7, r3
 80073d8:	42be      	cmp	r6, r7
 80073da:	680b      	ldr	r3, [r1, #0]
 80073dc:	4682      	mov	sl, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	4690      	mov	r8, r2
 80073e2:	d82c      	bhi.n	800743e <__ssputs_r+0x6e>
 80073e4:	898a      	ldrh	r2, [r1, #12]
 80073e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073ea:	d026      	beq.n	800743a <__ssputs_r+0x6a>
 80073ec:	6965      	ldr	r5, [r4, #20]
 80073ee:	6909      	ldr	r1, [r1, #16]
 80073f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073f4:	eba3 0901 	sub.w	r9, r3, r1
 80073f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073fc:	1c7b      	adds	r3, r7, #1
 80073fe:	444b      	add	r3, r9
 8007400:	106d      	asrs	r5, r5, #1
 8007402:	429d      	cmp	r5, r3
 8007404:	bf38      	it	cc
 8007406:	461d      	movcc	r5, r3
 8007408:	0553      	lsls	r3, r2, #21
 800740a:	d527      	bpl.n	800745c <__ssputs_r+0x8c>
 800740c:	4629      	mov	r1, r5
 800740e:	f7ff ff53 	bl	80072b8 <_malloc_r>
 8007412:	4606      	mov	r6, r0
 8007414:	b360      	cbz	r0, 8007470 <__ssputs_r+0xa0>
 8007416:	6921      	ldr	r1, [r4, #16]
 8007418:	464a      	mov	r2, r9
 800741a:	f7ff fed3 	bl	80071c4 <memcpy>
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007428:	81a3      	strh	r3, [r4, #12]
 800742a:	6126      	str	r6, [r4, #16]
 800742c:	6165      	str	r5, [r4, #20]
 800742e:	444e      	add	r6, r9
 8007430:	eba5 0509 	sub.w	r5, r5, r9
 8007434:	6026      	str	r6, [r4, #0]
 8007436:	60a5      	str	r5, [r4, #8]
 8007438:	463e      	mov	r6, r7
 800743a:	42be      	cmp	r6, r7
 800743c:	d900      	bls.n	8007440 <__ssputs_r+0x70>
 800743e:	463e      	mov	r6, r7
 8007440:	6820      	ldr	r0, [r4, #0]
 8007442:	4632      	mov	r2, r6
 8007444:	4641      	mov	r1, r8
 8007446:	f000 faab 	bl	80079a0 <memmove>
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	1b9b      	subs	r3, r3, r6
 800744e:	60a3      	str	r3, [r4, #8]
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	4433      	add	r3, r6
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	2000      	movs	r0, #0
 8007458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745c:	462a      	mov	r2, r5
 800745e:	f000 fac9 	bl	80079f4 <_realloc_r>
 8007462:	4606      	mov	r6, r0
 8007464:	2800      	cmp	r0, #0
 8007466:	d1e0      	bne.n	800742a <__ssputs_r+0x5a>
 8007468:	6921      	ldr	r1, [r4, #16]
 800746a:	4650      	mov	r0, sl
 800746c:	f7ff feb8 	bl	80071e0 <_free_r>
 8007470:	230c      	movs	r3, #12
 8007472:	f8ca 3000 	str.w	r3, [sl]
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747c:	81a3      	strh	r3, [r4, #12]
 800747e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007482:	e7e9      	b.n	8007458 <__ssputs_r+0x88>

08007484 <_svfiprintf_r>:
 8007484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	4698      	mov	r8, r3
 800748a:	898b      	ldrh	r3, [r1, #12]
 800748c:	061b      	lsls	r3, r3, #24
 800748e:	b09d      	sub	sp, #116	; 0x74
 8007490:	4607      	mov	r7, r0
 8007492:	460d      	mov	r5, r1
 8007494:	4614      	mov	r4, r2
 8007496:	d50e      	bpl.n	80074b6 <_svfiprintf_r+0x32>
 8007498:	690b      	ldr	r3, [r1, #16]
 800749a:	b963      	cbnz	r3, 80074b6 <_svfiprintf_r+0x32>
 800749c:	2140      	movs	r1, #64	; 0x40
 800749e:	f7ff ff0b 	bl	80072b8 <_malloc_r>
 80074a2:	6028      	str	r0, [r5, #0]
 80074a4:	6128      	str	r0, [r5, #16]
 80074a6:	b920      	cbnz	r0, 80074b2 <_svfiprintf_r+0x2e>
 80074a8:	230c      	movs	r3, #12
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074b0:	e0d0      	b.n	8007654 <_svfiprintf_r+0x1d0>
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	616b      	str	r3, [r5, #20]
 80074b6:	2300      	movs	r3, #0
 80074b8:	9309      	str	r3, [sp, #36]	; 0x24
 80074ba:	2320      	movs	r3, #32
 80074bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074c4:	2330      	movs	r3, #48	; 0x30
 80074c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800766c <_svfiprintf_r+0x1e8>
 80074ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ce:	f04f 0901 	mov.w	r9, #1
 80074d2:	4623      	mov	r3, r4
 80074d4:	469a      	mov	sl, r3
 80074d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074da:	b10a      	cbz	r2, 80074e0 <_svfiprintf_r+0x5c>
 80074dc:	2a25      	cmp	r2, #37	; 0x25
 80074de:	d1f9      	bne.n	80074d4 <_svfiprintf_r+0x50>
 80074e0:	ebba 0b04 	subs.w	fp, sl, r4
 80074e4:	d00b      	beq.n	80074fe <_svfiprintf_r+0x7a>
 80074e6:	465b      	mov	r3, fp
 80074e8:	4622      	mov	r2, r4
 80074ea:	4629      	mov	r1, r5
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7ff ff6f 	bl	80073d0 <__ssputs_r>
 80074f2:	3001      	adds	r0, #1
 80074f4:	f000 80a9 	beq.w	800764a <_svfiprintf_r+0x1c6>
 80074f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074fa:	445a      	add	r2, fp
 80074fc:	9209      	str	r2, [sp, #36]	; 0x24
 80074fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80a1 	beq.w	800764a <_svfiprintf_r+0x1c6>
 8007508:	2300      	movs	r3, #0
 800750a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800750e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007512:	f10a 0a01 	add.w	sl, sl, #1
 8007516:	9304      	str	r3, [sp, #16]
 8007518:	9307      	str	r3, [sp, #28]
 800751a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800751e:	931a      	str	r3, [sp, #104]	; 0x68
 8007520:	4654      	mov	r4, sl
 8007522:	2205      	movs	r2, #5
 8007524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007528:	4850      	ldr	r0, [pc, #320]	; (800766c <_svfiprintf_r+0x1e8>)
 800752a:	f7f8 fe59 	bl	80001e0 <memchr>
 800752e:	9a04      	ldr	r2, [sp, #16]
 8007530:	b9d8      	cbnz	r0, 800756a <_svfiprintf_r+0xe6>
 8007532:	06d0      	lsls	r0, r2, #27
 8007534:	bf44      	itt	mi
 8007536:	2320      	movmi	r3, #32
 8007538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800753c:	0711      	lsls	r1, r2, #28
 800753e:	bf44      	itt	mi
 8007540:	232b      	movmi	r3, #43	; 0x2b
 8007542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007546:	f89a 3000 	ldrb.w	r3, [sl]
 800754a:	2b2a      	cmp	r3, #42	; 0x2a
 800754c:	d015      	beq.n	800757a <_svfiprintf_r+0xf6>
 800754e:	9a07      	ldr	r2, [sp, #28]
 8007550:	4654      	mov	r4, sl
 8007552:	2000      	movs	r0, #0
 8007554:	f04f 0c0a 	mov.w	ip, #10
 8007558:	4621      	mov	r1, r4
 800755a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800755e:	3b30      	subs	r3, #48	; 0x30
 8007560:	2b09      	cmp	r3, #9
 8007562:	d94d      	bls.n	8007600 <_svfiprintf_r+0x17c>
 8007564:	b1b0      	cbz	r0, 8007594 <_svfiprintf_r+0x110>
 8007566:	9207      	str	r2, [sp, #28]
 8007568:	e014      	b.n	8007594 <_svfiprintf_r+0x110>
 800756a:	eba0 0308 	sub.w	r3, r0, r8
 800756e:	fa09 f303 	lsl.w	r3, r9, r3
 8007572:	4313      	orrs	r3, r2
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	46a2      	mov	sl, r4
 8007578:	e7d2      	b.n	8007520 <_svfiprintf_r+0x9c>
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	1d19      	adds	r1, r3, #4
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	9103      	str	r1, [sp, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfbb      	ittet	lt
 8007586:	425b      	neglt	r3, r3
 8007588:	f042 0202 	orrlt.w	r2, r2, #2
 800758c:	9307      	strge	r3, [sp, #28]
 800758e:	9307      	strlt	r3, [sp, #28]
 8007590:	bfb8      	it	lt
 8007592:	9204      	strlt	r2, [sp, #16]
 8007594:	7823      	ldrb	r3, [r4, #0]
 8007596:	2b2e      	cmp	r3, #46	; 0x2e
 8007598:	d10c      	bne.n	80075b4 <_svfiprintf_r+0x130>
 800759a:	7863      	ldrb	r3, [r4, #1]
 800759c:	2b2a      	cmp	r3, #42	; 0x2a
 800759e:	d134      	bne.n	800760a <_svfiprintf_r+0x186>
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	1d1a      	adds	r2, r3, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	9203      	str	r2, [sp, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bfb8      	it	lt
 80075ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075b0:	3402      	adds	r4, #2
 80075b2:	9305      	str	r3, [sp, #20]
 80075b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800767c <_svfiprintf_r+0x1f8>
 80075b8:	7821      	ldrb	r1, [r4, #0]
 80075ba:	2203      	movs	r2, #3
 80075bc:	4650      	mov	r0, sl
 80075be:	f7f8 fe0f 	bl	80001e0 <memchr>
 80075c2:	b138      	cbz	r0, 80075d4 <_svfiprintf_r+0x150>
 80075c4:	9b04      	ldr	r3, [sp, #16]
 80075c6:	eba0 000a 	sub.w	r0, r0, sl
 80075ca:	2240      	movs	r2, #64	; 0x40
 80075cc:	4082      	lsls	r2, r0
 80075ce:	4313      	orrs	r3, r2
 80075d0:	3401      	adds	r4, #1
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d8:	4825      	ldr	r0, [pc, #148]	; (8007670 <_svfiprintf_r+0x1ec>)
 80075da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075de:	2206      	movs	r2, #6
 80075e0:	f7f8 fdfe 	bl	80001e0 <memchr>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d038      	beq.n	800765a <_svfiprintf_r+0x1d6>
 80075e8:	4b22      	ldr	r3, [pc, #136]	; (8007674 <_svfiprintf_r+0x1f0>)
 80075ea:	bb1b      	cbnz	r3, 8007634 <_svfiprintf_r+0x1b0>
 80075ec:	9b03      	ldr	r3, [sp, #12]
 80075ee:	3307      	adds	r3, #7
 80075f0:	f023 0307 	bic.w	r3, r3, #7
 80075f4:	3308      	adds	r3, #8
 80075f6:	9303      	str	r3, [sp, #12]
 80075f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fa:	4433      	add	r3, r6
 80075fc:	9309      	str	r3, [sp, #36]	; 0x24
 80075fe:	e768      	b.n	80074d2 <_svfiprintf_r+0x4e>
 8007600:	fb0c 3202 	mla	r2, ip, r2, r3
 8007604:	460c      	mov	r4, r1
 8007606:	2001      	movs	r0, #1
 8007608:	e7a6      	b.n	8007558 <_svfiprintf_r+0xd4>
 800760a:	2300      	movs	r3, #0
 800760c:	3401      	adds	r4, #1
 800760e:	9305      	str	r3, [sp, #20]
 8007610:	4619      	mov	r1, r3
 8007612:	f04f 0c0a 	mov.w	ip, #10
 8007616:	4620      	mov	r0, r4
 8007618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800761c:	3a30      	subs	r2, #48	; 0x30
 800761e:	2a09      	cmp	r2, #9
 8007620:	d903      	bls.n	800762a <_svfiprintf_r+0x1a6>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0c6      	beq.n	80075b4 <_svfiprintf_r+0x130>
 8007626:	9105      	str	r1, [sp, #20]
 8007628:	e7c4      	b.n	80075b4 <_svfiprintf_r+0x130>
 800762a:	fb0c 2101 	mla	r1, ip, r1, r2
 800762e:	4604      	mov	r4, r0
 8007630:	2301      	movs	r3, #1
 8007632:	e7f0      	b.n	8007616 <_svfiprintf_r+0x192>
 8007634:	ab03      	add	r3, sp, #12
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	462a      	mov	r2, r5
 800763a:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <_svfiprintf_r+0x1f4>)
 800763c:	a904      	add	r1, sp, #16
 800763e:	4638      	mov	r0, r7
 8007640:	f3af 8000 	nop.w
 8007644:	1c42      	adds	r2, r0, #1
 8007646:	4606      	mov	r6, r0
 8007648:	d1d6      	bne.n	80075f8 <_svfiprintf_r+0x174>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	065b      	lsls	r3, r3, #25
 800764e:	f53f af2d 	bmi.w	80074ac <_svfiprintf_r+0x28>
 8007652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007654:	b01d      	add	sp, #116	; 0x74
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765a:	ab03      	add	r3, sp, #12
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	462a      	mov	r2, r5
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <_svfiprintf_r+0x1f4>)
 8007662:	a904      	add	r1, sp, #16
 8007664:	4638      	mov	r0, r7
 8007666:	f000 f879 	bl	800775c <_printf_i>
 800766a:	e7eb      	b.n	8007644 <_svfiprintf_r+0x1c0>
 800766c:	0801b89c 	.word	0x0801b89c
 8007670:	0801b8a6 	.word	0x0801b8a6
 8007674:	00000000 	.word	0x00000000
 8007678:	080073d1 	.word	0x080073d1
 800767c:	0801b8a2 	.word	0x0801b8a2

08007680 <_printf_common>:
 8007680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007684:	4616      	mov	r6, r2
 8007686:	4699      	mov	r9, r3
 8007688:	688a      	ldr	r2, [r1, #8]
 800768a:	690b      	ldr	r3, [r1, #16]
 800768c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007690:	4293      	cmp	r3, r2
 8007692:	bfb8      	it	lt
 8007694:	4613      	movlt	r3, r2
 8007696:	6033      	str	r3, [r6, #0]
 8007698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800769c:	4607      	mov	r7, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	b10a      	cbz	r2, 80076a6 <_printf_common+0x26>
 80076a2:	3301      	adds	r3, #1
 80076a4:	6033      	str	r3, [r6, #0]
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	0699      	lsls	r1, r3, #26
 80076aa:	bf42      	ittt	mi
 80076ac:	6833      	ldrmi	r3, [r6, #0]
 80076ae:	3302      	addmi	r3, #2
 80076b0:	6033      	strmi	r3, [r6, #0]
 80076b2:	6825      	ldr	r5, [r4, #0]
 80076b4:	f015 0506 	ands.w	r5, r5, #6
 80076b8:	d106      	bne.n	80076c8 <_printf_common+0x48>
 80076ba:	f104 0a19 	add.w	sl, r4, #25
 80076be:	68e3      	ldr	r3, [r4, #12]
 80076c0:	6832      	ldr	r2, [r6, #0]
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	42ab      	cmp	r3, r5
 80076c6:	dc26      	bgt.n	8007716 <_printf_common+0x96>
 80076c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076cc:	1e13      	subs	r3, r2, #0
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	bf18      	it	ne
 80076d2:	2301      	movne	r3, #1
 80076d4:	0692      	lsls	r2, r2, #26
 80076d6:	d42b      	bmi.n	8007730 <_printf_common+0xb0>
 80076d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076dc:	4649      	mov	r1, r9
 80076de:	4638      	mov	r0, r7
 80076e0:	47c0      	blx	r8
 80076e2:	3001      	adds	r0, #1
 80076e4:	d01e      	beq.n	8007724 <_printf_common+0xa4>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	6922      	ldr	r2, [r4, #16]
 80076ea:	f003 0306 	and.w	r3, r3, #6
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	bf02      	ittt	eq
 80076f2:	68e5      	ldreq	r5, [r4, #12]
 80076f4:	6833      	ldreq	r3, [r6, #0]
 80076f6:	1aed      	subeq	r5, r5, r3
 80076f8:	68a3      	ldr	r3, [r4, #8]
 80076fa:	bf0c      	ite	eq
 80076fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007700:	2500      	movne	r5, #0
 8007702:	4293      	cmp	r3, r2
 8007704:	bfc4      	itt	gt
 8007706:	1a9b      	subgt	r3, r3, r2
 8007708:	18ed      	addgt	r5, r5, r3
 800770a:	2600      	movs	r6, #0
 800770c:	341a      	adds	r4, #26
 800770e:	42b5      	cmp	r5, r6
 8007710:	d11a      	bne.n	8007748 <_printf_common+0xc8>
 8007712:	2000      	movs	r0, #0
 8007714:	e008      	b.n	8007728 <_printf_common+0xa8>
 8007716:	2301      	movs	r3, #1
 8007718:	4652      	mov	r2, sl
 800771a:	4649      	mov	r1, r9
 800771c:	4638      	mov	r0, r7
 800771e:	47c0      	blx	r8
 8007720:	3001      	adds	r0, #1
 8007722:	d103      	bne.n	800772c <_printf_common+0xac>
 8007724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	3501      	adds	r5, #1
 800772e:	e7c6      	b.n	80076be <_printf_common+0x3e>
 8007730:	18e1      	adds	r1, r4, r3
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	2030      	movs	r0, #48	; 0x30
 8007736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800773a:	4422      	add	r2, r4
 800773c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007744:	3302      	adds	r3, #2
 8007746:	e7c7      	b.n	80076d8 <_printf_common+0x58>
 8007748:	2301      	movs	r3, #1
 800774a:	4622      	mov	r2, r4
 800774c:	4649      	mov	r1, r9
 800774e:	4638      	mov	r0, r7
 8007750:	47c0      	blx	r8
 8007752:	3001      	adds	r0, #1
 8007754:	d0e6      	beq.n	8007724 <_printf_common+0xa4>
 8007756:	3601      	adds	r6, #1
 8007758:	e7d9      	b.n	800770e <_printf_common+0x8e>
	...

0800775c <_printf_i>:
 800775c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	7e0f      	ldrb	r7, [r1, #24]
 8007762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007764:	2f78      	cmp	r7, #120	; 0x78
 8007766:	4691      	mov	r9, r2
 8007768:	4680      	mov	r8, r0
 800776a:	460c      	mov	r4, r1
 800776c:	469a      	mov	sl, r3
 800776e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007772:	d807      	bhi.n	8007784 <_printf_i+0x28>
 8007774:	2f62      	cmp	r7, #98	; 0x62
 8007776:	d80a      	bhi.n	800778e <_printf_i+0x32>
 8007778:	2f00      	cmp	r7, #0
 800777a:	f000 80d4 	beq.w	8007926 <_printf_i+0x1ca>
 800777e:	2f58      	cmp	r7, #88	; 0x58
 8007780:	f000 80c0 	beq.w	8007904 <_printf_i+0x1a8>
 8007784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800778c:	e03a      	b.n	8007804 <_printf_i+0xa8>
 800778e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007792:	2b15      	cmp	r3, #21
 8007794:	d8f6      	bhi.n	8007784 <_printf_i+0x28>
 8007796:	a101      	add	r1, pc, #4	; (adr r1, 800779c <_printf_i+0x40>)
 8007798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	08007809 	.word	0x08007809
 80077a4:	08007785 	.word	0x08007785
 80077a8:	08007785 	.word	0x08007785
 80077ac:	08007785 	.word	0x08007785
 80077b0:	08007785 	.word	0x08007785
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007785 	.word	0x08007785
 80077bc:	08007785 	.word	0x08007785
 80077c0:	08007785 	.word	0x08007785
 80077c4:	08007785 	.word	0x08007785
 80077c8:	0800790d 	.word	0x0800790d
 80077cc:	08007835 	.word	0x08007835
 80077d0:	080078c7 	.word	0x080078c7
 80077d4:	08007785 	.word	0x08007785
 80077d8:	08007785 	.word	0x08007785
 80077dc:	0800792f 	.word	0x0800792f
 80077e0:	08007785 	.word	0x08007785
 80077e4:	08007835 	.word	0x08007835
 80077e8:	08007785 	.word	0x08007785
 80077ec:	08007785 	.word	0x08007785
 80077f0:	080078cf 	.word	0x080078cf
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	1d1a      	adds	r2, r3, #4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	602a      	str	r2, [r5, #0]
 80077fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007804:	2301      	movs	r3, #1
 8007806:	e09f      	b.n	8007948 <_printf_i+0x1ec>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	0607      	lsls	r7, r0, #24
 800780e:	f103 0104 	add.w	r1, r3, #4
 8007812:	6029      	str	r1, [r5, #0]
 8007814:	d501      	bpl.n	800781a <_printf_i+0xbe>
 8007816:	681e      	ldr	r6, [r3, #0]
 8007818:	e003      	b.n	8007822 <_printf_i+0xc6>
 800781a:	0646      	lsls	r6, r0, #25
 800781c:	d5fb      	bpl.n	8007816 <_printf_i+0xba>
 800781e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007822:	2e00      	cmp	r6, #0
 8007824:	da03      	bge.n	800782e <_printf_i+0xd2>
 8007826:	232d      	movs	r3, #45	; 0x2d
 8007828:	4276      	negs	r6, r6
 800782a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800782e:	485a      	ldr	r0, [pc, #360]	; (8007998 <_printf_i+0x23c>)
 8007830:	230a      	movs	r3, #10
 8007832:	e012      	b.n	800785a <_printf_i+0xfe>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	6820      	ldr	r0, [r4, #0]
 8007838:	1d19      	adds	r1, r3, #4
 800783a:	6029      	str	r1, [r5, #0]
 800783c:	0605      	lsls	r5, r0, #24
 800783e:	d501      	bpl.n	8007844 <_printf_i+0xe8>
 8007840:	681e      	ldr	r6, [r3, #0]
 8007842:	e002      	b.n	800784a <_printf_i+0xee>
 8007844:	0641      	lsls	r1, r0, #25
 8007846:	d5fb      	bpl.n	8007840 <_printf_i+0xe4>
 8007848:	881e      	ldrh	r6, [r3, #0]
 800784a:	4853      	ldr	r0, [pc, #332]	; (8007998 <_printf_i+0x23c>)
 800784c:	2f6f      	cmp	r7, #111	; 0x6f
 800784e:	bf0c      	ite	eq
 8007850:	2308      	moveq	r3, #8
 8007852:	230a      	movne	r3, #10
 8007854:	2100      	movs	r1, #0
 8007856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800785a:	6865      	ldr	r5, [r4, #4]
 800785c:	60a5      	str	r5, [r4, #8]
 800785e:	2d00      	cmp	r5, #0
 8007860:	bfa2      	ittt	ge
 8007862:	6821      	ldrge	r1, [r4, #0]
 8007864:	f021 0104 	bicge.w	r1, r1, #4
 8007868:	6021      	strge	r1, [r4, #0]
 800786a:	b90e      	cbnz	r6, 8007870 <_printf_i+0x114>
 800786c:	2d00      	cmp	r5, #0
 800786e:	d04b      	beq.n	8007908 <_printf_i+0x1ac>
 8007870:	4615      	mov	r5, r2
 8007872:	fbb6 f1f3 	udiv	r1, r6, r3
 8007876:	fb03 6711 	mls	r7, r3, r1, r6
 800787a:	5dc7      	ldrb	r7, [r0, r7]
 800787c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007880:	4637      	mov	r7, r6
 8007882:	42bb      	cmp	r3, r7
 8007884:	460e      	mov	r6, r1
 8007886:	d9f4      	bls.n	8007872 <_printf_i+0x116>
 8007888:	2b08      	cmp	r3, #8
 800788a:	d10b      	bne.n	80078a4 <_printf_i+0x148>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	07de      	lsls	r6, r3, #31
 8007890:	d508      	bpl.n	80078a4 <_printf_i+0x148>
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	6861      	ldr	r1, [r4, #4]
 8007896:	4299      	cmp	r1, r3
 8007898:	bfde      	ittt	le
 800789a:	2330      	movle	r3, #48	; 0x30
 800789c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80078a4:	1b52      	subs	r2, r2, r5
 80078a6:	6122      	str	r2, [r4, #16]
 80078a8:	f8cd a000 	str.w	sl, [sp]
 80078ac:	464b      	mov	r3, r9
 80078ae:	aa03      	add	r2, sp, #12
 80078b0:	4621      	mov	r1, r4
 80078b2:	4640      	mov	r0, r8
 80078b4:	f7ff fee4 	bl	8007680 <_printf_common>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d14a      	bne.n	8007952 <_printf_i+0x1f6>
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078c0:	b004      	add	sp, #16
 80078c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	f043 0320 	orr.w	r3, r3, #32
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	4833      	ldr	r0, [pc, #204]	; (800799c <_printf_i+0x240>)
 80078d0:	2778      	movs	r7, #120	; 0x78
 80078d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	6829      	ldr	r1, [r5, #0]
 80078da:	061f      	lsls	r7, r3, #24
 80078dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80078e0:	d402      	bmi.n	80078e8 <_printf_i+0x18c>
 80078e2:	065f      	lsls	r7, r3, #25
 80078e4:	bf48      	it	mi
 80078e6:	b2b6      	uxthmi	r6, r6
 80078e8:	07df      	lsls	r7, r3, #31
 80078ea:	bf48      	it	mi
 80078ec:	f043 0320 	orrmi.w	r3, r3, #32
 80078f0:	6029      	str	r1, [r5, #0]
 80078f2:	bf48      	it	mi
 80078f4:	6023      	strmi	r3, [r4, #0]
 80078f6:	b91e      	cbnz	r6, 8007900 <_printf_i+0x1a4>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	f023 0320 	bic.w	r3, r3, #32
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	2310      	movs	r3, #16
 8007902:	e7a7      	b.n	8007854 <_printf_i+0xf8>
 8007904:	4824      	ldr	r0, [pc, #144]	; (8007998 <_printf_i+0x23c>)
 8007906:	e7e4      	b.n	80078d2 <_printf_i+0x176>
 8007908:	4615      	mov	r5, r2
 800790a:	e7bd      	b.n	8007888 <_printf_i+0x12c>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	6826      	ldr	r6, [r4, #0]
 8007910:	6961      	ldr	r1, [r4, #20]
 8007912:	1d18      	adds	r0, r3, #4
 8007914:	6028      	str	r0, [r5, #0]
 8007916:	0635      	lsls	r5, r6, #24
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	d501      	bpl.n	8007920 <_printf_i+0x1c4>
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	e002      	b.n	8007926 <_printf_i+0x1ca>
 8007920:	0670      	lsls	r0, r6, #25
 8007922:	d5fb      	bpl.n	800791c <_printf_i+0x1c0>
 8007924:	8019      	strh	r1, [r3, #0]
 8007926:	2300      	movs	r3, #0
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	4615      	mov	r5, r2
 800792c:	e7bc      	b.n	80078a8 <_printf_i+0x14c>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	1d1a      	adds	r2, r3, #4
 8007932:	602a      	str	r2, [r5, #0]
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	2100      	movs	r1, #0
 800793a:	4628      	mov	r0, r5
 800793c:	f7f8 fc50 	bl	80001e0 <memchr>
 8007940:	b108      	cbz	r0, 8007946 <_printf_i+0x1ea>
 8007942:	1b40      	subs	r0, r0, r5
 8007944:	6060      	str	r0, [r4, #4]
 8007946:	6863      	ldr	r3, [r4, #4]
 8007948:	6123      	str	r3, [r4, #16]
 800794a:	2300      	movs	r3, #0
 800794c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007950:	e7aa      	b.n	80078a8 <_printf_i+0x14c>
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	462a      	mov	r2, r5
 8007956:	4649      	mov	r1, r9
 8007958:	4640      	mov	r0, r8
 800795a:	47d0      	blx	sl
 800795c:	3001      	adds	r0, #1
 800795e:	d0ad      	beq.n	80078bc <_printf_i+0x160>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	079b      	lsls	r3, r3, #30
 8007964:	d413      	bmi.n	800798e <_printf_i+0x232>
 8007966:	68e0      	ldr	r0, [r4, #12]
 8007968:	9b03      	ldr	r3, [sp, #12]
 800796a:	4298      	cmp	r0, r3
 800796c:	bfb8      	it	lt
 800796e:	4618      	movlt	r0, r3
 8007970:	e7a6      	b.n	80078c0 <_printf_i+0x164>
 8007972:	2301      	movs	r3, #1
 8007974:	4632      	mov	r2, r6
 8007976:	4649      	mov	r1, r9
 8007978:	4640      	mov	r0, r8
 800797a:	47d0      	blx	sl
 800797c:	3001      	adds	r0, #1
 800797e:	d09d      	beq.n	80078bc <_printf_i+0x160>
 8007980:	3501      	adds	r5, #1
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	9903      	ldr	r1, [sp, #12]
 8007986:	1a5b      	subs	r3, r3, r1
 8007988:	42ab      	cmp	r3, r5
 800798a:	dcf2      	bgt.n	8007972 <_printf_i+0x216>
 800798c:	e7eb      	b.n	8007966 <_printf_i+0x20a>
 800798e:	2500      	movs	r5, #0
 8007990:	f104 0619 	add.w	r6, r4, #25
 8007994:	e7f5      	b.n	8007982 <_printf_i+0x226>
 8007996:	bf00      	nop
 8007998:	0801b8ad 	.word	0x0801b8ad
 800799c:	0801b8be 	.word	0x0801b8be

080079a0 <memmove>:
 80079a0:	4288      	cmp	r0, r1
 80079a2:	b510      	push	{r4, lr}
 80079a4:	eb01 0402 	add.w	r4, r1, r2
 80079a8:	d902      	bls.n	80079b0 <memmove+0x10>
 80079aa:	4284      	cmp	r4, r0
 80079ac:	4623      	mov	r3, r4
 80079ae:	d807      	bhi.n	80079c0 <memmove+0x20>
 80079b0:	1e43      	subs	r3, r0, #1
 80079b2:	42a1      	cmp	r1, r4
 80079b4:	d008      	beq.n	80079c8 <memmove+0x28>
 80079b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079be:	e7f8      	b.n	80079b2 <memmove+0x12>
 80079c0:	4402      	add	r2, r0
 80079c2:	4601      	mov	r1, r0
 80079c4:	428a      	cmp	r2, r1
 80079c6:	d100      	bne.n	80079ca <memmove+0x2a>
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079d2:	e7f7      	b.n	80079c4 <memmove+0x24>

080079d4 <_sbrk_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d06      	ldr	r5, [pc, #24]	; (80079f0 <_sbrk_r+0x1c>)
 80079d8:	2300      	movs	r3, #0
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	f7f9 fcec 	bl	80013bc <_sbrk>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_sbrk_r+0x1a>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_sbrk_r+0x1a>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	2000e708 	.word	0x2000e708

080079f4 <_realloc_r>:
 80079f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f8:	4680      	mov	r8, r0
 80079fa:	4614      	mov	r4, r2
 80079fc:	460e      	mov	r6, r1
 80079fe:	b921      	cbnz	r1, 8007a0a <_realloc_r+0x16>
 8007a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a04:	4611      	mov	r1, r2
 8007a06:	f7ff bc57 	b.w	80072b8 <_malloc_r>
 8007a0a:	b92a      	cbnz	r2, 8007a18 <_realloc_r+0x24>
 8007a0c:	f7ff fbe8 	bl	80071e0 <_free_r>
 8007a10:	4625      	mov	r5, r4
 8007a12:	4628      	mov	r0, r5
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	f000 f81b 	bl	8007a52 <_malloc_usable_size_r>
 8007a1c:	4284      	cmp	r4, r0
 8007a1e:	4607      	mov	r7, r0
 8007a20:	d802      	bhi.n	8007a28 <_realloc_r+0x34>
 8007a22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a26:	d812      	bhi.n	8007a4e <_realloc_r+0x5a>
 8007a28:	4621      	mov	r1, r4
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	f7ff fc44 	bl	80072b8 <_malloc_r>
 8007a30:	4605      	mov	r5, r0
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d0ed      	beq.n	8007a12 <_realloc_r+0x1e>
 8007a36:	42bc      	cmp	r4, r7
 8007a38:	4622      	mov	r2, r4
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	bf28      	it	cs
 8007a3e:	463a      	movcs	r2, r7
 8007a40:	f7ff fbc0 	bl	80071c4 <memcpy>
 8007a44:	4631      	mov	r1, r6
 8007a46:	4640      	mov	r0, r8
 8007a48:	f7ff fbca 	bl	80071e0 <_free_r>
 8007a4c:	e7e1      	b.n	8007a12 <_realloc_r+0x1e>
 8007a4e:	4635      	mov	r5, r6
 8007a50:	e7df      	b.n	8007a12 <_realloc_r+0x1e>

08007a52 <_malloc_usable_size_r>:
 8007a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a56:	1f18      	subs	r0, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfbc      	itt	lt
 8007a5c:	580b      	ldrlt	r3, [r1, r0]
 8007a5e:	18c0      	addlt	r0, r0, r3
 8007a60:	4770      	bx	lr
	...

08007a64 <sqrtf>:
 8007a64:	b508      	push	{r3, lr}
 8007a66:	ed2d 8b02 	vpush	{d8}
 8007a6a:	eeb0 8a40 	vmov.f32	s16, s0
 8007a6e:	f000 f817 	bl	8007aa0 <__ieee754_sqrtf>
 8007a72:	eeb4 8a48 	vcmp.f32	s16, s16
 8007a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7a:	d60c      	bvs.n	8007a96 <sqrtf+0x32>
 8007a7c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007a9c <sqrtf+0x38>
 8007a80:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	d505      	bpl.n	8007a96 <sqrtf+0x32>
 8007a8a:	f7ff fb6f 	bl	800716c <__errno>
 8007a8e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007a92:	2321      	movs	r3, #33	; 0x21
 8007a94:	6003      	str	r3, [r0, #0]
 8007a96:	ecbd 8b02 	vpop	{d8}
 8007a9a:	bd08      	pop	{r3, pc}
 8007a9c:	00000000 	.word	0x00000000

08007aa0 <__ieee754_sqrtf>:
 8007aa0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007aa4:	4770      	bx	lr
	...

08007aa8 <_init>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	bf00      	nop
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_fini>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr
